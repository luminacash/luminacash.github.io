(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[0],{197:function(e,n,t){e.exports={button:"IconButton_button__38sbU",buttonHover:"IconButton_buttonHover__1fn1s",buttonDown:"IconButton_buttonDown__1U4T-"}},198:function(e,n,t){e.exports={svg:"LoadingIcon_svg__3Kkmg"}},263:function(e){e.exports=JSON.parse('{"address":"0xEac48fc254dCb52C80d9D77013cc6AB961E7179D","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"initSupply","type":"uint256"},{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xdc099505753086bef112a0388be956962670d23159bc9a9e3ab775aa8bdf2c1e","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xEac48fc254dCb52C80d9D77013cc6AB961E7179D","transactionIndex":33,"gasUsed":"825180","logsBloom":"0xblockHash":"0x67e91279240d08496989d2cb95be47a3e874d3ade82c799fed6090c8b916fcae","transactionHash":"0xdc099505753086bef112a0388be956962670d23159bc9a9e3ab775aa8bdf2c1e","logs":[{"transactionIndex":33,"blockNumber":24636872,"transactionHash":"0xdc099505753086bef112a0388be956962670d23159bc9a9e3ab775aa8bdf2c1e","address":"0xEac48fc254dCb52C80d9D77013cc6AB961E7179D","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x000000000000000000000000000000000000000000115eec47f6cf7e35000000","logIndex":243,"blockHash":"0x67e91279240d08496989d2cb95be47a3e874d3ade82c799fed6090c8b916fcae"},{"transactionIndex":33,"blockNumber":24636872,"transactionHash":"0xdc099505753086bef112a0388be956962670d23159bc9a9e3ab775aa8bdf2c1e","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000742d13f0b2a19c823bdd362b16305e4704b97a38"],"data":"0x0000000000000000000000000000000000000000000000000057f2e7b62436bc0000000000000000000000000000000000000000000000207b8d5c788b513d73000000000000000000000000000000000000000000000e51b1498af37424f9eb0000000000000000000000000000000000000000000000207b356990d52d06b7000000000000000000000000000000000000000000000e51b1a17ddb2a4930a7","logIndex":244,"blockHash":"0x67e91279240d08496989d2cb95be47a3e874d3ade82c799fed6090c8b916fcae"}],"blockNumber":24636872,"cumulativeGasUsed":"17821301","status":1,"byzantium":true},"args":["Lumina","LUMI",21000000,"0x5A50112324ef0FBEEb001c9d3BE4a7A6D018BE91"],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"initSupply\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaToken.sol\\":\\"LuminaToken\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\n\\\\ncontract LuminaToken is ERC20 {\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    constructor(string memory name, string memory symbol, uint initSupply, address recordsAddr_) ERC20(name, symbol) {\\\\n        // Mint initial supply to msg.sender\\\\n        uint8 decimals = decimals();\\\\n        require(decimals == 18);\\\\n        _mint(msg.sender, initSupply * (10**decimals));\\\\n\\\\n        // Register the records contract address\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n     }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        super._transfer(sender, recipient, amount);\\\\n\\\\n        try records._updateBalance(sender, balanceOf(sender)) {\\\\n        } catch {\\\\n        }\\\\n\\\\n        try records._registerBalance(recipient, balanceOf(recipient), false) {\\\\n        } catch {\\\\n        }\\\\n    }\\\\n\\\\n    function registerBalance() public {\\\\n        uint256 balance = balanceOf(msg.sender);\\\\n        records._registerBalance(msg.sender, balance, true);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f87dbf57391bdcea10dd041f042ba892331ed207bcb1dab9a037a0c625f0c3d\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":5558,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"recordsAddr","offset":0,"slot":"5","type":"t_address"},{"astId":5561,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},265:function(e){e.exports=JSON.parse('{"address":"0x5A50112324ef0FBEEb001c9d3BE4a7A6D018BE91","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"Commision","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}],"name":"RegisteredBalance","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"name":"_addClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"}],"name":"_registerBalance","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"_updateBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"firstBlockNumber_","type":"uint64"}],"name":"_updateFirstBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddr_","type":"address"}],"name":"attachAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"name":"attachToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"findBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"getClaims","outputs":[{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"getClaimsCnt","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getCommision","outputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"setCommision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x1702be04af925b5f7cd648a26a79cd21f06d18e44c933eb7c3e1caf534045b62","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x5A50112324ef0FBEEb001c9d3BE4a7A6D018BE91","transactionIndex":136,"gasUsed":"1675243","logsBloom":"0xblockHash":"0x1b8ef624ab5e4df5082d0884ecf356a77df50a8107149f6fb26bd57a8995ca27","transactionHash":"0x1702be04af925b5f7cd648a26a79cd21f06d18e44c933eb7c3e1caf534045b62","logs":[{"transactionIndex":136,"blockNumber":24636864,"transactionHash":"0x1702be04af925b5f7cd648a26a79cd21f06d18e44c933eb7c3e1caf534045b62","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000742d13f0b2a19c823bdd362b16305e4704b97a38"],"data":"0x00000000000000000000000000000000000000000000000000b28cbd2ca024fc0000000000000000000000000000000000000000000000207c3fe935b9242173000000000000000000000000000000000000000000000e514a124b13a83e320d0000000000000000000000000000000000000000000000207b8d5c788c83fc77000000000000000000000000000000000000000000000e514ac4d7d0d4de5709","logIndex":717,"blockHash":"0x1b8ef624ab5e4df5082d0884ecf356a77df50a8107149f6fb26bd57a8995ca27"}],"blockNumber":24636864,"cumulativeGasUsed":"27086147","status":1,"byzantium":true},"args":[],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"Commision\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"RegisteredBalance\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"_addClaim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"force\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_registerBalance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"registered\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_updateBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"firstBlockNumber_\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"_updateFirstBlockNumber\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachAdmin\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachToken\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"findBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBalances\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getClaims\\",\\"outputs\\":[{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"getClaimsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCommision\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasClaimed\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"setCommision\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaRecords.sol\\":\\"LuminaRecords\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyToken.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./OnlyAdmin.sol\\\\\\";\\\\n\\\\ncontract LuminaRecords is ILuminaRecords, Parameters, OnlyToken, OnlyTrustee, OnlyAdmin {\\\\n\\\\n    uint8 private constant BALANCE_RECORDS_CNT = 5;\\\\n    uint8 private constant DEFAULT_COMMISION_PRC = 22;\\\\n    uint8 private constant ZERO_COMMISION_PRC = 255;\\\\n    uint8 private constant MIN_COMMISION_PRC = 10;\\\\n    uint8 private constant MAX_COMMISION_PRC = 90;\\\\n\\\\n    struct AddrBalanceRecord {\\\\n        uint256 balance;\\\\n        uint64 blockNumber;\\\\n    }\\\\n\\\\n    struct AddrBalanceRecords {\\\\n        AddrBalanceRecord[BALANCE_RECORDS_CNT] records;\\\\n        uint8 recordsCnt;\\\\n    }\\\\n\\\\n    // Mapping blockNumber to Balance Records\\\\n    uint64 private _firstBlockNumber;\\\\n    mapping (address => AddrBalanceRecords) private _balanceRecords;\\\\n\\\\n    // Mapping blockNumber to claimsCnt\\\\n    mapping (uint64 => uint16) private _claimsCnt;\\\\n\\\\n    // Mapping blockNumber to address to uint32 (number of reward units)\\\\n    mapping (uint64 => mapping (address => uint32)) private _claimed;\\\\n\\\\n    // Mapping wallet address to commision rate\\\\n    // Special internal encodings: 0 means default commision, 255 means no commision (0%)\\\\n    mapping (address => uint8) private _commisions;\\\\n\\\\n    event Commision(address indexed wallet, uint8 commisionPrc);\\\\n    event RegisteredBalance(address indexed wallet, uint64 blockNumber, uint256 balance);\\\\n\\\\n    constructor() {\\\\n        _firstBlockNumber = 0;\\\\n    }\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        AddrBalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        uint8 cnt = brs.recordsCnt;\\\\n        balances = new uint256[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            balances[i] = brs.records[i].balance;\\\\n            blockNumbers[i] = brs.records[i].blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance) {\\\\n        balance = 0;\\\\n\\\\n        AddrBalanceRecords memory brs = _balanceRecords[wallet];\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            if(blockNumber >= brs.records[i].blockNumber) {\\\\n                balance = brs.records[i].balance;\\\\n                return (balance);\\\\n            }\\\\n        }\\\\n\\\\n        require(balance == 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n        return (balance);\\\\n    }\\\\n\\\\n    function getClaimsCnt(uint64 blockNumber) public view returns (uint16) {\\\\n        return _claimsCnt[blockNumber];\\\\n    }\\\\n\\\\n    function hasClaimed(uint64 blockNumber, address recipient) public view returns (uint32 rewardUnits) {\\\\n        rewardUnits = _claimed[blockNumber][recipient];\\\\n    }\\\\n\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        uint8 cnt = uint8(blockNumbers.length);\\\\n        claimsCnt = new uint16[](cnt);\\\\n        claimed = new bool[](cnt);\\\\n\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            claimsCnt[i] = getClaimsCnt(blockNumbers[i]);\\\\n            claimed[i] = hasClaimed(blockNumbers[i], recipient) != 0;\\\\n        }\\\\n    }\\\\n\\\\n    function setCommision(uint8 commisionPrc) external {\\\\n        address wallet = msg.sender;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n        uint8 c = commisionPrc == 0 ? ZERO_COMMISION_PRC : commisionPrc;\\\\n        _commisions[wallet] = c;\\\\n        emit Commision(wallet, commisionPrc);\\\\n    }\\\\n\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc) {\\\\n        uint8 c = _commisions[wallet];\\\\n        bool isContract = Address.isContract(wallet);\\\\n        // Contracts default commision is 0%, regular wallets defualt commision is 22%\\\\n        commisionPrc = c == 0 ? (isContract ? 0 : DEFAULT_COMMISION_PRC) : c == ZERO_COMMISION_PRC ? 0 : c;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n    }\\\\n\\\\n    function _cleanupBalances(AddrBalanceRecords storage brs) private {\\\\n        if(brs.recordsCnt > 1) {\\\\n            for(uint8 i = brs.recordsCnt-1; i > 0; i--) {\\\\n                AddrBalanceRecord storage br = brs.records[i-1];\\\\n                if(br.blockNumber <= _firstBlockNumber) {\\\\n                    // We can remove the last record\\\\n                    brs.recordsCnt--;\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _registerBalance(address wallet, uint256 balance, bool force) external onlyToken returns (bool registered) {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return false;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt > 0 && brs.records[0].balance == balance) {\\\\n            // Don\'t register the same amount again\\\\n            registered = true;\\\\n        } else if(brs.recordsCnt < BALANCE_RECORDS_CNT || force) {\\\\n            uint8 n = brs.recordsCnt < BALANCE_RECORDS_CNT ? brs.recordsCnt : BALANCE_RECORDS_CNT - 1;\\\\n            for(uint8 i = n; i > 0; i--) {\\\\n                brs.records[i] = brs.records[i-1];\\\\n            }\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            if(brs.recordsCnt < BALANCE_RECORDS_CNT) {\\\\n                brs.recordsCnt++;\\\\n            }\\\\n            registered = true;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else {\\\\n            registered = false;\\\\n        }\\\\n    }\\\\n\\\\n    function _updateBalance(address wallet, uint256 balance) external onlyToken {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt == 0) {\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            brs.recordsCnt++;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else if(brs.records[0].balance > balance) {\\\\n            brs.records[0].balance = balance;\\\\n            blockNumber = brs.records[0].blockNumber;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        }\\\\n    }\\\\n\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external onlyTrustee {\\\\n        _claimsCnt[blockNumber]++;\\\\n        _claimed[blockNumber][recipient] = rewardUnits;\\\\n    }\\\\n\\\\n    function _updateFirstBlockNumber(uint64 firstBlockNumber_) external onlyAdmin {\\\\n        _firstBlockNumber = firstBlockNumber_;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2f56b42c359bb796776cddfb21b1bc7e5780662b42dcc1216c3f2c708c7cb568\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyAdmin`, which can be applied to your functions to restrict their use to\\\\n * the admin contract.\\\\n */\\\\nabstract contract OnlyAdmin is Context {\\\\n    address private _creatorAddr;\\\\n    address private _adminAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachAdmin(address adminAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyAdmin: only creator can attach a admin contract\\\\\\");\\\\n        require(_adminAddr == address(0), \\\\\\"OnlyAdmin: the admin contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _adminAddr = adminAddr_;\\\\n    }\\\\n\\\\n    function adminAddr() public view returns (address) {\\\\n        return _adminAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the admin.\\\\n     */\\\\n    modifier onlyAdmin() {\\\\n        require(adminAddr() == _msgSender(), \\\\\\"OnlyAdmin: conly admin can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x10cbbb90f6a01a3d19119e405d727a41803c8a23b342ec221d41e67b2083ea22\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyToken`, which can be applied to your functions to restrict their use to\\\\n * the token contract.\\\\n */\\\\nabstract contract OnlyToken is Context {\\\\n    address private _creatorAddr;\\\\n    address private _tokenAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachToken(address tokenAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyToken: only creator can attach a token contract\\\\\\");\\\\n        require(_tokenAddr == address(0), \\\\\\"OnlyToken: the token contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _tokenAddr = tokenAddr_;\\\\n    }\\\\n\\\\n    function tokenAddr() public view returns (address) {\\\\n        return _tokenAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the token.\\\\n     */\\\\n    modifier onlyToken() {\\\\n        require(tokenAddr() == _msgSender(), \\\\\\"OnlyToken: only token can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x00aed4c146f8db327b2aed3b3ffb4846cd67e8a5b0fd226d8a42d17116db0e31\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = false;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc8321ceb1a53930afe0efdbc6cc0080b00ced0e54ccf632e07cd2de32f41a954\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b5060008054336001600160a01b031991821681178355600280548316821790556004805490921617905560058054600160a01b600160e01b0319169055611c1290819061005d90396000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c80636bb987fe1161013b578063b313bd62116100b8578063d045d5ae1161007c578063d045d5ae1461046f578063d7a8a2b71461049c578063e81ec612146104c4578063ec2165d3146104cc578063f883fcaa1461045657600080fd5b8063b313bd6214610446578063b91268e81461044e578063c28bd11c14610456578063c28cedf31461045e578063c6088d971461046657600080fd5b8063910eb1ce116100ff578063910eb1ce146104105780639d941362146103f7578063a215776714610423578063a5c9cd821461042b578063ad6e33181461043357600080fd5b80636bb987fe146103cd578063731fd3f7146103d657806373d6aafa146103f75780637fb012321461037357806381830593146103ff57600080fd5b80633e6e387c116101c9578063552ba3331161018d578063552ba3331461037b578063566568751461038e5780635b7f415c146103a15780635fbe4d1d146103a9578063609eb1c3146103ba57600080fd5b80633e6e387c1461033c578063406a6f6014610345578063479e92c814610358578063480414df14610360578063504b36621461037357600080fd5b80631df55679116102105780631df55679146102bb57806322a0c348146102d057806330db4fa0146102f1578063362b8b32146103115780633a3a7c531461033457600080fd5b8062113e081461024157806306e38632146102605780630bf433091461027c57806314270b6514610296575b600080fd5b6102496104d4565b6040516102579291906115c8565b60405180910390f35b610269610a8c81565b60405161ffff9091168152602001610257565b61028460da81565b60405160ff9091168152602001610257565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610257565b6102ce6102c9366004611668565b6106a4565b005b6102e36102de36600461169a565b6107d6565b604051908152602001610257565b6102f960c881565b6040516001600160401b039091168152602001610257565b61032461031f3660046116cd565b61093b565b6040519015158152602001610257565b6102e3610bc3565b6102696101f481565b6102ce610353366004611668565b610bdd565b610284601481565b6102ce61036e366004611668565b610cfa565b610284606481565b6102ce610389366004611712565b610e17565b61028461039c366004611668565b610ff7565b610284601281565b6001546001600160a01b03166102a3565b6102ce6103c836600461173c565b61108b565b6102f961996881565b6103e96103e4366004611797565b61118f565b60405161025792919061186d565b610269600a81565b6005546001600160a01b03166102a3565b6102ce61041e3660046118e1565b61130f565b61028460ff81565b6102e36113af565b6102ce6104413660046118fc565b6113bb565b6102f9600281565b6102e3611480565b610284600281565b610324600081565b6102696103e881565b61026961047d3660046118e1565b6001600160401b031660009081526007602052604090205461ffff1690565b6104af6104aa36600461191f565b6114a2565b60405163ffffffff9091168152602001610257565b6102e36114d9565b6102f96114f1565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561053f5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104fe565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b0381111561057857610578611781565b6040519080825280602002602001820160405280156105a1578160200160208202803683370190505b5093508060ff166001600160401b038111156105bf576105bf611781565b6040519080825280602002602001820160405280156105e8578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561069d57825160ff82166005811061061657610616611949565b602002015160000151858260ff168151811061063457610634611949565b6020908102919091010152825160ff82166005811061065557610655611949565b602002015160200151848260ff168151811061067357610673611949565b6001600160401b03909216602092830291909101909101528061069581611975565b9150506105ee565b5050509091565b6002546001600160a01b031633146107295760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107a85760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610720565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108475760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610806565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108e457815160ff82166005811061088b5761088b611949565b6020020151602001516001600160401b0316846001600160401b0316106108d257815160ff8216600581106108c2576108c2611949565b6020020151519250610935915050565b806108dc81611975565b915050610863565b5081156109335760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e63650000006044820152606401610720565b505b92915050565b6001546000906001600160a01b031633146109685760405162461bcd60e51b815260040161072090611995565b6001600160a01b0384166000908152600660205260409020610989816114fe565b610995600360126119e4565b6109a090600a611aeb565b8410156109c657600a8101546000945060ff166109c1576000915050610bbc565b610a00565b6109d26012600a611aeb565b6109de906103e8611afa565b841115610a00576109f16012600a611aeb565b6109fd906103e8611afa565b93505b600a810154439060ff1615801590610a185750815485145b15610a265760019250610bb9565b600a820154600560ff9091161080610a3b5750835b15610bb457600a820154600090600560ff90911610610a6557610a60600160056119e4565b610a6e565b600a83015460ff165b9050805b60ff811615610afa5783610a876001836119e4565b60ff1660058110610a9a57610a9a611949565b600202018460ff831660058110610ab357610ab3611949565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610af281611b19565b915050610a72565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610b5d57600a8301805460ff16906000610b4383611975565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610bb9565b600092505b50505b9392505050565b610bcf600360126119e4565b610bda90600a611aeb565b81565b6000546001600160a01b03163314610c535760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b6064820152608401610720565b6001546001600160a01b031615610ccc5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610720565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d705760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b6064820152608401610720565b6005546001600160a01b031615610de95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610720565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610e415760405162461bcd60e51b815260040161072090611995565b6001600160a01b0382166000908152600660205260409020610e62816114fe565b610e6e600360126119e4565b610e7990600a611aeb565b821015610e9a57600a8101546000925060ff16610e9557505050565b610ed4565b610ea66012600a611aeb565b610eb2906103e8611afa565b821115610ed457610ec56012600a611aeb565b610ed1906103e8611afa565b91505b600a810154439060ff16610f8d5782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610f1883611975565b91906101000a81548160ff021916908360ff16021790555050836001600160a01b03167f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a8285604051610f809291906001600160401b03929092168252602082015260400190565b60405180910390a2610ff0565b8154831015610ff057508181556001810154604080516001600160401b0390921680835260208301859052916001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a25b50505b5050565b6001600160a01b03811660009081526009602052604081205460ff16823b151581156110345760ff8281161461102d5781611043565b6000611043565b80611040576016611043565b60005b925060ff83161580611068575060ff8316600a118015906110685750605a60ff841611155b6110845760405162461bcd60e51b815260040161072090611b36565b5050919050565b6003546001600160a01b031633146111015760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610720565b6001600160401b0383166000908152600760205260408120805461ffff169161112983611b8b565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b038111156111b1576111b1611781565b6040519080825280602002602001820160405280156111da578160200160208202803683370190505b5092508060ff166001600160401b038111156111f8576111f8611781565b604051908082528060200260200182016040528015611221578160200160208202803683370190505b50915060005b8160ff168160ff16101561130657611274868260ff168151811061124d5761124d611949565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff168151811061128957611289611949565b602002602001019061ffff16908161ffff16815250506112c5868260ff16815181106112b7576112b7611949565b6020026020010151866114a2565b63ffffffff1660001415838260ff16815181106112e4576112e4611949565b91151560209283029190910190910152806112fe81611975565b915050611227565b50509250929050565b6005546001600160a01b031633146113825760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b6064820152608401610720565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610bda6012600a611aeb565b3360ff821615806113df575060ff8216600a118015906113df5750605a60ff831611155b6113fb5760405162461bcd60e51b815260040161072090611b36565b600060ff83161561140c578261140f565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061147390869060ff91909116815260200190565b60405180910390a2505050565b61148c600360126119e4565b61149790600a611aeb565b610bda90600a611afa565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b6114e56012600a611aeb565b610bda906103e8611afa565b610bda6199686007611bad565b600a810154600160ff90911611156115c557600a8101546000906115279060019060ff166119e4565b90505b60ff811615610ff3576000826115416001846119e4565b60ff166005811061155457611554611949565b600554600160029290920292909201908101549092506001600160401b03600160a01b90920482169116116115b257600a8301805460ff1690600061159883611b19565b91906101000a81548160ff021916908360ff160217905550505b50806115bd81611b19565b91505061152a565b50565b604080825283519082018190526000906020906060840190828701845b82811015611601578151845292840192908401906001016115e5565b5050508381038285015284518082528583019183019060005b8181101561163f5783516001600160401b03168352928401929184019160010161161a565b5090979650505050505050565b80356001600160a01b038116811461166357600080fd5b919050565b60006020828403121561167a57600080fd5b610bbc8261164c565b80356001600160401b038116811461166357600080fd5b600080604083850312156116ad57600080fd5b6116b68361164c565b91506116c460208401611683565b90509250929050565b6000806000606084860312156116e257600080fd5b6116eb8461164c565b9250602084013591506040840135801515811461170757600080fd5b809150509250925092565b6000806040838503121561172557600080fd5b61172e8361164c565b946020939093013593505050565b60008060006060848603121561175157600080fd5b61175a84611683565b92506117686020850161164c565b9150604084013563ffffffff8116811461170757600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156117aa57600080fd5b82356001600160401b03808211156117c157600080fd5b818501915085601f8301126117d557600080fd5b81356020828211156117e9576117e9611781565b8160051b604051601f19603f8301168101818110868211171561180e5761180e611781565b60405292835281830193508481018201928984111561182c57600080fd5b948201945b838610156118515761184286611683565b85529482019493820193611831565b9650611860905087820161164c565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b828110156118aa57815161ffff168452928401929084019060010161188a565b5050508381038285015284518082528583019183019060005b8181101561163f5783511515835292840192918401916001016118c3565b6000602082840312156118f357600080fd5b610bbc82611683565b60006020828403121561190e57600080fd5b813560ff81168114610bbc57600080fd5b6000806040838503121561193257600080fd5b61193b83611683565b91506116c46020840161164c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561198c5761198c61195f565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff8416808210156119fe576119fe61195f565b90039392505050565b600181815b80851115611a42578160001904821115611a2857611a2861195f565b80851615611a3557918102915b93841c9390800290611a0c565b509250929050565b600082611a5957506001610935565b81611a6657506000610935565b8160018114611a7c5760028114611a8657611aa2565b6001915050610935565b60ff841115611a9757611a9761195f565b50506001821b610935565b5060208310610133831016604e8410600b8410161715611ac5575081810a610935565b611acf8383611a07565b8060001904821115611ae357611ae361195f565b029392505050565b6000610bbc60ff841683611a4a565b6000816000190483118215151615611b1457611b1461195f565b500290565b600060ff821680611b2c57611b2c61195f565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff80831681811415611ba357611ba361195f565b6001019392505050565b60006001600160401b0380831681851681830481118215151615611bd357611bd361195f565b0294935050505056fea2646970667358221220b51df4614da419b42c942ac6778a4f902a0e95f2661cde92ded2a64cd97aec4264736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061023c5760003560e01c80636bb987fe1161013b578063b313bd62116100b8578063d045d5ae1161007c578063d045d5ae1461046f578063d7a8a2b71461049c578063e81ec612146104c4578063ec2165d3146104cc578063f883fcaa1461045657600080fd5b8063b313bd6214610446578063b91268e81461044e578063c28bd11c14610456578063c28cedf31461045e578063c6088d971461046657600080fd5b8063910eb1ce116100ff578063910eb1ce146104105780639d941362146103f7578063a215776714610423578063a5c9cd821461042b578063ad6e33181461043357600080fd5b80636bb987fe146103cd578063731fd3f7146103d657806373d6aafa146103f75780637fb012321461037357806381830593146103ff57600080fd5b80633e6e387c116101c9578063552ba3331161018d578063552ba3331461037b578063566568751461038e5780635b7f415c146103a15780635fbe4d1d146103a9578063609eb1c3146103ba57600080fd5b80633e6e387c1461033c578063406a6f6014610345578063479e92c814610358578063480414df14610360578063504b36621461037357600080fd5b80631df55679116102105780631df55679146102bb57806322a0c348146102d057806330db4fa0146102f1578063362b8b32146103115780633a3a7c531461033457600080fd5b8062113e081461024157806306e38632146102605780630bf433091461027c57806314270b6514610296575b600080fd5b6102496104d4565b6040516102579291906115c8565b60405180910390f35b610269610a8c81565b60405161ffff9091168152602001610257565b61028460da81565b60405160ff9091168152602001610257565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610257565b6102ce6102c9366004611668565b6106a4565b005b6102e36102de36600461169a565b6107d6565b604051908152602001610257565b6102f960c881565b6040516001600160401b039091168152602001610257565b61032461031f3660046116cd565b61093b565b6040519015158152602001610257565b6102e3610bc3565b6102696101f481565b6102ce610353366004611668565b610bdd565b610284601481565b6102ce61036e366004611668565b610cfa565b610284606481565b6102ce610389366004611712565b610e17565b61028461039c366004611668565b610ff7565b610284601281565b6001546001600160a01b03166102a3565b6102ce6103c836600461173c565b61108b565b6102f961996881565b6103e96103e4366004611797565b61118f565b60405161025792919061186d565b610269600a81565b6005546001600160a01b03166102a3565b6102ce61041e3660046118e1565b61130f565b61028460ff81565b6102e36113af565b6102ce6104413660046118fc565b6113bb565b6102f9600281565b6102e3611480565b610284600281565b610324600081565b6102696103e881565b61026961047d3660046118e1565b6001600160401b031660009081526007602052604090205461ffff1690565b6104af6104aa36600461191f565b6114a2565b60405163ffffffff9091168152602001610257565b6102e36114d9565b6102f96114f1565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561053f5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104fe565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b0381111561057857610578611781565b6040519080825280602002602001820160405280156105a1578160200160208202803683370190505b5093508060ff166001600160401b038111156105bf576105bf611781565b6040519080825280602002602001820160405280156105e8578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561069d57825160ff82166005811061061657610616611949565b602002015160000151858260ff168151811061063457610634611949565b6020908102919091010152825160ff82166005811061065557610655611949565b602002015160200151848260ff168151811061067357610673611949565b6001600160401b03909216602092830291909101909101528061069581611975565b9150506105ee565b5050509091565b6002546001600160a01b031633146107295760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107a85760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610720565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108475760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610806565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108e457815160ff82166005811061088b5761088b611949565b6020020151602001516001600160401b0316846001600160401b0316106108d257815160ff8216600581106108c2576108c2611949565b6020020151519250610935915050565b806108dc81611975565b915050610863565b5081156109335760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e63650000006044820152606401610720565b505b92915050565b6001546000906001600160a01b031633146109685760405162461bcd60e51b815260040161072090611995565b6001600160a01b0384166000908152600660205260409020610989816114fe565b610995600360126119e4565b6109a090600a611aeb565b8410156109c657600a8101546000945060ff166109c1576000915050610bbc565b610a00565b6109d26012600a611aeb565b6109de906103e8611afa565b841115610a00576109f16012600a611aeb565b6109fd906103e8611afa565b93505b600a810154439060ff1615801590610a185750815485145b15610a265760019250610bb9565b600a820154600560ff9091161080610a3b5750835b15610bb457600a820154600090600560ff90911610610a6557610a60600160056119e4565b610a6e565b600a83015460ff165b9050805b60ff811615610afa5783610a876001836119e4565b60ff1660058110610a9a57610a9a611949565b600202018460ff831660058110610ab357610ab3611949565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610af281611b19565b915050610a72565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610b5d57600a8301805460ff16906000610b4383611975565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610bb9565b600092505b50505b9392505050565b610bcf600360126119e4565b610bda90600a611aeb565b81565b6000546001600160a01b03163314610c535760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b6064820152608401610720565b6001546001600160a01b031615610ccc5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610720565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d705760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b6064820152608401610720565b6005546001600160a01b031615610de95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610720565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610e415760405162461bcd60e51b815260040161072090611995565b6001600160a01b0382166000908152600660205260409020610e62816114fe565b610e6e600360126119e4565b610e7990600a611aeb565b821015610e9a57600a8101546000925060ff16610e9557505050565b610ed4565b610ea66012600a611aeb565b610eb2906103e8611afa565b821115610ed457610ec56012600a611aeb565b610ed1906103e8611afa565b91505b600a810154439060ff16610f8d5782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610f1883611975565b91906101000a81548160ff021916908360ff16021790555050836001600160a01b03167f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a8285604051610f809291906001600160401b03929092168252602082015260400190565b60405180910390a2610ff0565b8154831015610ff057508181556001810154604080516001600160401b0390921680835260208301859052916001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a25b50505b5050565b6001600160a01b03811660009081526009602052604081205460ff16823b151581156110345760ff8281161461102d5781611043565b6000611043565b80611040576016611043565b60005b925060ff83161580611068575060ff8316600a118015906110685750605a60ff841611155b6110845760405162461bcd60e51b815260040161072090611b36565b5050919050565b6003546001600160a01b031633146111015760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610720565b6001600160401b0383166000908152600760205260408120805461ffff169161112983611b8b565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b038111156111b1576111b1611781565b6040519080825280602002602001820160405280156111da578160200160208202803683370190505b5092508060ff166001600160401b038111156111f8576111f8611781565b604051908082528060200260200182016040528015611221578160200160208202803683370190505b50915060005b8160ff168160ff16101561130657611274868260ff168151811061124d5761124d611949565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff168151811061128957611289611949565b602002602001019061ffff16908161ffff16815250506112c5868260ff16815181106112b7576112b7611949565b6020026020010151866114a2565b63ffffffff1660001415838260ff16815181106112e4576112e4611949565b91151560209283029190910190910152806112fe81611975565b915050611227565b50509250929050565b6005546001600160a01b031633146113825760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b6064820152608401610720565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610bda6012600a611aeb565b3360ff821615806113df575060ff8216600a118015906113df5750605a60ff831611155b6113fb5760405162461bcd60e51b815260040161072090611b36565b600060ff83161561140c578261140f565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061147390869060ff91909116815260200190565b60405180910390a2505050565b61148c600360126119e4565b61149790600a611aeb565b610bda90600a611afa565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b6114e56012600a611aeb565b610bda906103e8611afa565b610bda6199686007611bad565b600a810154600160ff90911611156115c557600a8101546000906115279060019060ff166119e4565b90505b60ff811615610ff3576000826115416001846119e4565b60ff166005811061155457611554611949565b600554600160029290920292909201908101549092506001600160401b03600160a01b90920482169116116115b257600a8301805460ff1690600061159883611b19565b91906101000a81548160ff021916908360ff160217905550505b50806115bd81611b19565b91505061152a565b50565b604080825283519082018190526000906020906060840190828701845b82811015611601578151845292840192908401906001016115e5565b5050508381038285015284518082528583019183019060005b8181101561163f5783516001600160401b03168352928401929184019160010161161a565b5090979650505050505050565b80356001600160a01b038116811461166357600080fd5b919050565b60006020828403121561167a57600080fd5b610bbc8261164c565b80356001600160401b038116811461166357600080fd5b600080604083850312156116ad57600080fd5b6116b68361164c565b91506116c460208401611683565b90509250929050565b6000806000606084860312156116e257600080fd5b6116eb8461164c565b9250602084013591506040840135801515811461170757600080fd5b809150509250925092565b6000806040838503121561172557600080fd5b61172e8361164c565b946020939093013593505050565b60008060006060848603121561175157600080fd5b61175a84611683565b92506117686020850161164c565b9150604084013563ffffffff8116811461170757600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156117aa57600080fd5b82356001600160401b03808211156117c157600080fd5b818501915085601f8301126117d557600080fd5b81356020828211156117e9576117e9611781565b8160051b604051601f19603f8301168101818110868211171561180e5761180e611781565b60405292835281830193508481018201928984111561182c57600080fd5b948201945b838610156118515761184286611683565b85529482019493820193611831565b9650611860905087820161164c565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b828110156118aa57815161ffff168452928401929084019060010161188a565b5050508381038285015284518082528583019183019060005b8181101561163f5783511515835292840192918401916001016118c3565b6000602082840312156118f357600080fd5b610bbc82611683565b60006020828403121561190e57600080fd5b813560ff81168114610bbc57600080fd5b6000806040838503121561193257600080fd5b61193b83611683565b91506116c46020840161164c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561198c5761198c61195f565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff8416808210156119fe576119fe61195f565b90039392505050565b600181815b80851115611a42578160001904821115611a2857611a2861195f565b80851615611a3557918102915b93841c9390800290611a0c565b509250929050565b600082611a5957506001610935565b81611a6657506000610935565b8160018114611a7c5760028114611a8657611aa2565b6001915050610935565b60ff841115611a9757611a9761195f565b50506001821b610935565b5060208310610133831016604e8410600b8410161715611ac5575081810a610935565b611acf8383611a07565b8060001904821115611ae357611ae361195f565b029392505050565b6000610bbc60ff841683611a4a565b6000816000190483118215151615611b1457611b1461195f565b500290565b600060ff821680611b2c57611b2c61195f565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff80831681811415611ba357611ba361195f565b6001019392505050565b60006001600160401b0380831681851681830481118215151615611bd357611bd361195f565b0294935050505056fea2646970667358221220b51df4614da419b42c942ac6778a4f902a0e95f2661cde92ded2a64cd97aec4264736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6672,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6674,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6749,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"2","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_trusteeAddr","offset":0,"slot":"3","type":"t_address"},{"astId":6554,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"4","type":"t_address"},{"astId":6556,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_adminAddr","offset":0,"slot":"5","type":"t_address"},{"astId":4792,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_firstBlockNumber","offset":20,"slot":"5","type":"t_uint64"},{"astId":4797,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_balanceRecords","offset":0,"slot":"6","type":"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)"},{"astId":4801,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimsCnt","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_uint16)"},{"astId":4807,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimed","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_mapping(t_address,t_uint32))"},{"astId":4811,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_commisions","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint8)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage":{"base":"t_struct(AddrBalanceRecord)4782_storage","encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord[5]","numberOfBytes":"320"},"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaRecords.AddrBalanceRecords)","numberOfBytes":"32","value":"t_struct(AddrBalanceRecords)4790_storage"},"t_mapping(t_address,t_uint32)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint32)","numberOfBytes":"32","value":"t_uint32"},"t_mapping(t_address,t_uint8)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint8)","numberOfBytes":"32","value":"t_uint8"},"t_mapping(t_uint64,t_mapping(t_address,t_uint32))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(address => uint32))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint32)"},"t_mapping(t_uint64,t_uint16)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_struct(AddrBalanceRecord)4782_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord","members":[{"astId":4779,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"balance","offset":0,"slot":"0","type":"t_uint256"},{"astId":4781,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"}],"numberOfBytes":"64"},"t_struct(AddrBalanceRecords)4790_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecords","members":[{"astId":4787,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"records","offset":0,"slot":"0","type":"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage"},{"astId":4789,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"recordsCnt","offset":0,"slot":"10","type":"t_uint8"}],"numberOfBytes":"352"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},266:function(e){e.exports=JSON.parse('{"address":"0xF119CB8Ae4f473e8DcC6B9f6f338803fC000ACB4","abi":[{"inputs":[{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"challenge","type":"uint256"},{"indexed":false,"internalType":"bool","name":"premium","type":"bool"}],"name":"AddChallenge","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bool","name":"premium","type":"bool"}],"name":"_cleanupChallenge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"addChallenges","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChallengesAllowance","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"readChallenges","outputs":[{"internalType":"uint8","name":"totalCnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"uint16[]","name":"rewardUnits","type":"uint16[]"},{"internalType":"uint256[]","name":"challengeHashes","type":"uint256[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"retrieveChallenge","outputs":[{"components":[{"internalType":"uint256","name":"challengeHash","type":"uint256"},{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint16","name":"rewardUnits","type":"uint16"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint8","name":"prev","type":"uint8"},{"internalType":"uint8","name":"next","type":"uint8"}],"internalType":"struct ChallengeRecords.Challenge","name":"ch","type":"tuple"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"generalDifficulty","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x41ef9c0268f215e4e9e9ae30ab1260c3af65db6987e4007e866975af7d55fe5e","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xF119CB8Ae4f473e8DcC6B9f6f338803fC000ACB4","transactionIndex":18,"gasUsed":"7501564","logsBloom":"0xblockHash":"0x489dc9120336bfc4f03cea063ff80ae65aa6ad9a36b07d075bb62a35d1c70b6a","transactionHash":"0x41ef9c0268f215e4e9e9ae30ab1260c3af65db6987e4007e866975af7d55fe5e","logs":[{"transactionIndex":18,"blockNumber":24636880,"transactionHash":"0x41ef9c0268f215e4e9e9ae30ab1260c3af65db6987e4007e866975af7d55fe5e","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000742d13f0b2a19c823bdd362b16305e4704b97a38"],"data":"0x000000000000000000000000000000000000000000000000031f86fb252524d00000000000000000000000000000000000000000000000207b356990d40b6d73000000000000000000000000000000000000000000000e51d4c85be27b8883df0000000000000000000000000000000000000000000000207815e295aee648a3000000000000000000000000000000000000000000000e51d7e7e2dda0ada8af","logIndex":77,"blockHash":"0x489dc9120336bfc4f03cea063ff80ae65aa6ad9a36b07d075bb62a35d1c70b6a"}],"blockNumber":24636880,"cumulativeGasUsed":"11092527","status":1,"byzantium":true},"args":["0x5A50112324ef0FBEEb001c9d3BE4a7A6D018BE91"],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"challenge\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"AddChallenge\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_cleanupChallenge\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"addChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChallengesAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"readChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"totalCnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"challengeHashes\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"retrieveChallenge\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"challengeHash\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"index\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"prev\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"next\\",\\"type\\":\\"uint8\\"}],\\"internalType\\":\\"struct ChallengeRecords.Challenge\\",\\"name\\":\\"ch\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaAdmin.sol\\":\\"LuminaAdmin\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\n\\\\ncontract LuminaAdmin is ILuminaAdmin, Parameters, ChallengeRecords, OnlyTrustee {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    // Challenge Records\\\\n    ChallengeSet private _basicChallenges;\\\\n    ChallengeSet private _premiumChallenges;\\\\n\\\\n    // Challenge Records Creation Management\\\\n    uint64 private _createdBasicChallenges;\\\\n    uint64 private _createdPremiumChallenges;\\\\n\\\\n    uint64 private _startingBlockNumber; // First block of the Newton Era\\\\n    uint64 private _nextChallengeBlockNumber; // Block number assigned for next challenge\\\\n    uint64 private _nextDonorBlockNumber; // Next donor block number providing blockHash to the next challenge\\\\n\\\\n    uint64 private _blocksPerChallenge; // Adjusted current blocks per challenge parameter\\\\n    uint64 private _nextBlocksPerChallengeInc; // When is next block-per-challegne increase due\\\\n    uint16 private _rewardUnits; // Current number of reward units\\\\n    uint64 private _nextRewardUnitsInc; // Next increase of reward units until 1 full token\\\\n\\\\n    event AddChallenge(uint64 indexed blockNumber, uint256 challenge, bool premium);\\\\n\\\\n    constructor(address recordsAddr_) {\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n\\\\n        _challengeSetInit(_basicChallenges);\\\\n        _challengeSetInit(_premiumChallenges);\\\\n\\\\n        _createdBasicChallenges = 0;\\\\n        _createdPremiumChallenges = 0;\\\\n\\\\n        _startingBlockNumber = uint64(block.number) > (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) ? uint64(block.number) - (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) : 0;\\\\n        _nextChallengeBlockNumber = _startingBlockNumber;\\\\n        _nextDonorBlockNumber = 0;\\\\n        _blocksPerChallenge = BLOCKS_PER_CHALLENGE;\\\\n        _nextBlocksPerChallengeInc = 0;\\\\n        _rewardUnits = REWARD_UNITS_START;\\\\n        _nextRewardUnitsInc = REWARD_INC_INTERVAL;\\\\n    }\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (totalCnt, indexes, blockNumbers, rewardUnits, challengeHashes, nexts) = _challengesGet(chs, limit);\\\\n        (claimsCnt, claimed) = records.getClaims(blockNumbers, msg.sender);\\\\n    }\\\\n\\\\n    // Calculates a close estimate of how many new challegnes\\\\n    // are allowed to be added to the system\\\\n    function getChallengesAllowance() external view returns (uint8) {\\\\n        if(_basicChallenges.cnt >= MAX_CHALLENGE_CNT || _premiumChallenges.cnt >= MAX_CHALLENGE_CNT) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        if(blockNumber <= _nextChallengeBlockNumber) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 cnt = (blockNumber + _blocksPerChallenge - 1 - _nextChallengeBlockNumber) / _blocksPerChallenge;\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        uint64 nextDonorBlockNumber = _nextDonorBlockNumber;\\\\n        if(nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n\\\\n        require(nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n        uint64 donorsCnt = blockNumber - nextDonorBlockNumber;\\\\n\\\\n        if(donorsCnt < cnt) {\\\\n            cnt = donorsCnt;\\\\n        }\\\\n\\\\n        require(cnt <= MAX_DONOR_BLOCKS, \\\\\\"Failed: cnt <= MAX_DONOR_BLOCKS\\\\\\");\\\\n        return uint8(cnt);\\\\n    }\\\\n\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (Challenge memory ch, bool premium, uint8 generalDifficulty) {\\\\n        premium = false;\\\\n        uint8 chi;\\\\n        (chi, generalDifficulty) = _challengeFind(_basicChallenges, blockNumber);\\\\n        if(chi == CHALLENGE_NULL) {\\\\n            (chi, generalDifficulty) = _challengeFind(_premiumChallenges, blockNumber);\\\\n            premium = true;\\\\n        }\\\\n        require(chi != CHALLENGE_NULL, \\\\\\"Challenge with this blockNumber doesn\'t exist or has been claimed already\\\\\\");\\\\n        ch = _challengeGet(premium ? _premiumChallenges : _basicChallenges, chi);\\\\n\\\\n        require(ch.blockNumber == blockNumber, \\\\\\"Corrupt blockNumber in challenge\\\\\\");\\\\n    }\\\\n\\\\n    function addChallenges(uint8 limit) public returns (uint8) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        if(_nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            _nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n        require(_nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: _nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n\\\\n        // Create new challenges\\\\n        uint8 i = 0;\\\\n        while(i < limit\\\\n            && _nextDonorBlockNumber < blockNumber\\\\n            && _nextChallengeBlockNumber < blockNumber\\\\n            && _basicChallenges.cnt < MAX_CHALLENGE_CNT\\\\n            && _premiumChallenges.cnt < MAX_CHALLENGE_CNT\\\\n        ) {\\\\n            uint64 bn = _nextDonorBlockNumber;\\\\n\\\\n            // Calculate a challenge hash\\\\n            bytes32 bh = blockhash(bn);\\\\n            require(uint256(bh) != 0, \\\\\\"Missing blockhash number\\\\\\");\\\\n\\\\n            bytes memory data = abi.encodePacked(uint256(bh), uint256(uint160(msg.sender)), uint256(uint160(address(this))), uint256(blockNumber) ^ uint256(block.chainid));\\\\n            require(data.length == 128, \\\\\\"Invalid challenge data\\\\\\");\\\\n            uint256 challengeHash = uint256(keccak256(data));\\\\n\\\\n            if(uint8(challengeHash >> 252) == LUCKY_NUMBER) {\\\\n                emit AddChallenge(blockNumber, challengeHash, true);\\\\n                _challengeInsertTail(_premiumChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdPremiumChallenges++;\\\\n            } else {\\\\n                emit AddChallenge(blockNumber, challengeHash, false);\\\\n                _challengeInsertTail(_basicChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdBasicChallenges++;\\\\n            }\\\\n\\\\n            _nextDonorBlockNumber++;\\\\n            _nextChallengeBlockNumber += _blocksPerChallenge;\\\\n\\\\n            if(_rewardUnits < REWARD_UNITS_STANDARD) {\\\\n                // Newton Epoch - Managing the ramp-up\\\\n                if(_createdBasicChallenges >= _nextRewardUnitsInc) {\\\\n                    // Increase the reward\\\\n                    _rewardUnits += REWARD_UNITS_INC;\\\\n                    _nextRewardUnitsInc += REWARD_INC_INTERVAL;\\\\n                    if(_rewardUnits >= REWARD_UNITS_STANDARD) {\\\\n                        // Switching to Einstein Epoch\\\\n                        _nextRewardUnitsInc = 0;\\\\n                        _nextBlocksPerChallengeInc = blockNumber + BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n                    }\\\\n                }\\\\n            } else if(blockNumber >= _nextBlocksPerChallengeInc) {\\\\n                // Einstein Epoch - Managing the cooldown\\\\n                _blocksPerChallenge += BLOCKS_PER_CHALLENGE_INC;\\\\n                _nextBlocksPerChallengeInc += BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n            }\\\\n\\\\n            i++;\\\\n        }\\\\n\\\\n        return i;\\\\n    }\\\\n\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external onlyTrustee {\\\\n        // All rewards were claimed, remove challenge from the set\\\\n        ChallengeRecords.ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (uint8 index, uint8 generalDifficulty2) = _challengeFind(chs, blockNumber);\\\\n        require(index != CHALLENGE_NULL, \\\\\\"Corrupt challenge records\\\\\\");\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty2 && generalDifficulty2 <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        _challengeRemove(chs, index);\\\\n\\\\n        uint64 bn1 = _challengeGetFirstBlock(_basicChallenges);\\\\n        uint64 bn2 = _challengeGetFirstBlock(_premiumChallenges);\\\\n        records._updateFirstBlockNumber(bn1 < bn2 ? bn1 : bn2);\\\\n\\\\n        // If you are the lucky miner, why not pay for a few more challenge?\\\\n        addChallenges(10);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfc16e8dbb6073dcf275bdfef06d4dacefafa13756c62b06a9b33978747442da0\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = false;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc8321ceb1a53930afe0efdbc6cc0080b00ced0e54ccf632e07cd2de32f41a954\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162002c0038038062002c00833981016040819052620000349162000276565b600080546001600160a01b031990811633179091556002805482166001600160a01b0384169081179091556003805490921617905562000075600462000176565b6200008160cd62000176565b61019680546001600160801b0319169055620000a0606460c8620002be565b6001600160401b0316436001600160401b031611620000c1576000620000db565b620000cf606460c8620002be565b620000db9043620002f0565b61019680546001600160801b0381166001600160c01b036001600160401b03948516600160801b90810291821692909217600160801b600160c01b03199093161704909216600160c01b02919091179055506101978054780a0000000000000000000000000000006400000000000000006001600160d01b031990911617905561019880546001600160401b031916610a8c1790556200037c565b60005b606460ff821610156200025f5760008260ff831660648110620001a057620001a06200031b565b6000600291909102919091019081556001808201805461ffff60581b1960ff87166a010000000000000000000002166001600160681b0319909116176cff0000000000000000000000001790559091506064906200020090849062000331565b60ff1610620002115760ff6200021e565b6200021e82600162000331565b6001909101805460ff929092166d01000000000000000000000000000260ff60681b1990921691909117905580620002568162000359565b91505062000179565b5060c801805463ffffffff191663ffff0000179055565b6000602082840312156200028957600080fd5b81516001600160a01b0381168114620002a157600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0382811684821681151582840482111615620002e757620002e7620002a8565b02949350505050565b60006001600160401b0383811690831681811015620003135762000313620002a8565b039392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115620003515762000351620002a8565b019392505050565b600060ff821660ff811415620003735762000373620002a8565b60010192915050565b612874806200038c6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806373d6aafa11610104578063c28bd11c116100a2578063ec2165d311610071578063ec2165d314610362578063f5d4d8a11461036a578063f7f595fb1461038c578063f883fcaa1461033157600080fd5b8063c28bd11c14610331578063c28cedf314610339578063c6088d9714610351578063e81ec6121461035a57600080fd5b8063a2157767116100de578063a215776714610311578063a5c9cd8214610319578063b313bd6214610321578063b91268e81461032957600080fd5b806373d6aafa146103095780637fb01232146102c95780639d9413621461030957600080fd5b8063345af9771161017c578063504b36621161014b578063504b3662146102c957806357dce6ff146102d15780635b7f415c146102f85780636bb987fe1461030057600080fd5b8063345af9771461028f5780633a3a7c53146102a25780633e6e387c146102b8578063479e92c8146102c157600080fd5b806314270b65116101b857806314270b65146102225780631df55679146102475780631e7bfd601461025c57806330db4fa01461026f57600080fd5b806306e38632146101df5780630bf4330914610200578063132e12c41461021a575b600080fd5b6101e8610a8c81565b60405161ffff90911681526020015b60405180910390f35b61020860da81565b60405160ff90911681526020016101f7565b61020861039f565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101f7565b61025a610255366004611ff3565b610596565b005b60025461022f906001600160a01b031681565b61027760c881565b6040516001600160401b0390911681526020016101f7565b61020861029d366004612032565b6106c3565b6102aa610d01565b6040519081526020016101f7565b6101e86101f481565b610208601481565b610208606481565b6102e46102df366004612065565b610d1b565b6040516101f7989796959493929190612177565b610208601281565b61027761996881565b6101e8600a81565b61020860ff81565b6102aa610dde565b610277600281565b6102aa610dea565b610208600281565b610341600081565b60405190151581526020016101f7565b6101e86103e881565b6102aa610e0c565b610277610e24565b61037d610378366004612256565b610e31565b6040516101f793929190612271565b61025a61039a3660046122f1565b61100e565b60cc54600090606460ff9091161015806103c2575061019554606460ff90911610155b156103cd5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103f557600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b9004166001610427838661233e565b6104319190612369565b61043b9190612369565b6104459190612391565b9050600060c86001600160401b0384161161046157600061046c565b61046c60c884612369565b610197549091506001600160401b0390811690821681101561048b5750805b836001600160401b0316816001600160401b031611156105065760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006105128286612369565b9050836001600160401b0316816001600160401b03161015610532578093505b60c86001600160401b038516111561058c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104fd565b5091949350505050565b6000546001600160a01b031633146106165760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104fd565b6001546001600160a01b0316156106955760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104fd565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106df5760006106ea565b6106ea60c883612369565b610197549091506001600160401b038083169116101561072257610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107965760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104fd565b60005b8460ff168160ff161080156107bc5750610197546001600160401b038085169116105b80156107dd5750610196546001600160401b03808516600160c01b90920416105b80156107f0575060cc54606460ff909116105b8015610804575061019554606460ff909116105b15610cf957610197546001600160401b03168040806108655760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104fd565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108f05760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104fd565b8051602082012060fc81901c600214156109b15760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261096660cd858361019760189054906101000a900461ffff16611220565b6101968054600160401b90046001600160401b0316906008610987836123c5565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a53565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a2610a136004858361019760189054906101000a900461ffff16611220565b61019680546001600160401b0316906000610a2d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a6d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610acd919061233e565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610c245761019854610196546001600160401b03918216911610610c1f57600a61019760188282829054906101000a900461ffff16610b4491906123ec565b92506101000a81548161ffff021916908361ffff1602179055506000610b6c57610a8c610b6f565b60055b610198805461ffff9290921691600090610b939084906001600160401b031661233e565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610c1f57610198805467ffffffffffffffff19169055610bed6199686007612409565b610bf7908861233e565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610ce3565b610197546001600160401b03600160801b909104811690881610610ce357600261019760088282829054906101000a90046001600160401b0316610c68919061233e565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506199686007610c9b9190612409565b6101978054601090610cbe908490600160801b90046001600160401b031661233e565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ced81612438565b95505050505050610799565b949350505050565b610d0d60036012612458565b610d1890600a612557565b81565b6000606080606080606080606060008a610d36576004610d39565b60cd5b9050610d45818b61149a565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d85908a903390600401612566565b600060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dca919081019061266d565b999c989b5096995094979396929594505050565b610d186012600a612557565b610df660036012612458565b610e0190600a612557565b610d1890600a612739565b610e186012600a612557565b610d18906103e8612739565b610d186199686007612409565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610e77600486611871565b9250905060ff8082161415610e9a57610e9160cd86611871565b60019450925090505b60ff8181161415610f255760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104fd565b610f3d83610f34576004610f37565b60cd5b82611aef565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c0840152919550908616146110065760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104fd565b509193909250565b6001546001600160a01b031633146110845760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104fd565b600081611092576004611095565b60cd5b90506000806110a48386611871565b909250905060ff80831614156110fc5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104fd565b60ff8116601411801590611114575060da60ff821611155b6111605760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fd565b61116a8383611c08565b60006111766004611ed8565b9050600061118460cd611ed8565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111b157826111b3565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b50505050611216600a6106c3565b5050505050505050565b60c8840154606460ff909116106112895760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104fd565b60c8840154610100900460ff16606481106112b65760405162461bcd60e51b81526004016104fd90612758565b60006112c28683611aef565b6001810154909150600160581b900460ff161561133e5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104fd565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b191617909355549190910481161461141a5760006113ff878860c80160039054906101000a900460ff16611aef565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156114645760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff1690600061147983612438565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114d15760c889015460ff166114d3565b875b60c88a015460ff908116985090915081166001600160401b038111156114fb576114fb612590565b604051908082528060200260200182016040528015611524578160200160208202803683370190505b5095508060ff166001600160401b0381111561154257611542612590565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b5094508060ff166001600160401b0381111561158957611589612590565b6040519080825280602002602001820160405280156115b2578160200160208202803683370190505b5092508060ff166001600160401b038111156115d0576115d0612590565b6040519080825280602002602001820160405280156115f9578160200160208202803683370190505b5091508060ff166001600160401b0381111561161757611617612590565b604051908082528060200260200182016040528015611640578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117e557600061166f8c84611aef565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b9185169081106116fd576116fd61279b565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061172b5761172b61279b565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff16815181106117655761176561279b565b602002602001019061ffff16908161ffff16815250508060000151868360ff16815181106117955761179561279b565b6020026020010181815250508060c00151858360ff16815181106117bb576117bb61279b565b60ff9092166020928302919091019091015260c001519150806117dd81612438565b915050611655565b5060c88a015460ff908116908a161080611801575060ff818116145b6118655760405162461bcd60e51b815260206004820152602f60248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765734765742860448201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b60648201526084016104fd565b50509295509295509295565b60c8820154600090819060ff1660648111156119065760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104fd565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611ac35760006119368786611aef565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611aab57806060015160ff168560ff16146119e15760405162461bcd60e51b81526004016104fd906127b1565b60016119ed8385612458565b6119f79190612458565b611a02906002612800565b611a0d9060da612458565b935060ff8416601411801590611a27575060da60ff851611155b611aa35760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104fd565b505050611ae8565b60c00151935080611abb81612438565b91505061191c565b5060ff83811614611ae65760405162461bcd60e51b81526004016104fd906127b1565b505b9250929050565b6000606460ff831610611b6a5760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104fd565b60008360ff841660648110611b8157611b8161279b565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611bff5760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104fd565b90505b92915050565b60c882015460ff16611c6d5760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104fd565b6000611c798383611aef565b6001810154909150600160581b900460ff16611ce75760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104fd565b6001810154600160601b900460ff90811614611d42576000611d1a8483600101600c9054906101000a900460ff16611aef565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d9d576000611d758483600101600d9054906101000a900460ff16611aef565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611ddd57600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611e2057600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611e3e575060ff818116145b611e5a5760405162461bcd60e51b81526004016104fd90612758565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611eb983612821565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611efb57439150611fed565b6000611f078483611aef565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611fe65760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104fd565b6020015191505b50919050565b60006020828403121561200557600080fd5b81356001600160a01b0381168114611bff57600080fd5b803560ff8116811461202d57600080fd5b919050565b60006020828403121561204457600080fd5b61204d8261201c565b9392505050565b801515811461206257600080fd5b50565b6000806040838503121561207857600080fd5b823561208381612054565b91506120916020840161201c565b90509250929050565b600081518084526020808501945080840160005b838110156120cd57815160ff16875295820195908201906001016120ae565b509495945050505050565b600081518084526020808501945080840160005b838110156120cd5781516001600160401b0316875295820195908201906001016120ec565b600081518084526020808501945080840160005b838110156120cd57815161ffff1687529582019590820190600101612125565b600081518084526020808501945080840160005b838110156120cd578151151587529582019590820190600101612159565b600061010060ff8b168352602081818501526121958285018c61209a565b915083820360408501526121a9828b6120d8565b915083820360608501526121bd828a612111565b84810360808601528851808252828a0193509082019060005b818110156121f2578451835293830193918301916001016121d6565b505084810360a0860152612206818961209a565b9250505082810360c084015261221c8186612111565b905082810360e08401526122308185612145565b9b9a5050505050505050505050565b80356001600160401b038116811461202d57600080fd5b60006020828403121561226857600080fd5b61204d8261223f565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c08501516122d960c084018260ff169052565b5083151560e083015260ff8316610100830152610cf9565b6000806040838503121561230457600080fd5b61230d8361223f565b9150602083013561231d81612054565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851680830382111561236057612360612328565b01949350505050565b60006001600160401b038381169083168181101561238957612389612328565b039392505050565b60006001600160401b03808416806123b957634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123e2576123e2612328565b6001019392505050565b600061ffff80831681851680830382111561236057612360612328565b60006001600160401b038083168185168183048111821515161561242f5761242f612328565b02949350505050565b600060ff821660ff81141561244f5761244f612328565b60010192915050565b600060ff821660ff84168082101561247257612472612328565b90039392505050565b600181815b80851115611ae657816000190482111561249c5761249c612328565b808516156124a957918102915b93841c9390800290612480565b6000826124c557506001611c02565b816124d257506000611c02565b81600181146124e857600281146124f25761250e565b6001915050611c02565b60ff84111561250357612503612328565b50506001821b611c02565b5060208310610133831016604e8410600b8410161715612531575081810a611c02565b61253b838361247b565b806000190482111561254f5761254f612328565b029392505050565b600061204d60ff8416836124b6565b60408152600061257960408301856120d8565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125ce576125ce612590565b604052919050565b60006001600160401b038211156125ef576125ef612590565b5060051b60200190565b600082601f83011261260a57600080fd5b8151602061261f61261a836125d6565b6125a6565b82815260059290921b8401810191818101908684111561263e57600080fd5b8286015b8481101561266257805161265581612054565b8352918301918301612642565b509695505050505050565b6000806040838503121561268057600080fd5b82516001600160401b038082111561269757600080fd5b818501915085601f8301126126ab57600080fd5b815160206126bb61261a836125d6565b82815260059290921b840181019181810190898411156126da57600080fd5b948201945b8386101561270957855161ffff811681146126fa5760008081fd5b825294820194908201906126df565b9188015191965090935050508082111561272257600080fd5b5061272f858286016125f9565b9150509250929050565b600081600019048311821515161561275357612753612328565b500290565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff048111821515161561254f5761254f612328565b600060ff82168061283457612834612328565b600019019291505056fea264697066735822122043d692b859b9b8426e26e6f7908c6924f34fdef39a1ce94c3aebf1a3166d20da64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806373d6aafa11610104578063c28bd11c116100a2578063ec2165d311610071578063ec2165d314610362578063f5d4d8a11461036a578063f7f595fb1461038c578063f883fcaa1461033157600080fd5b8063c28bd11c14610331578063c28cedf314610339578063c6088d9714610351578063e81ec6121461035a57600080fd5b8063a2157767116100de578063a215776714610311578063a5c9cd8214610319578063b313bd6214610321578063b91268e81461032957600080fd5b806373d6aafa146103095780637fb01232146102c95780639d9413621461030957600080fd5b8063345af9771161017c578063504b36621161014b578063504b3662146102c957806357dce6ff146102d15780635b7f415c146102f85780636bb987fe1461030057600080fd5b8063345af9771461028f5780633a3a7c53146102a25780633e6e387c146102b8578063479e92c8146102c157600080fd5b806314270b65116101b857806314270b65146102225780631df55679146102475780631e7bfd601461025c57806330db4fa01461026f57600080fd5b806306e38632146101df5780630bf4330914610200578063132e12c41461021a575b600080fd5b6101e8610a8c81565b60405161ffff90911681526020015b60405180910390f35b61020860da81565b60405160ff90911681526020016101f7565b61020861039f565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101f7565b61025a610255366004611ff3565b610596565b005b60025461022f906001600160a01b031681565b61027760c881565b6040516001600160401b0390911681526020016101f7565b61020861029d366004612032565b6106c3565b6102aa610d01565b6040519081526020016101f7565b6101e86101f481565b610208601481565b610208606481565b6102e46102df366004612065565b610d1b565b6040516101f7989796959493929190612177565b610208601281565b61027761996881565b6101e8600a81565b61020860ff81565b6102aa610dde565b610277600281565b6102aa610dea565b610208600281565b610341600081565b60405190151581526020016101f7565b6101e86103e881565b6102aa610e0c565b610277610e24565b61037d610378366004612256565b610e31565b6040516101f793929190612271565b61025a61039a3660046122f1565b61100e565b60cc54600090606460ff9091161015806103c2575061019554606460ff90911610155b156103cd5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103f557600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b9004166001610427838661233e565b6104319190612369565b61043b9190612369565b6104459190612391565b9050600060c86001600160401b0384161161046157600061046c565b61046c60c884612369565b610197549091506001600160401b0390811690821681101561048b5750805b836001600160401b0316816001600160401b031611156105065760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006105128286612369565b9050836001600160401b0316816001600160401b03161015610532578093505b60c86001600160401b038516111561058c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104fd565b5091949350505050565b6000546001600160a01b031633146106165760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104fd565b6001546001600160a01b0316156106955760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104fd565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106df5760006106ea565b6106ea60c883612369565b610197549091506001600160401b038083169116101561072257610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107965760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104fd565b60005b8460ff168160ff161080156107bc5750610197546001600160401b038085169116105b80156107dd5750610196546001600160401b03808516600160c01b90920416105b80156107f0575060cc54606460ff909116105b8015610804575061019554606460ff909116105b15610cf957610197546001600160401b03168040806108655760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104fd565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108f05760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104fd565b8051602082012060fc81901c600214156109b15760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261096660cd858361019760189054906101000a900461ffff16611220565b6101968054600160401b90046001600160401b0316906008610987836123c5565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a53565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a2610a136004858361019760189054906101000a900461ffff16611220565b61019680546001600160401b0316906000610a2d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a6d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610acd919061233e565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610c245761019854610196546001600160401b03918216911610610c1f57600a61019760188282829054906101000a900461ffff16610b4491906123ec565b92506101000a81548161ffff021916908361ffff1602179055506000610b6c57610a8c610b6f565b60055b610198805461ffff9290921691600090610b939084906001600160401b031661233e565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610c1f57610198805467ffffffffffffffff19169055610bed6199686007612409565b610bf7908861233e565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610ce3565b610197546001600160401b03600160801b909104811690881610610ce357600261019760088282829054906101000a90046001600160401b0316610c68919061233e565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506199686007610c9b9190612409565b6101978054601090610cbe908490600160801b90046001600160401b031661233e565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ced81612438565b95505050505050610799565b949350505050565b610d0d60036012612458565b610d1890600a612557565b81565b6000606080606080606080606060008a610d36576004610d39565b60cd5b9050610d45818b61149a565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d85908a903390600401612566565b600060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dca919081019061266d565b999c989b5096995094979396929594505050565b610d186012600a612557565b610df660036012612458565b610e0190600a612557565b610d1890600a612739565b610e186012600a612557565b610d18906103e8612739565b610d186199686007612409565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610e77600486611871565b9250905060ff8082161415610e9a57610e9160cd86611871565b60019450925090505b60ff8181161415610f255760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104fd565b610f3d83610f34576004610f37565b60cd5b82611aef565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c0840152919550908616146110065760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104fd565b509193909250565b6001546001600160a01b031633146110845760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104fd565b600081611092576004611095565b60cd5b90506000806110a48386611871565b909250905060ff80831614156110fc5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104fd565b60ff8116601411801590611114575060da60ff821611155b6111605760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fd565b61116a8383611c08565b60006111766004611ed8565b9050600061118460cd611ed8565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111b157826111b3565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b50505050611216600a6106c3565b5050505050505050565b60c8840154606460ff909116106112895760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104fd565b60c8840154610100900460ff16606481106112b65760405162461bcd60e51b81526004016104fd90612758565b60006112c28683611aef565b6001810154909150600160581b900460ff161561133e5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104fd565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b191617909355549190910481161461141a5760006113ff878860c80160039054906101000a900460ff16611aef565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156114645760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff1690600061147983612438565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114d15760c889015460ff166114d3565b875b60c88a015460ff908116985090915081166001600160401b038111156114fb576114fb612590565b604051908082528060200260200182016040528015611524578160200160208202803683370190505b5095508060ff166001600160401b0381111561154257611542612590565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b5094508060ff166001600160401b0381111561158957611589612590565b6040519080825280602002602001820160405280156115b2578160200160208202803683370190505b5092508060ff166001600160401b038111156115d0576115d0612590565b6040519080825280602002602001820160405280156115f9578160200160208202803683370190505b5091508060ff166001600160401b0381111561161757611617612590565b604051908082528060200260200182016040528015611640578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117e557600061166f8c84611aef565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b9185169081106116fd576116fd61279b565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061172b5761172b61279b565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff16815181106117655761176561279b565b602002602001019061ffff16908161ffff16815250508060000151868360ff16815181106117955761179561279b565b6020026020010181815250508060c00151858360ff16815181106117bb576117bb61279b565b60ff9092166020928302919091019091015260c001519150806117dd81612438565b915050611655565b5060c88a015460ff908116908a161080611801575060ff818116145b6118655760405162461bcd60e51b815260206004820152602f60248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765734765742860448201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b60648201526084016104fd565b50509295509295509295565b60c8820154600090819060ff1660648111156119065760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104fd565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611ac35760006119368786611aef565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611aab57806060015160ff168560ff16146119e15760405162461bcd60e51b81526004016104fd906127b1565b60016119ed8385612458565b6119f79190612458565b611a02906002612800565b611a0d9060da612458565b935060ff8416601411801590611a27575060da60ff851611155b611aa35760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104fd565b505050611ae8565b60c00151935080611abb81612438565b91505061191c565b5060ff83811614611ae65760405162461bcd60e51b81526004016104fd906127b1565b505b9250929050565b6000606460ff831610611b6a5760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104fd565b60008360ff841660648110611b8157611b8161279b565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611bff5760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104fd565b90505b92915050565b60c882015460ff16611c6d5760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104fd565b6000611c798383611aef565b6001810154909150600160581b900460ff16611ce75760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104fd565b6001810154600160601b900460ff90811614611d42576000611d1a8483600101600c9054906101000a900460ff16611aef565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d9d576000611d758483600101600d9054906101000a900460ff16611aef565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611ddd57600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611e2057600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611e3e575060ff818116145b611e5a5760405162461bcd60e51b81526004016104fd90612758565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611eb983612821565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611efb57439150611fed565b6000611f078483611aef565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611fe65760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104fd565b6020015191505b50919050565b60006020828403121561200557600080fd5b81356001600160a01b0381168114611bff57600080fd5b803560ff8116811461202d57600080fd5b919050565b60006020828403121561204457600080fd5b61204d8261201c565b9392505050565b801515811461206257600080fd5b50565b6000806040838503121561207857600080fd5b823561208381612054565b91506120916020840161201c565b90509250929050565b600081518084526020808501945080840160005b838110156120cd57815160ff16875295820195908201906001016120ae565b509495945050505050565b600081518084526020808501945080840160005b838110156120cd5781516001600160401b0316875295820195908201906001016120ec565b600081518084526020808501945080840160005b838110156120cd57815161ffff1687529582019590820190600101612125565b600081518084526020808501945080840160005b838110156120cd578151151587529582019590820190600101612159565b600061010060ff8b168352602081818501526121958285018c61209a565b915083820360408501526121a9828b6120d8565b915083820360608501526121bd828a612111565b84810360808601528851808252828a0193509082019060005b818110156121f2578451835293830193918301916001016121d6565b505084810360a0860152612206818961209a565b9250505082810360c084015261221c8186612111565b905082810360e08401526122308185612145565b9b9a5050505050505050505050565b80356001600160401b038116811461202d57600080fd5b60006020828403121561226857600080fd5b61204d8261223f565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c08501516122d960c084018260ff169052565b5083151560e083015260ff8316610100830152610cf9565b6000806040838503121561230457600080fd5b61230d8361223f565b9150602083013561231d81612054565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851680830382111561236057612360612328565b01949350505050565b60006001600160401b038381169083168181101561238957612389612328565b039392505050565b60006001600160401b03808416806123b957634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123e2576123e2612328565b6001019392505050565b600061ffff80831681851680830382111561236057612360612328565b60006001600160401b038083168185168183048111821515161561242f5761242f612328565b02949350505050565b600060ff821660ff81141561244f5761244f612328565b60010192915050565b600060ff821660ff84168082101561247257612472612328565b90039392505050565b600181815b80851115611ae657816000190482111561249c5761249c612328565b808516156124a957918102915b93841c9390800290612480565b6000826124c557506001611c02565b816124d257506000611c02565b81600181146124e857600281146124f25761250e565b6001915050611c02565b60ff84111561250357612503612328565b50506001821b611c02565b5060208310610133831016604e8410600b8410161715612531575081810a611c02565b61253b838361247b565b806000190482111561254f5761254f612328565b029392505050565b600061204d60ff8416836124b6565b60408152600061257960408301856120d8565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125ce576125ce612590565b604052919050565b60006001600160401b038211156125ef576125ef612590565b5060051b60200190565b600082601f83011261260a57600080fd5b8151602061261f61261a836125d6565b6125a6565b82815260059290921b8401810191818101908684111561263e57600080fd5b8286015b8481101561266257805161265581612054565b8352918301918301612642565b509695505050505050565b6000806040838503121561268057600080fd5b82516001600160401b038082111561269757600080fd5b818501915085601f8301126126ab57600080fd5b815160206126bb61261a836125d6565b82815260059290921b840181019181810190898411156126da57600080fd5b948201945b8386101561270957855161ffff811681146126fa5760008081fd5b825294820194908201906126df565b9188015191965090935050508082111561272257600080fd5b5061272f858286016125f9565b9150509250929050565b600081600019048311821515161561275357612753612328565b500290565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff048111821515161561254f5761254f612328565b600060ff82168061283457612834612328565b600019019291505056fea264697066735822122043d692b859b9b8426e26e6f7908c6924f34fdef39a1ce94c3aebf1a3166d20da64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6749,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_trusteeAddr","offset":0,"slot":"1","type":"t_address"},{"astId":2710,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":2713,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"records","offset":0,"slot":"3","type":"t_contract(ILuminaRecords)2689"},{"astId":2716,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_basicChallenges","offset":0,"slot":"4","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2719,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_premiumChallenges","offset":0,"slot":"205","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2721,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdBasicChallenges","offset":0,"slot":"406","type":"t_uint64"},{"astId":2723,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdPremiumChallenges","offset":8,"slot":"406","type":"t_uint64"},{"astId":2725,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_startingBlockNumber","offset":16,"slot":"406","type":"t_uint64"},{"astId":2727,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextChallengeBlockNumber","offset":24,"slot":"406","type":"t_uint64"},{"astId":2729,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextDonorBlockNumber","offset":0,"slot":"407","type":"t_uint64"},{"astId":2731,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_blocksPerChallenge","offset":8,"slot":"407","type":"t_uint64"},{"astId":2733,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextBlocksPerChallengeInc","offset":16,"slot":"407","type":"t_uint64"},{"astId":2735,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_rewardUnits","offset":24,"slot":"407","type":"t_uint16"},{"astId":2737,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextRewardUnitsInc","offset":0,"slot":"408","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Challenge)1498_storage)100_storage":{"base":"t_struct(Challenge)1498_storage","encoding":"inplace","label":"struct ChallengeRecords.Challenge[100]","numberOfBytes":"6400"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_struct(Challenge)1498_storage":{"encoding":"inplace","label":"struct ChallengeRecords.Challenge","members":[{"astId":1485,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"challengeHash","offset":0,"slot":"0","type":"t_uint256"},{"astId":1487,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"},{"astId":1489,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"rewardUnits","offset":8,"slot":"1","type":"t_uint16"},{"astId":1491,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"index","offset":10,"slot":"1","type":"t_uint8"},{"astId":1493,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"valid","offset":11,"slot":"1","type":"t_bool"},{"astId":1495,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"prev","offset":12,"slot":"1","type":"t_uint8"},{"astId":1497,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"next","offset":13,"slot":"1","type":"t_uint8"}],"numberOfBytes":"64"},"t_struct(ChallengeSet)1512_storage":{"encoding":"inplace","label":"struct ChallengeRecords.ChallengeSet","members":[{"astId":1503,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"ch","offset":0,"slot":"0","type":"t_array(t_struct(Challenge)1498_storage)100_storage"},{"astId":1505,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"cnt","offset":0,"slot":"200","type":"t_uint8"},{"astId":1507,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"freeIndex","offset":1,"slot":"200","type":"t_uint8"},{"astId":1509,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"head","offset":2,"slot":"200","type":"t_uint8"},{"astId":1511,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"tail","offset":3,"slot":"200","type":"t_uint8"}],"numberOfBytes":"6432"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},267:function(e){e.exports=JSON.parse('{"address":"0xA2062BDdBFA14e00a9cC97c9877b903b0138787B","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"},{"internalType":"address","name":"recordsAddr_","type":"address"},{"internalType":"address","name":"adminAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"miner","type":"address"},{"indexed":false,"internalType":"uint256","name":"solution","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"claimNo","type":"uint16"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"marketingAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"MarketingCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"claimReward","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProgress","outputs":[{"internalType":"uint256","name":"progress","type":"uint256"},{"internalType":"uint256","name":"progressMax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"marketingAddr_","type":"address"}],"name":"setMarketingAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifyClaim","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifySolution","outputs":[{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x822c1f5bea735fc88919cf799e1747b9474cb79802c4b2a0a3d4483d058c80fd","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xA2062BDdBFA14e00a9cC97c9877b903b0138787B","transactionIndex":30,"gasUsed":"2333299","logsBloom":"0xblockHash":"0x9559d381399b9225310f894631d2c40d50f24a8617a91bc44d4b6055b2fda2aa","transactionHash":"0x822c1f5bea735fc88919cf799e1747b9474cb79802c4b2a0a3d4483d058c80fd","logs":[{"transactionIndex":30,"blockNumber":24636887,"transactionHash":"0x822c1f5bea735fc88919cf799e1747b9474cb79802c4b2a0a3d4483d058c80fd","address":"0xA2062BDdBFA14e00a9cC97c9877b903b0138787B","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":76,"blockHash":"0x9559d381399b9225310f894631d2c40d50f24a8617a91bc44d4b6055b2fda2aa"},{"transactionIndex":30,"blockNumber":24636887,"transactionHash":"0x822c1f5bea735fc88919cf799e1747b9474cb79802c4b2a0a3d4483d058c80fd","address":"0xA2062BDdBFA14e00a9cC97c9877b903b0138787B","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":77,"blockHash":"0x9559d381399b9225310f894631d2c40d50f24a8617a91bc44d4b6055b2fda2aa"},{"transactionIndex":30,"blockNumber":24636887,"transactionHash":"0x822c1f5bea735fc88919cf799e1747b9474cb79802c4b2a0a3d4483d058c80fd","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000742d13f0b2a19c823bdd362b16305e4704b97a38"],"data":"0x00000000000000000000000000000000000000000000000000f8afb12f0785480000000000000000000000000000000000000000000000207815e29597a61d73000000000000000000000000000000000000000000000e520bdf48889ce0d1b8000000000000000000000000000000000000000000000020771d32e4689e982b000000000000000000000000000000000000000000000e520cd7f839cbe85700","logIndex":78,"blockHash":"0x9559d381399b9225310f894631d2c40d50f24a8617a91bc44d4b6055b2fda2aa"}],"blockNumber":24636887,"cumulativeGasUsed":"4548811","status":1,"byzantium":true},"args":["0xEac48fc254dCb52C80d9D77013cc6AB961E7179D","0x5A50112324ef0FBEEb001c9d3BE4a7A6D018BE91","0xF119CB8Ae4f473e8DcC6B9f6f338803fC000ACB4"],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"Claim\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"MarketingCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"claimReward\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getClaimedTokens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProgress\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progress\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progressMax\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"marketingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMarketingAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifyClaim\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifySolution\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaTrustee.sol\\":\\"LuminaTrustee\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./Rules.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\n\\\\ncontract LuminaTrustee is Ownable, Pausable, Progressing, Rules {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Public address of the linked records contract\\\\n    address public recordsAddr;\\\\n    // Public address of the linked administrator contract\\\\n    address public adminAddr;\\\\n    // Public address of the linked marketing contract\\\\n    address public marketingAddr;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n    // Link to LuminaRecords contract\\\\n    ILuminaRecords private records;\\\\n    // Link to LuminaAdministator contract\\\\n    ILuminaAdmin private admin;\\\\n\\\\n    uint64 private _claimedChallenges;\\\\n    uint256 private _claimedTokens;\\\\n    uint64 private _marketingCallSuccessCnt;\\\\n    uint64 private _marketingCallFailedCnt;\\\\n\\\\n    event Claim(uint64 indexed blockNumber, address indexed recipient, address indexed miner, uint256 solution, uint8 commisionPrc, uint16 claimNo);\\\\n    event MarketingCallFailed(address marketingAddr, uint64 blockNumber, string message);\\\\n\\\\n    constructor(address tokenAddr_, address recordsAddr_, address adminAddr_) {\\\\n        pause();\\\\n\\\\n        tokenAddr = tokenAddr_;\\\\n        recordsAddr = recordsAddr_;\\\\n        adminAddr = adminAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n        records = ILuminaRecords(recordsAddr);\\\\n        admin = ILuminaAdmin(adminAddr);\\\\n\\\\n        _claimedChallenges = 0;\\\\n        _claimedTokens = 0;\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function getProgress() public view override returns (uint256 progress, uint256 progressMax) {\\\\n        progress = _claimedTokens;\\\\n        progressMax = _claimedTokens+token.balanceOf(address(this));\\\\n    }\\\\n\\\\n    function getClaimedTokens() public view returns (uint256) {\\\\n        return _claimedTokens;\\\\n    }\\\\n\\\\n    function setMarketingAddr(address marketingAddr_) external onlyOwner {\\\\n        require(marketingAddr_ == address(0) || ILuminaMarketing(marketingAddr_).owner() == owner(), \\\\\\"The marketing contract address must point to a contract with the same owner\\\\\\");\\\\n        marketingAddr = marketingAddr_;\\\\n    }\\\\n\\\\n    function _getAdjustedDifficulty(uint64 blockNumber, address recipient, uint8 generalDifficulty, uint256 challengeHash) private view returns (uint8 adjustedDifficulty) {\\\\n        uint256 registeredBalance = records.findBalance(recipient, blockNumber);\\\\n\\\\n        uint8 walletDiscount = _getWalletDifficultyDiscount(challengeHash, recipient, registeredBalance);\\\\n        uint8 balanceDiscount = _getBalanceDifficultyDiscount(registeredBalance);\\\\n\\\\n        // Calculate Adjusted Difficulty\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): generalDifficulty out of range\\\\\\");\\\\n        uint8 totalDiscount = walletDiscount + balanceDiscount;\\\\n        adjustedDifficulty = generalDifficulty >= totalDiscount ? generalDifficulty - totalDiscount : 0;\\\\n        if(adjustedDifficulty < MIN_CHALLENGE_DIFFICULTY) {\\\\n            adjustedDifficulty = MIN_CHALLENGE_DIFFICULTY;\\\\n        }\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= adjustedDifficulty && adjustedDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): adjustedDifficulty out of range\\\\\\");\\\\n    }\\\\n\\\\n    function verifySolution(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused returns (uint16 solvedDifficulty) {\\\\n        (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        require(premium == false || premium == true);\\\\n\\\\n        bytes memory data = abi.encodePacked(solution, ch.challengeHash, uint256(uint160(recipient)), uint256(uint160(miner)));\\\\n        require(data.length == 128, \\\\\\"Invalid solution data\\\\\\");\\\\n        bytes32 digest = keccak256(data);\\\\n\\\\n        solvedDifficulty = 256 - Utils._findHsb(uint256(digest));\\\\n    }\\\\n\\\\n    function _isLuminaFund(address recipient) private pure returns (bool) {\\\\n        ILuminaFund maybeFund = ILuminaFund(recipient);\\\\n        try maybeFund.isLuminaFund() returns (bool isFund) {\\\\n            return isFund;\\\\n        } catch {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    // Reasons\\\\n    // 0 - satisfies all criteria, at this moment, to claim the tokens\\\\n    // 1 - blockNumber does not exist or has no live challenge assigned right now\\\\n    // 2 - solvedDifficulty doesn\'t safisfy the current requirements\\\\n    // 3 - this challenge has already been claimed by this address\\\\n    // 4 - all available rewards have been already claimed\\\\n    // 5 - recipient\'s address is not eligible for rewards, external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    // 6 - recipient\'s address is not eligible for rewards, it is a contract that is not a Lumina Fund\\\\n    function verifyClaim(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 rewardsCnt, uint16 claimsCnt)\\\\n    {\\\\n        ChallengeRecords.Challenge memory ch;\\\\n\\\\n        // Retrieve the challenge information\\\\n        uint8 generalDifficulty;\\\\n        (ch, premium, generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(ch.valid, \\\\\\"Invalid challenge record\\\\\\");\\\\n\\\\n        // Get adjustd difficulty\\\\n        uint8 adjustedDifficulty = _getAdjustedDifficulty(blockNumber, recipient, generalDifficulty, ch.challengeHash);\\\\n\\\\n        // Get actual solved difficulty\\\\n        uint16 solvedDifficulty = verifySolution(blockNumber, miner, recipient, solution);\\\\n\\\\n        // Calculate Reward Tokens\\\\n        rewardUnits = 0;\\\\n        reason = 0;\\\\n        if(solvedDifficulty >= adjustedDifficulty) {\\\\n            uint256 balance = token.balanceOf(recipient);\\\\n            if(records.hasClaimed(blockNumber, recipient) != 0) {\\\\n                reason = 3;\\\\n            } else if(miner != recipient && balance < MINERS_CLAIM_MIN_RECIPIENT_BALANCE) {\\\\n                reason = 5;\\\\n            } else if(Address.isContract(recipient) && !_isLuminaFund(recipient)) {\\\\n                reason = 6;\\\\n            }\\\\n        } else {\\\\n            reason = 2;\\\\n        }\\\\n\\\\n        if(reason == 0) {\\\\n            uint16 rewardTokens;\\\\n            (rewardsCnt, rewardTokens) = _getRewardTokens(ch.challengeHash);\\\\n\\\\n            if(rewardsCnt > REWARDS_CNT_LIMIT) {\\\\n                rewardsCnt = REWARDS_CNT_LIMIT;\\\\n            }\\\\n\\\\n            claimsCnt = records.getClaimsCnt(blockNumber);\\\\n            if(claimsCnt < rewardsCnt) {\\\\n                rewardUnits = uint32(rewardTokens) * uint32(ch.rewardUnits);\\\\n                reason = 0;\\\\n            } else {\\\\n                reason = 4;\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function claimReward(uint64 blockNumber, address miner, address recipient, uint256 solution) external whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 claimsCnt)\\\\n    {\\\\n        uint16 rewardsCnt;\\\\n\\\\n        (rewardUnits, reason, premium, rewardsCnt, claimsCnt) = verifyClaim(blockNumber, miner, recipient, solution);\\\\n\\\\n        if(reason == 0) {\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(rewardUnits > 0, \\\\\\"Invalid reward amount\\\\\\");\\\\n            require(rewardUnits <= uint256(2000).mul(REWARD_UNITS_STANDARD), \\\\\\"Invalid reward, amount too big\\\\\\");\\\\n\\\\n            // Transfer reward to msg.sender\\\\n            uint256 rewardAmount = uint256(rewardUnits).mul(REWARD_UNIT);\\\\n\\\\n            uint8 commisionPrc = records.getCommision(recipient);\\\\n            if(miner != recipient) {\\\\n                uint256 commisionAmount = rewardAmount.mul(commisionPrc).div(100);\\\\n                uint256 recipientAmount = rewardAmount.sub(commisionAmount);\\\\n                token.transfer(recipient, recipientAmount);\\\\n                token.transfer(miner, commisionAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, commisionPrc, claimsCnt);\\\\n            } else {\\\\n                token.transfer(recipient, rewardAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, 0, claimsCnt);\\\\n            }\\\\n\\\\n            _claimedTokens = _claimedTokens.add(rewardAmount);\\\\n\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(claimsCnt < REWARDS_CNT_LIMIT, \\\\\\"claim count is too big\\\\\\");\\\\n            require(claimsCnt < rewardsCnt, \\\\\\"claim count is too big\\\\\\");\\\\n            claimsCnt++;\\\\n            records._addClaim(blockNumber, recipient, rewardUnits);\\\\n\\\\n            if(claimsCnt >= rewardsCnt) {\\\\n                _claimedChallenges++;\\\\n                admin._cleanupChallenge(blockNumber, premium);\\\\n            }\\\\n\\\\n            // Notify the marketing contract\\\\n            if(marketingAddr != address(0)) {\\\\n                ILuminaMarketing marketing = ILuminaMarketing(marketingAddr);\\\\n                try marketing._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc) {\\\\n                } catch Error(string memory message) {\\\\n                    _marketingCallSuccessCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, message);\\\\n                } catch {\\\\n                    _marketingCallFailedCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3abb18c92c1ed229a724077f859287196c92e79a44843c2272b9a97a823b400b\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = false;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc8321ceb1a53930afe0efdbc6cc0080b00ced0e54ccf632e07cd2de32f41a954\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Rules.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract Rules is Parameters {\\\\n    using SafeMath for uint256;\\\\n\\\\n    function _getWalletDifficultyDiscount(uint256 challengeHash, address addr, uint256 balance) internal pure returns (uint8) {\\\\n        uint256 h1 = challengeHash;\\\\n        uint256 h2 = uint256(uint160(addr));\\\\n\\\\n        uint256 o = h1 ^ h2;\\\\n        uint16 lsb = Utils._findLsb(o);\\\\n        if(lsb == 0) {\\\\n            lsb = 256;\\\\n        } else {\\\\n            lsb--;\\\\n        }\\\\n\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint8 n = 0;\\\\n        if(b1 >= 1) {\\\\n            if(lsb >= 20) {\\\\n                n = 30;\\\\n            } else if(lsb >= 10) {\\\\n                n = 20 + (uint8(lsb) - 10);\\\\n            } else {\\\\n                n = 2 * uint8(lsb);\\\\n            }\\\\n        } else {\\\\n            if(lsb > 10) {\\\\n                n = 10;\\\\n            } else {\\\\n                n = uint8(lsb);\\\\n            }\\\\n        }\\\\n\\\\n        return n;\\\\n    }\\\\n\\\\n   function _getBalanceDifficultyDiscount(uint256 balance) internal pure returns (uint8) {\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint256 b2 = balance.mod(TOKEN_UNIT).div(REWARD_UNIT);\\\\n\\\\n        uint8 discount;\\\\n        if(b1 >= 1) {\\\\n            if(b1 >= 1000) {\\\\n                discount = 2 * 10 + 10;\\\\n            } else if(b1 >= 500) {\\\\n                discount = 2 * 9 + 10;\\\\n            } else if(b1 >= 200) {\\\\n                discount = 2 * 8 + 10;\\\\n            } else if(b1 >= 100) {\\\\n                discount = 2 * 7 + 10;\\\\n            } else if(b1 >= 50) {\\\\n                discount = 2 * 6 + 10;\\\\n            } else if(b1 >= 20) {\\\\n                discount = 2 * 5 + 10;\\\\n            } else if(b1 >= 10) {\\\\n                discount = 2 * 4 + 10;\\\\n            } else if(b1 >= 5) {\\\\n                discount = 2 * 3 + 10;\\\\n            } else if(b1 >= 3) {\\\\n                discount = 2 * 2 + 10;\\\\n            } else if(b1 >= 2) {\\\\n                discount = 2 * 1 + 10;\\\\n            } else {\\\\n                discount = 2 * 0 + 10;\\\\n            }\\\\n        } else {\\\\n            if(b2 >= 500) {\\\\n                discount = 9;\\\\n            } else if(b2 >= 200) {\\\\n                discount = 8;\\\\n            } else if(b2 >= 100) {\\\\n                discount = 7;\\\\n            } else if(b2 >= 50) {\\\\n                discount = 6;\\\\n            } else if(b2 >= 20) {\\\\n                discount = 5;\\\\n            } else if(b2 >= 10) {\\\\n                discount = 4;\\\\n            } else if(b2 >= 5) {\\\\n                discount = 3;\\\\n            } else if(b2 >= 2) {\\\\n                discount = 2;\\\\n            } else if(b2 >= 1) {\\\\n                discount = 1;\\\\n            } else {\\\\n                discount = 0;\\\\n            }\\\\n        }\\\\n        return discount;\\\\n    }\\\\n\\\\n    // Now of tokens is means in Einstein era, during Newton era the number need to be multiplies with current units per token number\\\\n    function _getRewardTokens(uint256 challengeHash) internal pure returns (uint16 rewardsCnt, uint16 tokens) {\\\\n        uint256 h = challengeHash;\\\\n\\\\n        if(((h >> (256-20)) & 0xFFFFF) == 0x22222) {\\\\n            return (500, 2000);\\\\n        } else if(((h >> (256-16)) & 0xFFFF) == 0x2222) {\\\\n            return (200, 500);\\\\n        } else if(((h >> (256-12)) & 0xFFF) == 0x222) {\\\\n            return (100, 100);\\\\n        } else if(((h >> (256-2)) & 0xFF) == 0x22) {\\\\n            return (50, 20);\\\\n        } else if(((h >> (256-4)) & 0xF) == 0x2) {\\\\n            return (20, 5);\\\\n        } else {\\\\n            return (10, 1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3009c450f1ddaa90322820a0ba12ec9b6370364e56bca1b04e7c61e6204df66e\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620028d8380380620028d883398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b620016ac1760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b61262180620002b76000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638183059311610130578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610459578063ec2165d314610461578063f2fde38b14610469578063f668bee51461047c578063f883fcaa1461044057600080fd5b8063b91268e814610430578063b915dec214610438578063c28bd11c14610440578063c28cedf314610448578063c6088d971461045057600080fd5b80639d941362116100ff5780639d941362146103b4578063a215776714610405578063a5c9cd821461040d578063a7c1d59014610415578063b313bd621461042857600080fd5b806381830593146103bc5780638456cb59146103cf5780638da5cb5b146103d7578063939c4456146103e857600080fd5b80633ff42b92116101be5780635fbe4d1d116101825780635fbe4d1d146103905780636bb987fe146103a3578063715018a6146103ac57806373d6aafa146103b45780637fb012321461036257600080fd5b80633ff42b9214610347578063479e92c81461035a578063504b3662146103625780635b7f415c1461036a5780635c975abb1461037257600080fd5b80631e7bfd60116102055780631e7bfd60146102d357806330db4fa0146102fe5780633a3a7c531461031e5780633e6e387c146103345780633f4ba83a1461033d57600080fd5b806306e38632146102375780630bf43309146102585780630e7d8db9146102725780630ff8a7eb146102c0575b600080fd5b610240610a8c81565b60405161ffff90911681526020015b60405180910390f35b61026060da81565b60405160ff909116815260200161024f565b610285610280366004611ee8565b6104c2565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a00161024f565b6102406102ce366004611ee8565b6108f5565b6002546102e6906001600160a01b031681565b6040516001600160a01b03909116815260200161024f565b61030660c881565b6040516001600160401b03909116815260200161024f565b610326610ad3565b60405190815260200161024f565b6102406101f481565b610345610aed565b005b6004546102e6906001600160a01b031681565b610260601481565b610260606481565b610260601281565b600054600160a01b900460ff165b604051901515815260200161024f565b6001546102e6906001600160a01b031681565b61030661996881565b610345610b21565b610240600a81565b6003546102e6906001600160a01b031681565b610345610b7d565b6000546001600160a01b03166102e6565b6103f0610baf565b6040805192835260208301919091520161024f565b61026060ff81565b610326610c32565b610345610423366004611f39565b610c3e565b610306600281565b610326610da3565b600854610326565b610260600281565b610380600081565b6102406103e881565b610326610dc5565b610306610ddd565b610345610477366004611f39565b610dea565b61048f61048a366004611ee8565b610e85565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff16606082015260800161024f565b60008060008060006104de60005460ff600160a01b9091041690565b156105045760405162461bcd60e51b81526004016104fb90611f56565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190612025565b608083015191975091935090915061060e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104fb565b60006106208c8b84866000015161172e565b905060006106308d8d8d8d6108f5565b905060009850600097508160ff168161ffff16106107e4576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b791906120e9565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107199291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a9190612102565b63ffffffff161561076e57600398506107de565b8b6001600160a01b03168d6001600160a01b0316141580156107b057506107976003601261213e565b6107a290600a612245565b6107ad90600a612254565b81105b156107be57600598506107de565b8b3b151580156107d457506107d28c61190e565b155b156107de57600698505b506107e9565b600297505b60ff88166108e65760006108008560000151611982565b90975090506101f461ffff88161115610819576101f496505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b815260040161086991906001600160401b0391909116815260200190565b602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190612273565b95508661ffff168661ffff1610156108df57846040015161ffff168161ffff166108d4919061228e565b9950600098506108e4565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff16156109205760405162461bcd60e51b81526004016104fb90611f56565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612025565b9194509250905060ff81166014118015906109ba575060da60ff821611155b610a065760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fb565b811580610a1557506001821515145b610a1e57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610aa95760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104fb565b80516020820120610ab981611a1b565b610ac5906101006122ba565b9a9950505050505050505050565b610adf6003601261213e565b610aea90600a612245565b81565b6000546001600160a01b03163314610b175760405162461bcd60e51b81526004016104fb906122dd565b610b1f611a8e565b565b6000546001600160a01b03163314610b4b5760405162461bcd60e51b81526004016104fb906122dd565b600054600160a01b900460ff1615610b755760405162461bcd60e51b81526004016104fb90611f56565b610b1f611b12565b6000546001600160a01b03163314610ba75760405162461bcd60e51b81526004016104fb906122dd565b610b1f6116ac565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f91906120e9565b600854610c2c9190612312565b90509091565b610aea6012600a612245565b6000546001600160a01b03163314610c685760405162461bcd60e51b81526004016104fb906122dd565b6001600160a01b0381161580610cfb57506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf0919061232a565b6001600160a01b0316145b610d815760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610daf6003601261213e565b610dba90600a612245565b610aea90600a612254565b610dd16012600a612245565b610aea906103e8612254565b610aea6199686007612347565b6000546001600160a01b03163314610e145760405162461bcd60e51b81526004016104fb906122dd565b6001600160a01b038116610e795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610e8281611b42565b50565b600080600080610e9f60005460ff600160a01b9091041690565b15610ebc5760405162461bcd60e51b81526004016104fb90611f56565b6000610eca898989896104c2565b9398509196509450909250905060ff84166116a05760008563ffffffff1611610f2d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104fb565b610f3b6107d06103e8611b92565b8563ffffffff161115610f905760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104fb565b6000610fbc610fa16003601261213e565b610fac90600a612245565b63ffffffff8089169190611b9216565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611030919061236d565b9050886001600160a01b03168a6001600160a01b0316146111dd576000611065606461105f8560ff8616611b92565b90611ba7565b905060006110738483611bb3565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190612388565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612388565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111ce9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506112b5565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190612388565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546112c29083611bbf565b6008556101f461ffff8516106113135760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104fb565b8261ffff168461ffff16106113635760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104fb565b8361136d816123a3565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b505050508261ffff168461ffff16106114a05760078054600160a01b90046001600160401b0316906014611419836123c5565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b505050505b6004546001600160a01b03161561169d57600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561152757600080fd5b505af1925050508015611538575060015b61169b576115446123e2565b806308c379a014156115f857506115596123fe565b8061156457506115fa565b600980546001600160401b031690600061157d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e836040516115ea93929190612487565b60405180910390a15061169b565b505b600980546801000000000000000090046001600160401b031690600861161f836123c5565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156116d65760405162461bcd60e51b81526004016104fb90611f56565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117113390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906120e9565b905060006117be848784611bcb565b905060006117cb83611c98565b905060ff86166014118015906117e5575060da60ff871611155b6118475760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104fb565b600061185382846124fc565b90508060ff168760ff16101561186a576000611874565b611874818861213e565b9450601460ff8616101561188757601494505b60ff851660141180159061189f575060da60ff861611155b6119025760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104fb565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561196e575060408051601f3d908101601f1916820190925261196b91810190612388565b60015b61197b5750600092915050565b9392505050565b600080826202222260ec82901c14156119a457506101f4936107d09350915050565b61222260f082901c14156119c0575060c8936101f49350915050565b61022260f482901c14156119da5750606493849350915050565b602260fe82901c14156119f4575060329360149350915050565b600260fc82901c1415611a0e575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611a875760006001611a408385612521565b61ffff16901c905060006001611a57836002612547565b611a619190612557565b9050808611611a7257819250611a80565b611a7d826001612521565b93505b5050611a22565b5092915050565b600054600160a01b900460ff16611ade5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104fb565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611711565b6000546001600160a01b03163314611b3c5760405162461bcd60e51b81526004016104fb906122dd565b610b1f60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611b9e8284612254565b90505b92915050565b6000611b9e8284612584565b6000611b9e8284612557565b6000611b9e8284612312565b6000836001600160a01b03841680821883611be582611e38565b905061ffff8116611bf95750610100611c07565b80611c0381612598565b9150505b6000611c1f611c186012600a612245565b8890611ba7565b9050600060018210611c735760148361ffff1610611c3f5750601e611c8b565b600a8361ffff1610611c6857611c56600a8461213e565b611c619060146124fc565b9050611c8b565b611c618360026125b6565b600a8361ffff161115611c885750600a611c8b565b50815b9998505050505050505050565b600080611cb1611caa6012600a612245565b8490611ba7565b90506000611ce5611cc46003601261213e565b611ccf90600a612245565b61105f611cde6012600a612245565b8790611eb2565b9050600060018310611d9b576103e88310611d025750601e611e30565b6101f48310611d135750601c611e30565b60c88310611d235750601a611e30565b60648310611d3357506018611e30565b60328310611d4357506016611e30565b60148310611d5357506014611e30565b600a8310611d6357506012611e30565b60058310611d7357506010611e30565b60038310611d835750600e611e30565b60028310611d935750600c611e30565b50600a611e30565b6101f48210611dac57506009611e30565b60c88210611dbc57506008611e30565b60648210611dcc57506007611e30565b60328210611ddc57506006611e30565b60148210611dec57506005611e30565b600a8210611dfc57506004611e30565b60058210611e0c57506003611e30565b60028210611e1c57506002611e30565b60018210611e2c57506001611e30565b5060005b949350505050565b600081611e4757506000919050565b60016101005b8061ffff168261ffff161015611a875760006001611e6b8385612521565b61ffff16901c905060006001611e82836002612547565b611e8c9190612557565b9050858116611ea757611ea0826001612521565b9350611eab565b8192505b5050611e4d565b6000611b9e82846125d7565b6001600160401b0381168114610e8257600080fd5b6001600160a01b0381168114610e8257600080fd5b60008060008060808587031215611efe57600080fd5b8435611f0981611ebe565b93506020850135611f1981611ed3565b92506040850135611f2981611ed3565b9396929550929360600135925050565b600060208284031215611f4b57600080fd5b813561197b81611ed3565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611fad57634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611fe657634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff81168114611fff57600080fd5b919050565b805160ff81168114611fff57600080fd5b80518015158114611fff57600080fd5b600080600083850361012081121561203c57600080fd5b60e081121561204a57600080fd5b5060405161205781611f80565b84518152602085015161206981611ebe565b602082015261207a60408601611fed565b604082015261208b60608601612004565b606082015261209c60808601612015565b60808201526120ad60a08601612004565b60a08201526120be60c08601612004565b60c082015292506120d160e08501612015565b91506120e06101008501612004565b90509250925092565b6000602082840312156120fb57600080fd5b5051919050565b60006020828403121561211457600080fd5b815163ffffffff8116811461197b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561215857612158612128565b90039392505050565b600181815b8085111561219c57816000190482111561218257612182612128565b8085161561218f57918102915b93841c9390800290612166565b509250929050565b6000826121b357506001611ba1565b816121c057506000611ba1565b81600181146121d657600281146121e0576121fc565b6001915050611ba1565b60ff8411156121f1576121f1612128565b50506001821b611ba1565b5060208310610133831016604e8410600b841016171561221f575081810a611ba1565b6122298383612161565b806000190482111561223d5761223d612128565b029392505050565b6000611b9e60ff8416836121a4565b600081600019048311821515161561226e5761226e612128565b500290565b60006020828403121561228557600080fd5b611b9e82611fed565b600063ffffffff808316818516818304811182151516156122b1576122b1612128565b02949350505050565b600061ffff838116908316818110156122d5576122d5612128565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561232557612325612128565b500190565b60006020828403121561233c57600080fd5b815161197b81611ed3565b60006001600160401b03808316818516818304811182151516156122b1576122b1612128565b60006020828403121561237f57600080fd5b611b9e82612004565b60006020828403121561239a57600080fd5b611b9e82612015565b600061ffff808316818114156123bb576123bb612128565b6001019392505050565b60006001600160401b03808316818114156123bb576123bb612128565b600060033d11156123fb5760046000803e5060005160e01c5b90565b600060443d101561240c5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561243b57505050505090565b82850191508151818111156124535750505050505090565b843d870101602082850101111561246d5750505050505090565b61247c60208286010187611fb3565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b818110156124d2578581018301518582016080015282016124b6565b818111156124e4576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561251957612519612128565b019392505050565b600061ffff80831681851680830382111561253e5761253e612128565b01949350505050565b6000611b9e61ffff8416836121a4565b60008282101561256957612569612128565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826125935761259361256e565b500490565b600061ffff8216806125ac576125ac612128565b6000190192915050565b600060ff821660ff84168160ff048111821515161561223d5761223d612128565b6000826125e6576125e661256e565b50069056fea264697066735822122024e70137fb412797dc75aaa49f096e70569a7221b530cc757200f1335b9895ba64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638183059311610130578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610459578063ec2165d314610461578063f2fde38b14610469578063f668bee51461047c578063f883fcaa1461044057600080fd5b8063b91268e814610430578063b915dec214610438578063c28bd11c14610440578063c28cedf314610448578063c6088d971461045057600080fd5b80639d941362116100ff5780639d941362146103b4578063a215776714610405578063a5c9cd821461040d578063a7c1d59014610415578063b313bd621461042857600080fd5b806381830593146103bc5780638456cb59146103cf5780638da5cb5b146103d7578063939c4456146103e857600080fd5b80633ff42b92116101be5780635fbe4d1d116101825780635fbe4d1d146103905780636bb987fe146103a3578063715018a6146103ac57806373d6aafa146103b45780637fb012321461036257600080fd5b80633ff42b9214610347578063479e92c81461035a578063504b3662146103625780635b7f415c1461036a5780635c975abb1461037257600080fd5b80631e7bfd60116102055780631e7bfd60146102d357806330db4fa0146102fe5780633a3a7c531461031e5780633e6e387c146103345780633f4ba83a1461033d57600080fd5b806306e38632146102375780630bf43309146102585780630e7d8db9146102725780630ff8a7eb146102c0575b600080fd5b610240610a8c81565b60405161ffff90911681526020015b60405180910390f35b61026060da81565b60405160ff909116815260200161024f565b610285610280366004611ee8565b6104c2565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a00161024f565b6102406102ce366004611ee8565b6108f5565b6002546102e6906001600160a01b031681565b6040516001600160a01b03909116815260200161024f565b61030660c881565b6040516001600160401b03909116815260200161024f565b610326610ad3565b60405190815260200161024f565b6102406101f481565b610345610aed565b005b6004546102e6906001600160a01b031681565b610260601481565b610260606481565b610260601281565b600054600160a01b900460ff165b604051901515815260200161024f565b6001546102e6906001600160a01b031681565b61030661996881565b610345610b21565b610240600a81565b6003546102e6906001600160a01b031681565b610345610b7d565b6000546001600160a01b03166102e6565b6103f0610baf565b6040805192835260208301919091520161024f565b61026060ff81565b610326610c32565b610345610423366004611f39565b610c3e565b610306600281565b610326610da3565b600854610326565b610260600281565b610380600081565b6102406103e881565b610326610dc5565b610306610ddd565b610345610477366004611f39565b610dea565b61048f61048a366004611ee8565b610e85565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff16606082015260800161024f565b60008060008060006104de60005460ff600160a01b9091041690565b156105045760405162461bcd60e51b81526004016104fb90611f56565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190612025565b608083015191975091935090915061060e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104fb565b60006106208c8b84866000015161172e565b905060006106308d8d8d8d6108f5565b905060009850600097508160ff168161ffff16106107e4576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b791906120e9565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107199291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a9190612102565b63ffffffff161561076e57600398506107de565b8b6001600160a01b03168d6001600160a01b0316141580156107b057506107976003601261213e565b6107a290600a612245565b6107ad90600a612254565b81105b156107be57600598506107de565b8b3b151580156107d457506107d28c61190e565b155b156107de57600698505b506107e9565b600297505b60ff88166108e65760006108008560000151611982565b90975090506101f461ffff88161115610819576101f496505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b815260040161086991906001600160401b0391909116815260200190565b602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190612273565b95508661ffff168661ffff1610156108df57846040015161ffff168161ffff166108d4919061228e565b9950600098506108e4565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff16156109205760405162461bcd60e51b81526004016104fb90611f56565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612025565b9194509250905060ff81166014118015906109ba575060da60ff821611155b610a065760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fb565b811580610a1557506001821515145b610a1e57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610aa95760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104fb565b80516020820120610ab981611a1b565b610ac5906101006122ba565b9a9950505050505050505050565b610adf6003601261213e565b610aea90600a612245565b81565b6000546001600160a01b03163314610b175760405162461bcd60e51b81526004016104fb906122dd565b610b1f611a8e565b565b6000546001600160a01b03163314610b4b5760405162461bcd60e51b81526004016104fb906122dd565b600054600160a01b900460ff1615610b755760405162461bcd60e51b81526004016104fb90611f56565b610b1f611b12565b6000546001600160a01b03163314610ba75760405162461bcd60e51b81526004016104fb906122dd565b610b1f6116ac565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f91906120e9565b600854610c2c9190612312565b90509091565b610aea6012600a612245565b6000546001600160a01b03163314610c685760405162461bcd60e51b81526004016104fb906122dd565b6001600160a01b0381161580610cfb57506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf0919061232a565b6001600160a01b0316145b610d815760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610daf6003601261213e565b610dba90600a612245565b610aea90600a612254565b610dd16012600a612245565b610aea906103e8612254565b610aea6199686007612347565b6000546001600160a01b03163314610e145760405162461bcd60e51b81526004016104fb906122dd565b6001600160a01b038116610e795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610e8281611b42565b50565b600080600080610e9f60005460ff600160a01b9091041690565b15610ebc5760405162461bcd60e51b81526004016104fb90611f56565b6000610eca898989896104c2565b9398509196509450909250905060ff84166116a05760008563ffffffff1611610f2d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104fb565b610f3b6107d06103e8611b92565b8563ffffffff161115610f905760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104fb565b6000610fbc610fa16003601261213e565b610fac90600a612245565b63ffffffff8089169190611b9216565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611030919061236d565b9050886001600160a01b03168a6001600160a01b0316146111dd576000611065606461105f8560ff8616611b92565b90611ba7565b905060006110738483611bb3565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190612388565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612388565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111ce9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506112b5565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190612388565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546112c29083611bbf565b6008556101f461ffff8516106113135760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104fb565b8261ffff168461ffff16106113635760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104fb565b8361136d816123a3565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b505050508261ffff168461ffff16106114a05760078054600160a01b90046001600160401b0316906014611419836123c5565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b505050505b6004546001600160a01b03161561169d57600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561152757600080fd5b505af1925050508015611538575060015b61169b576115446123e2565b806308c379a014156115f857506115596123fe565b8061156457506115fa565b600980546001600160401b031690600061157d836123c5565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e836040516115ea93929190612487565b60405180910390a15061169b565b505b600980546801000000000000000090046001600160401b031690600861161f836123c5565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156116d65760405162461bcd60e51b81526004016104fb90611f56565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117113390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906120e9565b905060006117be848784611bcb565b905060006117cb83611c98565b905060ff86166014118015906117e5575060da60ff871611155b6118475760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104fb565b600061185382846124fc565b90508060ff168760ff16101561186a576000611874565b611874818861213e565b9450601460ff8616101561188757601494505b60ff851660141180159061189f575060da60ff861611155b6119025760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104fb565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561196e575060408051601f3d908101601f1916820190925261196b91810190612388565b60015b61197b5750600092915050565b9392505050565b600080826202222260ec82901c14156119a457506101f4936107d09350915050565b61222260f082901c14156119c0575060c8936101f49350915050565b61022260f482901c14156119da5750606493849350915050565b602260fe82901c14156119f4575060329360149350915050565b600260fc82901c1415611a0e575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611a875760006001611a408385612521565b61ffff16901c905060006001611a57836002612547565b611a619190612557565b9050808611611a7257819250611a80565b611a7d826001612521565b93505b5050611a22565b5092915050565b600054600160a01b900460ff16611ade5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104fb565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611711565b6000546001600160a01b03163314611b3c5760405162461bcd60e51b81526004016104fb906122dd565b610b1f60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611b9e8284612254565b90505b92915050565b6000611b9e8284612584565b6000611b9e8284612557565b6000611b9e8284612312565b6000836001600160a01b03841680821883611be582611e38565b905061ffff8116611bf95750610100611c07565b80611c0381612598565b9150505b6000611c1f611c186012600a612245565b8890611ba7565b9050600060018210611c735760148361ffff1610611c3f5750601e611c8b565b600a8361ffff1610611c6857611c56600a8461213e565b611c619060146124fc565b9050611c8b565b611c618360026125b6565b600a8361ffff161115611c885750600a611c8b565b50815b9998505050505050505050565b600080611cb1611caa6012600a612245565b8490611ba7565b90506000611ce5611cc46003601261213e565b611ccf90600a612245565b61105f611cde6012600a612245565b8790611eb2565b9050600060018310611d9b576103e88310611d025750601e611e30565b6101f48310611d135750601c611e30565b60c88310611d235750601a611e30565b60648310611d3357506018611e30565b60328310611d4357506016611e30565b60148310611d5357506014611e30565b600a8310611d6357506012611e30565b60058310611d7357506010611e30565b60038310611d835750600e611e30565b60028310611d935750600c611e30565b50600a611e30565b6101f48210611dac57506009611e30565b60c88210611dbc57506008611e30565b60648210611dcc57506007611e30565b60328210611ddc57506006611e30565b60148210611dec57506005611e30565b600a8210611dfc57506004611e30565b60058210611e0c57506003611e30565b60028210611e1c57506002611e30565b60018210611e2c57506001611e30565b5060005b949350505050565b600081611e4757506000919050565b60016101005b8061ffff168261ffff161015611a875760006001611e6b8385612521565b61ffff16901c905060006001611e82836002612547565b611e8c9190612557565b9050858116611ea757611ea0826001612521565b9350611eab565b8192505b5050611e4d565b6000611b9e82846125d7565b6001600160401b0381168114610e8257600080fd5b6001600160a01b0381168114610e8257600080fd5b60008060008060808587031215611efe57600080fd5b8435611f0981611ebe565b93506020850135611f1981611ed3565b92506040850135611f2981611ed3565b9396929550929360600135925050565b600060208284031215611f4b57600080fd5b813561197b81611ed3565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611fad57634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611fe657634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff81168114611fff57600080fd5b919050565b805160ff81168114611fff57600080fd5b80518015158114611fff57600080fd5b600080600083850361012081121561203c57600080fd5b60e081121561204a57600080fd5b5060405161205781611f80565b84518152602085015161206981611ebe565b602082015261207a60408601611fed565b604082015261208b60608601612004565b606082015261209c60808601612015565b60808201526120ad60a08601612004565b60a08201526120be60c08601612004565b60c082015292506120d160e08501612015565b91506120e06101008501612004565b90509250925092565b6000602082840312156120fb57600080fd5b5051919050565b60006020828403121561211457600080fd5b815163ffffffff8116811461197b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561215857612158612128565b90039392505050565b600181815b8085111561219c57816000190482111561218257612182612128565b8085161561218f57918102915b93841c9390800290612166565b509250929050565b6000826121b357506001611ba1565b816121c057506000611ba1565b81600181146121d657600281146121e0576121fc565b6001915050611ba1565b60ff8411156121f1576121f1612128565b50506001821b611ba1565b5060208310610133831016604e8410600b841016171561221f575081810a611ba1565b6122298383612161565b806000190482111561223d5761223d612128565b029392505050565b6000611b9e60ff8416836121a4565b600081600019048311821515161561226e5761226e612128565b500290565b60006020828403121561228557600080fd5b611b9e82611fed565b600063ffffffff808316818516818304811182151516156122b1576122b1612128565b02949350505050565b600061ffff838116908316818110156122d5576122d5612128565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561232557612325612128565b500190565b60006020828403121561233c57600080fd5b815161197b81611ed3565b60006001600160401b03808316818516818304811182151516156122b1576122b1612128565b60006020828403121561237f57600080fd5b611b9e82612004565b60006020828403121561239a57600080fd5b611b9e82612015565b600061ffff808316818114156123bb576123bb612128565b6001019392505050565b60006001600160401b03808316818114156123bb576123bb612128565b600060033d11156123fb5760046000803e5060005160e01c5b90565b600060443d101561240c5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561243b57505050505090565b82850191508151818111156124535750505050505090565b843d870101602082850101111561246d5750505050505090565b61247c60208286010187611fb3565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b818110156124d2578581018301518582016080015282016124b6565b818111156124e4576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561251957612519612128565b019392505050565b600061ffff80831681851680830382111561253e5761253e612128565b01949350505050565b6000611b9e61ffff8416836121a4565b60008282101561256957612569612128565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826125935761259361256e565b500490565b600061ffff8216806125ac576125ac612128565b6000190192915050565b600060ff821660ff84168160ff048111821515161561223d5761223d612128565b6000826125e6576125e661256e565b50069056fea264697066735822122024e70137fb412797dc75aaa49f096e70569a7221b530cc757200f1335b9895ba64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":5700,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":5702,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":5704,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"adminAddr","offset":0,"slot":"3","type":"t_address"},{"astId":5706,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"marketingAddr","offset":0,"slot":"4","type":"t_address"},{"astId":5709,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"token","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":5712,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"},{"astId":5715,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"admin","offset":0,"slot":"7","type":"t_contract(ILuminaAdmin)2509"},{"astId":5717,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedChallenges","offset":20,"slot":"7","type":"t_uint64"},{"astId":5719,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedTokens","offset":0,"slot":"8","type":"t_uint256"},{"astId":5721,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallSuccessCnt","offset":0,"slot":"9","type":"t_uint64"},{"astId":5723,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallFailedCnt","offset":8,"slot":"9","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(ILuminaAdmin)2509":{"encoding":"inplace","label":"contract ILuminaAdmin","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},268:function(e){e.exports=JSON.parse('{"address":"0x640a7739bb05F90954E075E914E8dA28EC4f43cd","abi":[{"inputs":[{"internalType":"address","name":"erc20Addr_","type":"address"},{"internalType":"address","name":"progressingAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"availableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"erc20Addr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"notAvailableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"progressingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"withdrawnBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x718b9c2d3099d7e1fad75e6056d7e3d585393eecad102e1039c86851b16c071e","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x640a7739bb05F90954E075E914E8dA28EC4f43cd","transactionIndex":9,"gasUsed":"1577518","logsBloom":"0xblockHash":"0xd2eb367b4f210f1a737383e2ea413175144eb20195a404fc2f6db41b202f11f4","transactionHash":"0x718b9c2d3099d7e1fad75e6056d7e3d585393eecad102e1039c86851b16c071e","logs":[{"transactionIndex":9,"blockNumber":24636970,"transactionHash":"0x718b9c2d3099d7e1fad75e6056d7e3d585393eecad102e1039c86851b16c071e","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"],"data":"0x00000000000000000000000000000000000000000000000000a82253d2ca7738000000000000000000000000000000000000000000000020771d32e45a27d973000000000000000000000000000000000000000000000ce527b18419fdfa505300000000000000000000000000000000000000000000002076751090875d623b000000000000000000000000000000000000000000000ce52859a66dd0c4c78b","logIndex":56,"blockHash":"0xd2eb367b4f210f1a737383e2ea413175144eb20195a404fc2f6db41b202f11f4"}],"blockNumber":24636970,"cumulativeGasUsed":"3593111","status":1,"byzantium":true},"args":["0xEac48fc254dCb52C80d9D77013cc6AB961E7179D","0xA2062BDdBFA14e00a9cC97c9877b903b0138787B"],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"erc20Addr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"progressingAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"availableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"deposit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"erc20Addr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"notAvailableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"progressingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalLockedBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"withdrawAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"withdrawnBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/ProgressContractLocker.sol\\":\\"ProgressContractLocker\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressContractLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./ProgressLocker.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\ncontract ProgressContractLocker is ProgressLocker {\\\\n    address public progressingAddr;\\\\n    address public erc20Addr;\\\\n\\\\n    constructor(address erc20Addr_, address progressingAddr_)\\\\n        ProgressLocker(Utils.concat(\\\\\\"Locked \\\\\\", ERC20(erc20Addr_).name()), Utils.concat(\\\\\\"L\\\\\\", ERC20(erc20Addr_).symbol()), ERC20(erc20Addr_), Progressing(progressingAddr_)) {\\\\n        erc20Addr = erc20Addr_;\\\\n        progressingAddr = progressingAddr_;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2388f8f4656b942df92c307747b573a535c572ea88f646a9115660d348b77366\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\n\\\\nabstract contract ProgressLocker is ERC20 {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private erc20;\\\\n\\\\n    // Link to contract or object with progressing indicator\\\\n    Progressing private progressing;\\\\n\\\\n    // Mapping address to adjustment\\\\n    // Adjustment basically relects the amoutn withdrawn form the account\\\\n    // but it gets more compicated opnce you start tranferring locked tokens to other accounts\\\\n    //\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    //\\\\n    mapping (address => uint256) private _adjustment;\\\\n\\\\n    // True amount withdrawn from each account\\\\n    mapping (address => uint256) private _withdrawn;\\\\n\\\\n    constructor(string memory name_, string memory symbol_, IERC20 erc20_, Progressing progressing_)\\\\n        ERC20(name_, symbol_)\\\\n    {\\\\n        erc20 = erc20_;\\\\n        progressing = progressing_;\\\\n\\\\n        // Just check if all is good\\\\n        progressing.getProgress();\\\\n    }\\\\n\\\\n    function totalLockedBalance() public view returns (uint256) {\\\\n        uint256 total = erc20.balanceOf(address(this));\\\\n        return total;\\\\n    }\\\\n\\\\n    function deposit(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        address recipient = address(this);\\\\n        erc20.transferFrom(sender, recipient, amount);\\\\n        _mint(sender, amount);\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        (progress, progressMax) = progressing.getProgress();\\\\n        if(progress > 0) {\\\\n            require(progress < progressMax, \\\\\\"ProgressLocker: progress is 100%, it does not make any sense to deposit anymore\\\\\\");\\\\n            uint256 aamount = depositAdjustment(amount, progress, progressMax, decimals());\\\\n            _adjustment[sender] = _adjustment[sender].add(aamount);\\\\n        }\\\\n    }\\\\n\\\\n    // (amount + adj) * progress / progressMax == adj, therefore\\\\n    // adj = (amount * progress/progressMax) / (1 - progress/progressMax)\\\\n    function depositAdjustment(uint256 amount, uint256 progress, uint256 progressMax, uint8 decimals) private pure returns (uint256) {\\\\n        uint256 a = amount.mul(progress).div(progressMax);\\\\n        uint256 m = 10 ** decimals;\\\\n        uint256 p = m.mul(progress).div(progressMax);\\\\n        uint256 b = m.sub(p);\\\\n        uint256 adj = a.mul(m).div(b);\\\\n        return adj;\\\\n    }\\\\n\\\\n    function withdraw(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        uint256 available = availableBalanceOf(sender);\\\\n        require(amount <= available, \\\\\\"ProgressLocker: Withdrawal exceeds the available amount\\\\\\");\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    function withdrawAll() public {\\\\n        address sender = msg.sender;\\\\n        uint256 amount = availableBalanceOf(sender);\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    function availableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 balance = balanceOf(account);\\\\n        // Let\'s call progressing directly so we can test returned values\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        if(progress == 0) {\\\\n            return 0;\\\\n        }\\\\n        if(progress >= progressMax) {\\\\n            return balance;\\\\n        }\\\\n        uint256 adjustment = adjustmentBalanceOf(account);\\\\n        uint256 totalWithdraw = balance.add(adjustment).mul(progress).div(progressMax, \\\\\\"ProgressLocker: zero progressMax\\\\\\");\\\\n        if(totalWithdraw > adjustment) {\\\\n            return totalWithdraw.sub(adjustment);\\\\n        }\\\\n        return 0;\\\\n    }\\\\n\\\\n    function notAvailableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 total = balanceOf(account);\\\\n        uint256 available = availableBalanceOf(account);\\\\n        return total.sub(available);\\\\n    }\\\\n\\\\n    function withdrawnBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 withdrawn = _withdrawn[account];\\\\n        return withdrawn;\\\\n    }\\\\n\\\\n    function adjustmentBalanceOf(address account) private view returns (uint256) {\\\\n        uint256 adjustment = _adjustment[account];\\\\n        return adjustment;\\\\n    }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        uint256 balance = balanceOf(sender);\\\\n        super._transfer(sender, recipient, amount);\\\\n        if(amount > 0) {\\\\n            uint256 adjustment = adjustmentBalanceOf(sender);\\\\n            uint256 aamount = adjustment.mul(amount).div(balance, \\\\\\"ProgressLocker: zero balance\\\\\\");\\\\n            _adjustment[sender] = adjustment.sub(aamount);\\\\n            _adjustment[recipient] = _adjustment[recipient].add(aamount);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb0cb0afeebeb198b562830bf8886edf9ae9bc739a63900ee04f91400108347ae\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162001e9338038062001e93833981016040819052620000349162000461565b620000d26040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004af565b6200022e60201b62000c361760201c565b6200012f604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014b9291906200039e565b508051620001619060049060208401906200039e565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f191906200058b565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200065292505050565b8051825160609184918491600091620002489190620005c6565b6001600160401b0381111562000262576200026262000499565b6040519080825280601f01601f1916602001820160405280156200028d576020820181803683370190505b509050806000805b85518110156200031157858181518110620002b457620002b4620005e1565b01602001516001600160f81b0319168383620002d081620005f7565b945081518110620002e557620002e5620005e1565b60200101906001600160f81b031916908160001a905350806200030881620005f7565b91505062000295565b5060005b84518110156200039157848181518110620003345762000334620005e1565b01602001516001600160f81b03191683836200035081620005f7565b945081518110620003655762000365620005e1565b60200101906001600160f81b031916908160001a905350806200038881620005f7565b91505062000315565b5090979650505050505050565b828054620003ac9062000615565b90600052602060002090601f016020900481019282620003d057600085556200041b565b82601f10620003eb57805160ff19168380011785556200041b565b828001600101855582156200041b579182015b828111156200041b578251825591602001919060010190620003fe565b50620004299291506200042d565b5090565b5b808211156200042957600081556001016200042e565b80516001600160a01b03811681146200045c57600080fd5b919050565b600080604083850312156200047557600080fd5b620004808362000444565b9150620004906020840162000444565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004c357600080fd5b82516001600160401b0380821115620004db57600080fd5b818501915085601f830112620004f057600080fd5b81518181111562000505576200050562000499565b604051601f8201601f19908116603f0116810190838211818310171562000530576200053062000499565b8160405282815288868487010111156200054957600080fd5b600093505b828410156200056d57848401860151818501870152928501926200054e565b828411156200057f5760008684830101525b98975050505050505050565b600080604083850312156200059f57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005dc57620005dc620005b0565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200060e576200060e620005b0565b5060010190565b600181811c908216806200062a57607f821691505b602082108114156200064c57634e487b7160e01b600052602260045260246000fd5b50919050565b61183180620006626000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b604051610146919061144d565b60405180910390f35b61016261015d3660046114be565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b6101626101923660046114e8565b6103b7565b6101766101a5366004611524565b610466565b6101766105bf565b6101c56101c036600461153f565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f3660046114be565b6107a8565b610176610222366004611524565b6107e4565b610176610235366004611524565b6001600160a01b031660009081526020819052604090205490565b61017661025e366004611524565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b6101626102973660046114be565b610936565b6101626102aa3660046114be565b6109cf565b6101c56102bd36600461153f565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611558565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d9061158b565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061158b565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610d89565b5060015b92915050565b60006103c4848484610eae565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610d89565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906115c6565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610f8390919063ffffffff16565b90610f96565b9190610fa2565b9050818111156105b2576105a78183610fdc565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b191906115ea565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610f83565b6001600160a01b0385166000908152600860205260409020556107298486610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611603565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df90869061163b565b610d89565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610fdc565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610f83565b6001600160a01b0385166000908152600860205260409020556108a98484610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611603565b5050505050565b60606004805461031d9061158b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610d89565b5060019392505050565b60006103ad338484610eae565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611603565b50610a6a828461112e565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906115c6565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4891906115c6565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef868484601261120d565b6001600160a01b038616600090815260076020526040902054909150610c159082610f83565b6001600160a01b038616600090815260076020526040902055505050505050565b8051825160609184918491600091610c4e919061163b565b67ffffffffffffffff811115610c6657610c66611653565b6040519080825280601f01601f191660200182016040528015610c90576020820181803683370190505b509050806000805b8551811015610d0857858181518110610cb357610cb3611669565b01602001516001600160f81b0319168383610ccd8161167f565b945081518110610cdf57610cdf611669565b60200101906001600160f81b031916908160001a90535080610d008161167f565b915050610c98565b5060005b8451811015610d7c57848181518110610d2757610d27611669565b01602001516001600160f81b0319168383610d418161167f565b945081518110610d5357610d53611669565b60200101906001600160f81b031916908160001a90535080610d748161167f565b915050610d0c565b5090979650505050505050565b6001600160a01b038316610deb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610e4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610ed2848484611273565b8115610f7d576001600160a01b03841660009081526007602052604081205490506000610f42836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610f9690919063ffffffff16565b9050610f4e8282610fdc565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610f83565b50505050565b6000610f8f828461163b565b9392505050565b6000610f8f828461169a565b60008183610fc35760405162461bcd60e51b8152600401610445919061144d565b50828481610fd357610fd36116b9565b04949350505050565b6000610f8f82846116cf565b6001600160a01b0382166110485760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b038216600090815260208190526040902054818110156110bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b03831660009081526020819052604081208383039055600280548492906110eb9084906116cf565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ea1565b6001600160a01b0382166111845760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b8060026000828254611196919061163b565b90915550506001600160a01b038216600090815260208190526040812080548392906111c390849061163b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806112248461121e8888610f96565b90611441565b9050600061123384600a6117ca565b905060006112458661121e848a610f96565b905060006112538383610fdc565b905060006112658261121e8787610f96565b9a9950505050505050505050565b6001600160a01b0383166112d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166113395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b038316600090815260208190526040902054818110156113b15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113e890849061163b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161143491815260200190565b60405180910390a3610f7d565b6000610f8f82846117d9565b600060208083528351808285015260005b8181101561147a5785810183015185820160400152820161145e565b8181111561148c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146114b957600080fd5b919050565b600080604083850312156114d157600080fd5b6114da836114a2565b946020939093013593505050565b6000806000606084860312156114fd57600080fd5b611506846114a2565b9250611514602085016114a2565b9150604084013590509250925092565b60006020828403121561153657600080fd5b610f8f826114a2565b60006020828403121561155157600080fd5b5035919050565b6000806040838503121561156b57600080fd5b611574836114a2565b9150611582602084016114a2565b90509250929050565b600181811c9082168061159f57607f821691505b602082108114156115c057634e487b7160e01b600052602260045260246000fd5b50919050565b600080604083850312156115d957600080fd5b505080516020909101519092909150565b6000602082840312156115fc57600080fd5b5051919050565b60006020828403121561161557600080fd5b81518015158114610f8f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561164e5761164e611625565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561169357611693611625565b5060010190565b60008160001904831182151516156116b4576116b4611625565b500290565b634e487b7160e01b600052601260045260246000fd5b6000828210156116e1576116e1611625565b500390565b600181815b8085111561172157816000190482111561170757611707611625565b8085161561171457918102915b93841c93908002906116eb565b509250929050565b600082611738575060016103b1565b81611745575060006103b1565b816001811461175b576002811461176557611781565b60019150506103b1565b60ff84111561177657611776611625565b50506001821b6103b1565b5060208310610133831016604e8410600b84101617156117a4575081810a6103b1565b6117ae83836116e6565b80600019048211156117c2576117c2611625565b029392505050565b6000610f8f60ff841683611729565b6000826117f657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b73d4d7bf08bbb87de03a90044f68daf352fc2733aa3026cb0d16719a86d2d1b64736f6c634300080b0033","deployedBytecode":"","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":6986,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":6989,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressing","offset":0,"slot":"6","type":"t_contract(Progressing)7512"},{"astId":6993,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_adjustment","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":6997,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_withdrawn","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":6927,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressingAddr","offset":0,"slot":"9","type":"t_address"},{"astId":6929,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20Addr","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(Progressing)7512":{"encoding":"inplace","label":"contract Progressing","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},269:function(e){e.exports=JSON.parse('{"address":"0x806c9272969E34BBA582Cb4AA4992d0987588d9C","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"CampaignClaimFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"address","name":"tokenAddr","type":"address"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"TokenCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"_claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"}],"name":"addBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"addCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"getCampaign","outputs":[{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"},{"internalType":"uint8","name":"campaignId","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCampaigns","outputs":[{"internalType":"address[]","name":"campaigns","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLuminaFund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"address","name":"referrer","type":"address"}],"name":"referral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"startCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"stopCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0xb86b15c62354af0e9bb239a8b230f6fe13cd3d6347aa4064306afcd5a6db9358","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x806c9272969E34BBA582Cb4AA4992d0987588d9C","transactionIndex":27,"gasUsed":"2328532","logsBloom":"0xblockHash":"0x5a8fdde4cb7f6daa3d341e5643206b0ea339a8ec5aa81dd47d5d430bd7a10b91","transactionHash":"0xb86b15c62354af0e9bb239a8b230f6fe13cd3d6347aa4064306afcd5a6db9358","logs":[{"transactionIndex":27,"blockNumber":24636975,"transactionHash":"0xb86b15c62354af0e9bb239a8b230f6fe13cd3d6347aa4064306afcd5a6db9358","address":"0x806c9272969E34BBA582Cb4AA4992d0987588d9C","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":96,"blockHash":"0x5a8fdde4cb7f6daa3d341e5643206b0ea339a8ec5aa81dd47d5d430bd7a10b91"},{"transactionIndex":27,"blockNumber":24636975,"transactionHash":"0xb86b15c62354af0e9bb239a8b230f6fe13cd3d6347aa4064306afcd5a6db9358","address":"0x806c9272969E34BBA582Cb4AA4992d0987588d9C","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":97,"blockHash":"0x5a8fdde4cb7f6daa3d341e5643206b0ea339a8ec5aa81dd47d5d430bd7a10b91"},{"transactionIndex":27,"blockNumber":24636975,"transactionHash":"0xb86b15c62354af0e9bb239a8b230f6fe13cd3d6347aa4064306afcd5a6db9358","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"],"data":"0x00000000000000000000000000000000000000000000000000f82d9ff5a9d5f80000000000000000000000000000000000000000000000207675109069a6f173000000000000000000000000000000000000000000000ce5405767bd991c21d5000000000000000000000000000000000000000000000020757ce2f073fd1b7b000000000000000000000000000000000000000000000ce5414f955d8ec5f7cd","logIndex":98,"blockHash":"0x5a8fdde4cb7f6daa3d341e5643206b0ea339a8ec5aa81dd47d5d430bd7a10b91"}],"blockNumber":24636975,"cumulativeGasUsed":"5381493","status":1,"byzantium":true},"args":["0xEac48fc254dCb52C80d9D77013cc6AB961E7179D"],"solcInputHash":"39a388dbaa9348799d7d3ad9780be0e3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"CampaignClaimFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"TokenCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"_claim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"addBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCampaign\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"campaignId\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getCampaigns\\",\\"outputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"campaigns\\",\\"type\\":\\"address[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"isLuminaFund\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"referrer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"referral\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"startCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"stopCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaMarketing.sol\\":\\"LuminaMarketing\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaCampaign.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaCampaign {\\\\n\\\\n    function _hasReferral(address user) external view returns (bool); // onlyMarketing\\\\n    function _referral(address referrer, address sender, uint256 tokenBudget, uint256 ethBudget) external returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc, uint256 tokenBudget, uint256 ethBudget) external returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52b2c386db7350d7c31a107d6b04ea93d89e5844d156a0cd576eb182022e6cfa\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaCampaign.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\n\\\\ncontract LuminaMarketing is ILuminaMarketing, ILuminaFund, Parameters, Ownable, Pausable, OnlyTrustee {\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n\\\\n    struct CampaignRecord {\\\\n        uint256 tokenBudget;\\\\n        uint256 ethBudget;\\\\n        uint8 campaignId;\\\\n        bool valid;\\\\n        bool active;\\\\n    }\\\\n\\\\n    // Unallocated Budgets\\\\n    uint256 private _totalTokenBudget;\\\\n    uint256 private _totalEthBudget;\\\\n\\\\n    // Campaigns\\\\n    address[] private _campaigns;\\\\n    mapping (address => CampaignRecord) private _campaignsMap;\\\\n\\\\n    // Events\\\\n    event CampaignClaimFailed(address campaignAddr, uint64 blockNumber, string message);\\\\n    event TokenCallFailed(address campaignAddr, address tokenAddr, string message);\\\\n\\\\n    constructor(address tokenAddr_) {\\\\n        pause();\\\\n        tokenAddr = tokenAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function owner() public view virtual override(ILuminaMarketing, Ownable) returns (address) {\\\\n        return super.owner();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function isLuminaFund() public pure returns (bool) {\\\\n        return true;\\\\n    }\\\\n\\\\n    function getCampaigns() public view returns (address[] memory campaigns) {\\\\n        campaigns = _campaigns;\\\\n    }\\\\n\\\\n    // This contract can receive eth\\\\n    receive() external payable {}\\\\n\\\\n    function getCampaign(address campaignAddr) public view returns (uint256 tokenBudget, uint256 ethBudget, uint8 campaignId, bool valid, bool active) {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        tokenBudget = cr.tokenBudget;\\\\n        ethBudget = cr.ethBudget;\\\\n        campaignId = cr.campaignId;\\\\n        valid = cr.valid;\\\\n        active = cr.active;\\\\n    }\\\\n\\\\n    function addCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(!cr.valid, \\\\\\"The campaign with this contract address already exists\\\\\\");\\\\n        require(_campaigns.length < 256, \\\\\\"No more campaigns are allowed\\\\\\");\\\\n        cr.valid = true;\\\\n        cr.campaignId = uint8(_campaigns.length);\\\\n        _campaigns.push(campaignAddr);\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n    }\\\\n\\\\n    function removeCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        removeBudget(campaignAddr);\\\\n        address movingAddr = _campaigns[_campaigns.length-1];\\\\n        require(_campaignsMap[movingAddr].valid, \\\\\\"Incosistent campaign data\\\\\\");\\\\n        _campaignsMap[movingAddr].campaignId = cr.campaignId;\\\\n        _campaigns[cr.campaignId] = movingAddr;\\\\n        _campaigns.pop();\\\\n        cr.valid = false;\\\\n        delete _campaignsMap[campaignAddr];\\\\n    }\\\\n\\\\n    function addBudget(address campaignAddr, uint256 tokenBudget, uint256 ethBudget) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(token.balanceOf(address(this)) >= _totalTokenBudget + tokenBudget, \\\\\\"Insufficient token balance\\\\\\");\\\\n        require(address(this).balance >= _totalEthBudget + ethBudget, \\\\\\"Insufficient eth balance\\\\\\");\\\\n        _totalTokenBudget += tokenBudget;\\\\n        _totalEthBudget += ethBudget;\\\\n        cr.tokenBudget += tokenBudget;\\\\n        cr.ethBudget += ethBudget;\\\\n    }\\\\n\\\\n    function removeBudget(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(_totalTokenBudget >= cr.tokenBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        require(_totalEthBudget >= cr.ethBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        _totalTokenBudget -= cr.tokenBudget;\\\\n        _totalEthBudget -= cr.ethBudget;\\\\n        cr.tokenBudget = 0;\\\\n        cr.ethBudget = 0;\\\\n    }\\\\n\\\\n    function startCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = true;\\\\n    }\\\\n\\\\n    function stopCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = false;\\\\n    }\\\\n\\\\n    function hasReferral(address campaignAddr) external view returns (bool) {\\\\n        require(!paused(), \\\\\\"The marketing contract is paused\\\\\\");\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(cr.active, \\\\\\"The campaign is not active\\\\\\");\\\\n        ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n        return luminaCampaign._hasReferral(msg.sender);\\\\n    }\\\\n\\\\n    function referral(address campaignAddr, address referrer) external {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        if(cr.active) {\\\\n            ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n            (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) = luminaCampaign._referral(referrer, msg.sender, cr.tokenBudget, cr.ethBudget);\\\\n            _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n        }\\\\n    }\\\\n\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external onlyTrustee {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        for(uint32 i = 0; i < _campaigns.length; i++) {\\\\n            address campaignAddr = _campaigns[i];\\\\n            CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n            require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n            require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n            if(cr.active) {\\\\n                ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n                try luminaCampaign._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc, cr.tokenBudget, cr.ethBudget)\\\\n                returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n                    _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n                } catch Error(string memory message) {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, message);\\\\n                } catch {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _payCommisions(address campaignAddr, CampaignRecord storage cr, address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) private {\\\\n        for(uint j = 0; j < recipients.length; j++) {\\\\n            address payable recipient = recipients[j];\\\\n            if(recipient != address(0)) {\\\\n                if(j < tokenCommisions.length) {\\\\n                    uint256 tokenCommision = tokenCommisions[j];\\\\n                    if(tokenCommision > 0 && cr.tokenBudget >= tokenCommision) {\\\\n                        try token.transfer(recipient, tokenCommision) {\\\\n                            cr.tokenBudget -= tokenCommision;\\\\n                            _totalTokenBudget -= tokenCommision;\\\\n                        } catch Error(string memory message) {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, message);\\\\n                        } catch {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, \\\\\\"\\\\\\");\\\\n                        }\\\\n                    }\\\\n                }\\\\n                if(j < ethCommisions.length) {\\\\n                    uint256 ethCommision = ethCommisions[j];\\\\n                    if(ethCommision > 0 && cr.ethBudget >= ethCommision && address(this).balance >= ethCommision) {\\\\n                        recipient.transfer(ethCommision);\\\\n                        cr.ethBudget -= ethCommision;\\\\n                        _totalEthBudget -= ethCommision;\\\\n                    }\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa77a95de5989765fb9c010a1a3c377d504635e06b38d89fd00ead3c31cfa7990\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = false;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc8321ceb1a53930afe0efdbc6cc0080b00ced0e54ccf632e07cd2de32f41a954\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620029d6380380620029d6833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001b001760201c565b565b60006200017d6200023160201b62001ba51760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61275480620002826000396000f3fe6080604052600436106102605760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106c6578063e4663a5b146106e6578063e81ec61214610706578063ec2165d31461071b578063f2fde38b14610730578063f883fcaa1461067257600080fd5b8063b91268e81461065d578063c28bd11c14610672578063c28cedf314610687578063c6088d971461069c578063df71f990146106b257600080fd5b80639d941362116101085780639d94136214610554578063a2157767146105dc578063a5c9cd82146105f1578063a6b0363314610606578063ac9c4fd314610628578063b313bd621461064857600080fd5b8063777b0c21146105695780637fb012321461042657806382e51bd0146105895780638456cb59146105a95780638da5cb5b146105be57600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb146104505780635fbe4d1d1461047b5780636bb987fe1461049b578063715018a6146104b1578063731301cf146104c657806373d6aafa1461055457600080fd5b80633e6e387c146103e65780633f4ba83a146103fc578063479e92c814610411578063504b3662146104265780635b7f415c1461043b57600080fd5b80631df55679116102245780631df5567914610335578063270d8e0e146103555780632713b9601461037557806330db4fa0146103955780633a3a7c53146103c357600080fd5b806306e386321461026c5780630bf433091461029a57806314270b65146102c157806318f053da146102f35780631c505d1d1461031557600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610282610a8c81565b60405161ffff90911681526020015b60405180910390f35b3480156102a657600080fd5b506102af60da81565b60405160ff9091168152602001610291565b3480156102cd57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610291565b3480156102ff57600080fd5b5061031361030e366004611f95565b610750565b005b34801561032157600080fd5b50610313610330366004611fb9565b6108fe565b34801561034157600080fd5b50610313610350366004611f95565b610a74565b34801561036157600080fd5b50610313610370366004611ff2565b610ba1565b34801561038157600080fd5b50610313610390366004612027565b610df4565b3480156103a157600080fd5b506103aa60c881565b60405167ffffffffffffffff9091168152602001610291565b3480156103cf57600080fd5b506103d861111a565b604051908152602001610291565b3480156103f257600080fd5b506102826101f481565b34801561040857600080fd5b50610313611134565b34801561041d57600080fd5b506102af601481565b34801561043257600080fd5b506102af606481565b34801561044757600080fd5b506102af601281565b34801561045c57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610291565b34801561048757600080fd5b506003546102db906001600160a01b031681565b3480156104a757600080fd5b506103aa61996881565b3480156104bd57600080fd5b50610313611168565b3480156104d257600080fd5b506105226104e1366004611f95565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a001610291565b34801561056057600080fd5b50610282600a81565b34801561057557600080fd5b50610313610584366004611f95565b6111e7565b34801561059557600080fd5b506103136105a4366004611f95565b6112ba565b3480156105b557600080fd5b50610313611392565b3480156105ca57600080fd5b506000546001600160a01b03166102db565b3480156105e857600080fd5b506102af60ff81565b3480156105fd57600080fd5b506103d86113c4565b34801561061257600080fd5b5061061b6113d0565b60405161029191906120b4565b34801561063457600080fd5b50610313610643366004611f95565b611432565b34801561065457600080fd5b506103aa600281565b34801561066957600080fd5b506103d8611600565b34801561067e57600080fd5b506102af600281565b34801561069357600080fd5b5061046b600081565b3480156106a857600080fd5b506102826103e881565b3480156106be57600080fd5b50600161046b565b3480156106d257600080fd5b5061046b6106e1366004611f95565b611622565b3480156106f257600080fd5b50610313610701366004611f95565b6117e2565b34801561071257600080fd5b506103d8611a40565b34801561072757600080fd5b506103aa611a58565b34801561073c57600080fd5b5061031361074b366004611f95565b611a65565b6000546001600160a01b031633146107835760405162461bcd60e51b815260040161077a90612101565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107c45760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106107ea576107ea61216d565b6000918252602090912001546001600160a01b03161461081c5760405162461bcd60e51b815260040161077a90612183565b8054600554101561086a5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b604482015260640161077a565b806001015460065410156108bb5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b604482015260640161077a565b8054600580546000906108cf9084906121d0565b90915550506001810154600680546000906108eb9084906121d0565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610914575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109555760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0386169260ff1690811061097b5761097b61216d565b6000918252602090912001546001600160a01b0316146109ad5760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff1615610a6f57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5791908101906122bf565b925092509250610a6a8786858585611bb4565b505050505b505050565b6001546001600160a01b03163314610af45760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e7472616374000000000000000000606482015260840161077a565b6002546001600160a01b031615610b735760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e2061747461636865640000000000606482015260840161077a565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bcb5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c0c5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0387169260ff16908110610c3257610c3261216d565b6000918252602090912001546001600160a01b031614610c645760405162461bcd60e51b815260040161077a90612183565b82600554610c7291906123b3565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906123cb565b1015610d2d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161077a565b81600654610d3b91906123b3565b471015610d8a5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e63650000000000000000604482015260640161077a565b8260056000828254610d9c91906123b3565b925050819055508160066000828254610db591906123b3565b9091555050805483908290600090610dce9084906123b3565b9250508190555081816001016000828254610de991906123b3565b909155505050505050565b6002546001600160a01b03163314610e6a5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b606482015260840161077a565b600054600160a01b900460ff1615610e8157611113565b60005b60075463ffffffff8216101561111157600060078263ffffffff1681548110610eaf57610eaf61216d565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610f015760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff16908110610f2757610f2761216d565b6000918252602090912001546001600160a01b031614610f595760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff16156110fc57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561101b57506040513d6000823e601f3d908101601f1916820160405261101891908101906122bf565b60015b6110e9576110276123e4565b806308c379a01415611088575061103c612400565b80611047575061108a565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b8360405161107a939291906124d7565b60405180910390a1506110fa565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a16110fa565b6110f68686858585611bb4565b5050505b505b5050808061110990612514565b915050610e84565b505b5050505050565b61112660036012612538565b61113190600a612641565b81565b6000546001600160a01b0316331461115e5760405162461bcd60e51b815260040161077a90612101565b611166611e7c565b565b6000546001600160a01b031633146111925760405162461bcd60e51b815260040161077a90612101565b600054600160a01b900460ff16156111df5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161077a565b611166611f00565b6000546001600160a01b031633146112115760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112525760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106112785761127861216d565b6000918252602090912001546001600160a01b0316146112aa5760405162461bcd60e51b815260040161077a90612183565b600201805462ff00001916905550565b6000546001600160a01b031633146112e45760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113255760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff1690811061134b5761134b61216d565b6000918252602090912001546001600160a01b03161461137d5760405162461bcd60e51b815260040161077a90612183565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113bc5760405162461bcd60e51b815260040161077a90612101565b611166611b00565b6111316012600a612641565b6060600780548060200260200160405190810160405280929190818152602001828054801561142857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161140a575b5050505050905090565b6000546001600160a01b0316331461145c5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114ed5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b606482015260840161077a565b600754610100116115405760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f776564000000604482015260640161077a565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115ca576115ca61216d565b6000918252602090912001546001600160a01b0316146115fc5760405162461bcd60e51b815260040161077a90612183565b5050565b61160c60036012612538565b61161790600a612641565b61113190600a612650565b60008054600160a01b900460ff161561167d5760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e747261637420697320706175736564604482015260640161077a565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116be5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0386169260ff169081106116e4576116e461216d565b6000918252602090912001546001600160a01b0316146117165760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff166117705760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f7420616374697665000000000000604482015260640161077a565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da919061266f565b949350505050565b6000546001600160a01b0316331461180c5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661184d5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106118735761187361216d565b6000918252602090912001546001600160a01b0316146118a55760405162461bcd60e51b815260040161077a90612183565b6118ae82610750565b60078054600091906118c2906001906121d0565b815481106118d2576118d261216d565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166119525760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e206461746100000000000000604482015260640161077a565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff93841617905554600780548493919290911690811061199d5761199d61216d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119dc576119dc612691565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a4c6012600a612641565b611131906103e8612650565b61113161996860076126a7565b6000546001600160a01b03163314611a8f5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b038116611af45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161077a565b611afd81611f30565b50565b600054600160a01b900460ff1615611b4d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161077a565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b883390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b8351811015611111576000848281518110611bd457611bd461216d565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e69578351821015611db1576000848381518110611c1557611c1561216d565b60200260200101519050600081118015611c30575086548111155b15611daf576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611ca6575060408051601f3d908101601f19168201909252611ca39181019061266f565b60015b611d7b57611cb26123e4565b806308c379a01415611d1f5750611cc7612400565b80611cd25750611d21565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d11918c916001600160a01b03169085906126d7565b60405180910390a150611daf565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611daf565b5080876000016000828254611d9091906121d0565b925050819055508060056000828254611da991906121d0565b90915550505b505b8251821015611e69576000838381518110611dce57611dce61216d565b60200260200101519050600081118015611dec575080876001015410155b8015611df85750804710155b15611e67576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e33573d6000803e3d6000fd5b5080876001016000828254611e4891906121d0565b925050819055508060066000828254611e6191906121d0565b90915550505b505b5080611e7481612703565b915050611bb7565b600054600160a01b900460ff16611ecc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161077a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b88565b6000546001600160a01b03163314611f2a5760405162461bcd60e51b815260040161077a90612101565b61116660005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611afd57600080fd5b600060208284031215611fa757600080fd5b8135611fb281611f80565b9392505050565b60008060408385031215611fcc57600080fd5b8235611fd781611f80565b91506020830135611fe781611f80565b809150509250929050565b60008060006060848603121561200757600080fd5b833561201281611f80565b95602085013595506040909401359392505050565b600080600080600060a0868803121561203f57600080fd5b853567ffffffffffffffff8116811461205757600080fd5b9450602086013561206781611f80565b9350604086013561207781611f80565b9250606086013563ffffffff8116811461209057600080fd5b9150608086013560ff811681146120a657600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120f55783516001600160a01b0316835292840192918401916001016120d0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121e2576121e26121ba565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612223576122236121e7565b6040525050565b600067ffffffffffffffff821115612244576122446121e7565b5060051b60200190565b600082601f83011261225f57600080fd5b8151602061226c8261222a565b60405161227982826121fd565b83815260059390931b850182019282810191508684111561229957600080fd5b8286015b848110156122b4578051835291830191830161229d565b509695505050505050565b6000806000606084860312156122d457600080fd5b835167ffffffffffffffff808211156122ec57600080fd5b818601915086601f83011261230057600080fd5b8151602061230d8261222a565b60405161231a82826121fd565b83815260059390931b850182019282810191508a84111561233a57600080fd5b948201945b8386101561236157855161235281611f80565b8252948201949082019061233f565b9189015191975090935050508082111561237a57600080fd5b6123868783880161224e565b9350604086015191508082111561239c57600080fd5b506123a98682870161224e565b9150509250925092565b600082198211156123c6576123c66121ba565b500190565b6000602082840312156123dd57600080fd5b5051919050565b600060033d11156123fd5760046000803e5060005160e01c5b90565b600060443d101561240e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561243e57505050505090565b82850191508151818111156124565750505050505090565b843d87010160208285010111156124705750505050505090565b61247f602082860101876121fd565b509095945050505050565b6000815180845260005b818110156124b057602081850181015186830182015201612494565b818111156124c2576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061250b9083018461248a565b95945050505050565b600063ffffffff8083168181141561252e5761252e6121ba565b6001019392505050565b600060ff821660ff841680821015612552576125526121ba565b90039392505050565b600181815b8085111561259657816000190482111561257c5761257c6121ba565b8085161561258957918102915b93841c9390800290612560565b509250929050565b6000826125ad5750600161263b565b816125ba5750600061263b565b81600181146125d057600281146125da576125f6565b600191505061263b565b60ff8411156125eb576125eb6121ba565b50506001821b61263b565b5060208310610133831016604e8410600b8410161715612619575081810a61263b565b612623838361255b565b8060001904821115612637576126376121ba565b0290505b92915050565b6000611fb260ff84168361259e565b600081600019048311821515161561266a5761266a6121ba565b500290565b60006020828403121561268157600080fd5b81518015158114611fb257600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126ce576126ce6121ba565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061250b9083018461248a565b6000600019821415612717576127176121ba565b506001019056fea2646970667358221220099e0aafaa1468584f6ac74c1df988d737a01a7045267156358d75aa7dab603664736f6c634300080b0033","deployedBytecode":"0x6080604052600436106102605760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106c6578063e4663a5b146106e6578063e81ec61214610706578063ec2165d31461071b578063f2fde38b14610730578063f883fcaa1461067257600080fd5b8063b91268e81461065d578063c28bd11c14610672578063c28cedf314610687578063c6088d971461069c578063df71f990146106b257600080fd5b80639d941362116101085780639d94136214610554578063a2157767146105dc578063a5c9cd82146105f1578063a6b0363314610606578063ac9c4fd314610628578063b313bd621461064857600080fd5b8063777b0c21146105695780637fb012321461042657806382e51bd0146105895780638456cb59146105a95780638da5cb5b146105be57600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb146104505780635fbe4d1d1461047b5780636bb987fe1461049b578063715018a6146104b1578063731301cf146104c657806373d6aafa1461055457600080fd5b80633e6e387c146103e65780633f4ba83a146103fc578063479e92c814610411578063504b3662146104265780635b7f415c1461043b57600080fd5b80631df55679116102245780631df5567914610335578063270d8e0e146103555780632713b9601461037557806330db4fa0146103955780633a3a7c53146103c357600080fd5b806306e386321461026c5780630bf433091461029a57806314270b65146102c157806318f053da146102f35780631c505d1d1461031557600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610282610a8c81565b60405161ffff90911681526020015b60405180910390f35b3480156102a657600080fd5b506102af60da81565b60405160ff9091168152602001610291565b3480156102cd57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610291565b3480156102ff57600080fd5b5061031361030e366004611f95565b610750565b005b34801561032157600080fd5b50610313610330366004611fb9565b6108fe565b34801561034157600080fd5b50610313610350366004611f95565b610a74565b34801561036157600080fd5b50610313610370366004611ff2565b610ba1565b34801561038157600080fd5b50610313610390366004612027565b610df4565b3480156103a157600080fd5b506103aa60c881565b60405167ffffffffffffffff9091168152602001610291565b3480156103cf57600080fd5b506103d861111a565b604051908152602001610291565b3480156103f257600080fd5b506102826101f481565b34801561040857600080fd5b50610313611134565b34801561041d57600080fd5b506102af601481565b34801561043257600080fd5b506102af606481565b34801561044757600080fd5b506102af601281565b34801561045c57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610291565b34801561048757600080fd5b506003546102db906001600160a01b031681565b3480156104a757600080fd5b506103aa61996881565b3480156104bd57600080fd5b50610313611168565b3480156104d257600080fd5b506105226104e1366004611f95565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a001610291565b34801561056057600080fd5b50610282600a81565b34801561057557600080fd5b50610313610584366004611f95565b6111e7565b34801561059557600080fd5b506103136105a4366004611f95565b6112ba565b3480156105b557600080fd5b50610313611392565b3480156105ca57600080fd5b506000546001600160a01b03166102db565b3480156105e857600080fd5b506102af60ff81565b3480156105fd57600080fd5b506103d86113c4565b34801561061257600080fd5b5061061b6113d0565b60405161029191906120b4565b34801561063457600080fd5b50610313610643366004611f95565b611432565b34801561065457600080fd5b506103aa600281565b34801561066957600080fd5b506103d8611600565b34801561067e57600080fd5b506102af600281565b34801561069357600080fd5b5061046b600081565b3480156106a857600080fd5b506102826103e881565b3480156106be57600080fd5b50600161046b565b3480156106d257600080fd5b5061046b6106e1366004611f95565b611622565b3480156106f257600080fd5b50610313610701366004611f95565b6117e2565b34801561071257600080fd5b506103d8611a40565b34801561072757600080fd5b506103aa611a58565b34801561073c57600080fd5b5061031361074b366004611f95565b611a65565b6000546001600160a01b031633146107835760405162461bcd60e51b815260040161077a90612101565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107c45760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106107ea576107ea61216d565b6000918252602090912001546001600160a01b03161461081c5760405162461bcd60e51b815260040161077a90612183565b8054600554101561086a5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b604482015260640161077a565b806001015460065410156108bb5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b604482015260640161077a565b8054600580546000906108cf9084906121d0565b90915550506001810154600680546000906108eb9084906121d0565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610914575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109555760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0386169260ff1690811061097b5761097b61216d565b6000918252602090912001546001600160a01b0316146109ad5760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff1615610a6f57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5791908101906122bf565b925092509250610a6a8786858585611bb4565b505050505b505050565b6001546001600160a01b03163314610af45760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e7472616374000000000000000000606482015260840161077a565b6002546001600160a01b031615610b735760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e2061747461636865640000000000606482015260840161077a565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bcb5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c0c5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0387169260ff16908110610c3257610c3261216d565b6000918252602090912001546001600160a01b031614610c645760405162461bcd60e51b815260040161077a90612183565b82600554610c7291906123b3565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906123cb565b1015610d2d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161077a565b81600654610d3b91906123b3565b471015610d8a5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e63650000000000000000604482015260640161077a565b8260056000828254610d9c91906123b3565b925050819055508160066000828254610db591906123b3565b9091555050805483908290600090610dce9084906123b3565b9250508190555081816001016000828254610de991906123b3565b909155505050505050565b6002546001600160a01b03163314610e6a5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b606482015260840161077a565b600054600160a01b900460ff1615610e8157611113565b60005b60075463ffffffff8216101561111157600060078263ffffffff1681548110610eaf57610eaf61216d565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610f015760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff16908110610f2757610f2761216d565b6000918252602090912001546001600160a01b031614610f595760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff16156110fc57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561101b57506040513d6000823e601f3d908101601f1916820160405261101891908101906122bf565b60015b6110e9576110276123e4565b806308c379a01415611088575061103c612400565b80611047575061108a565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b8360405161107a939291906124d7565b60405180910390a1506110fa565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a16110fa565b6110f68686858585611bb4565b5050505b505b5050808061110990612514565b915050610e84565b505b5050505050565b61112660036012612538565b61113190600a612641565b81565b6000546001600160a01b0316331461115e5760405162461bcd60e51b815260040161077a90612101565b611166611e7c565b565b6000546001600160a01b031633146111925760405162461bcd60e51b815260040161077a90612101565b600054600160a01b900460ff16156111df5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161077a565b611166611f00565b6000546001600160a01b031633146112115760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112525760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106112785761127861216d565b6000918252602090912001546001600160a01b0316146112aa5760405162461bcd60e51b815260040161077a90612183565b600201805462ff00001916905550565b6000546001600160a01b031633146112e45760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113255760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff1690811061134b5761134b61216d565b6000918252602090912001546001600160a01b03161461137d5760405162461bcd60e51b815260040161077a90612183565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113bc5760405162461bcd60e51b815260040161077a90612101565b611166611b00565b6111316012600a612641565b6060600780548060200260200160405190810160405280929190818152602001828054801561142857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161140a575b5050505050905090565b6000546001600160a01b0316331461145c5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114ed5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b606482015260840161077a565b600754610100116115405760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f776564000000604482015260640161077a565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115ca576115ca61216d565b6000918252602090912001546001600160a01b0316146115fc5760405162461bcd60e51b815260040161077a90612183565b5050565b61160c60036012612538565b61161790600a612641565b61113190600a612650565b60008054600160a01b900460ff161561167d5760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e747261637420697320706175736564604482015260640161077a565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116be5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0386169260ff169081106116e4576116e461216d565b6000918252602090912001546001600160a01b0316146117165760405162461bcd60e51b815260040161077a90612183565b600281015462010000900460ff166117705760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f7420616374697665000000000000604482015260640161077a565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da919061266f565b949350505050565b6000546001600160a01b0316331461180c5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661184d5760405162461bcd60e51b815260040161077a90612136565b6002810154600780546001600160a01b0385169260ff169081106118735761187361216d565b6000918252602090912001546001600160a01b0316146118a55760405162461bcd60e51b815260040161077a90612183565b6118ae82610750565b60078054600091906118c2906001906121d0565b815481106118d2576118d261216d565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166119525760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e206461746100000000000000604482015260640161077a565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff93841617905554600780548493919290911690811061199d5761199d61216d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119dc576119dc612691565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a4c6012600a612641565b611131906103e8612650565b61113161996860076126a7565b6000546001600160a01b03163314611a8f5760405162461bcd60e51b815260040161077a90612101565b6001600160a01b038116611af45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161077a565b611afd81611f30565b50565b600054600160a01b900460ff1615611b4d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161077a565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b883390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b8351811015611111576000848281518110611bd457611bd461216d565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e69578351821015611db1576000848381518110611c1557611c1561216d565b60200260200101519050600081118015611c30575086548111155b15611daf576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611ca6575060408051601f3d908101601f19168201909252611ca39181019061266f565b60015b611d7b57611cb26123e4565b806308c379a01415611d1f5750611cc7612400565b80611cd25750611d21565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d11918c916001600160a01b03169085906126d7565b60405180910390a150611daf565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611daf565b5080876000016000828254611d9091906121d0565b925050819055508060056000828254611da991906121d0565b90915550505b505b8251821015611e69576000838381518110611dce57611dce61216d565b60200260200101519050600081118015611dec575080876001015410155b8015611df85750804710155b15611e67576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e33573d6000803e3d6000fd5b5080876001016000828254611e4891906121d0565b925050819055508060066000828254611e6191906121d0565b90915550505b505b5080611e7481612703565b915050611bb7565b600054600160a01b900460ff16611ecc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161077a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b88565b6000546001600160a01b03163314611f2a5760405162461bcd60e51b815260040161077a90612101565b61116660005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611afd57600080fd5b600060208284031215611fa757600080fd5b8135611fb281611f80565b9392505050565b60008060408385031215611fcc57600080fd5b8235611fd781611f80565b91506020830135611fe781611f80565b809150509250929050565b60008060006060848603121561200757600080fd5b833561201281611f80565b95602085013595506040909401359392505050565b600080600080600060a0868803121561203f57600080fd5b853567ffffffffffffffff8116811461205757600080fd5b9450602086013561206781611f80565b9350604086013561207781611f80565b9250606086013563ffffffff8116811461209057600080fd5b9150608086013560ff811681146120a657600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120f55783516001600160a01b0316835292840192918401916001016120d0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121e2576121e26121ba565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612223576122236121e7565b6040525050565b600067ffffffffffffffff821115612244576122446121e7565b5060051b60200190565b600082601f83011261225f57600080fd5b8151602061226c8261222a565b60405161227982826121fd565b83815260059390931b850182019282810191508684111561229957600080fd5b8286015b848110156122b4578051835291830191830161229d565b509695505050505050565b6000806000606084860312156122d457600080fd5b835167ffffffffffffffff808211156122ec57600080fd5b818601915086601f83011261230057600080fd5b8151602061230d8261222a565b60405161231a82826121fd565b83815260059390931b850182019282810191508a84111561233a57600080fd5b948201945b8386101561236157855161235281611f80565b8252948201949082019061233f565b9189015191975090935050508082111561237a57600080fd5b6123868783880161224e565b9350604086015191508082111561239c57600080fd5b506123a98682870161224e565b9150509250925092565b600082198211156123c6576123c66121ba565b500190565b6000602082840312156123dd57600080fd5b5051919050565b600060033d11156123fd5760046000803e5060005160e01c5b90565b600060443d101561240e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561243e57505050505090565b82850191508151818111156124565750505050505090565b843d87010160208285010111156124705750505050505090565b61247f602082860101876121fd565b509095945050505050565b6000815180845260005b818110156124b057602081850181015186830182015201612494565b818111156124c2576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061250b9083018461248a565b95945050505050565b600063ffffffff8083168181141561252e5761252e6121ba565b6001019392505050565b600060ff821660ff841680821015612552576125526121ba565b90039392505050565b600181815b8085111561259657816000190482111561257c5761257c6121ba565b8085161561258957918102915b93841c9390800290612560565b509250929050565b6000826125ad5750600161263b565b816125ba5750600061263b565b81600181146125d057600281146125da576125f6565b600191505061263b565b60ff8411156125eb576125eb6121ba565b50506001821b61263b565b5060208310610133831016604e8410600b8410161715612619575081810a61263b565b612623838361255b565b8060001904821115612637576126376121ba565b0290505b92915050565b6000611fb260ff84168361259e565b600081600019048311821515161561266a5761266a6121ba565b500290565b60006020828403121561268157600080fd5b81518015158114611fb257600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126ce576126ce6121ba565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061250b9083018461248a565b6000600019821415612717576127176121ba565b506001019056fea2646970667358221220099e0aafaa1468584f6ac74c1df988d737a01a7045267156358d75aa7dab603664736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":6749,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_creatorAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_trusteeAddr","offset":0,"slot":"2","type":"t_address"},{"astId":3783,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenAddr","offset":0,"slot":"3","type":"t_address"},{"astId":3786,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"token","offset":0,"slot":"4","type":"t_contract(IERC20)820"},{"astId":3799,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalTokenBudget","offset":0,"slot":"5","type":"t_uint256"},{"astId":3801,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalEthBudget","offset":0,"slot":"6","type":"t_uint256"},{"astId":3804,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaigns","offset":0,"slot":"7","type":"t_array(t_address)dyn_storage"},{"astId":3809,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaignsMap","offset":0,"slot":"8","type":"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaMarketing.CampaignRecord)","numberOfBytes":"32","value":"t_struct(CampaignRecord)3797_storage"},"t_struct(CampaignRecord)3797_storage":{"encoding":"inplace","label":"struct LuminaMarketing.CampaignRecord","members":[{"astId":3788,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenBudget","offset":0,"slot":"0","type":"t_uint256"},{"astId":3790,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"ethBudget","offset":0,"slot":"1","type":"t_uint256"},{"astId":3792,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"campaignId","offset":0,"slot":"2","type":"t_uint8"},{"astId":3794,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"valid","offset":1,"slot":"2","type":"t_bool"},{"astId":3796,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"active","offset":2,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},275:function(e,n,t){e.exports={spinner:"Challenges_spinner__5R4ih","spin-animation":"Challenges_spin-animation__1Wr7k",vspinner:"Challenges_vspinner__1n-bc","vspin-animation":"Challenges_vspin-animation__2Pba8"}},276:function(e,n,t){e.exports={address:"Address_address__16qzz",invalid:"Address_invalid__171rV"}},428:function(e){e.exports=JSON.parse('{"address":"0x384338c8f3F7beA28Befecf51d22565a57cE421C","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"initSupply","type":"uint256"},{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x6de3d98858f947605f6ec541842ef8018631c2af70950ad49864c15a30360f33","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x384338c8f3F7beA28Befecf51d22565a57cE421C","transactionIndex":0,"gasUsed":"825192","logsBloom":"0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000002000008000000800000010000000000000100000000004000000000020000000000000000000800000000000000000080000010000000000000000000000000000000000000000000020000000080000000000000000000200021000000000000000000000000000000000000000000000000000000004000000002000000000001000000000000000000000000000000100040000020000000000000000000000000000000000000000000000000000000000000100000","blockHash":"0xdfccd5116354d9b2822f4edb12494df00bc938669187ef27aa3788dc483ec203","transactionHash":"0x6de3d98858f947605f6ec541842ef8018631c2af70950ad49864c15a30360f33","logs":[{"transactionIndex":0,"blockNumber":24634509,"transactionHash":"0x6de3d98858f947605f6ec541842ef8018631c2af70950ad49864c15a30360f33","address":"0x384338c8f3F7beA28Befecf51d22565a57cE421C","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x000000000000000000000000000000000000000000115eec47f6cf7e35000000","logIndex":0,"blockHash":"0xdfccd5116354d9b2822f4edb12494df00bc938669187ef27aa3788dc483ec203"},{"transactionIndex":0,"blockNumber":24634509,"transactionHash":"0x6de3d98858f947605f6ec541842ef8018631c2af70950ad49864c15a30360f33","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x0000000000000000000000000000000000000000000000000057f33b888d24c000000000000000000000000000000000000000000000000009aec63c2a98577c000000000000000000000000000000000000000000000647738148ce6285689b0000000000000000000000000000000000000000000000000956d300a20b32bc00000000000000000000000000000000000000000000064773d93c09eb128d5b","logIndex":1,"blockHash":"0xdfccd5116354d9b2822f4edb12494df00bc938669187ef27aa3788dc483ec203"}],"blockNumber":24634509,"cumulativeGasUsed":"825192","status":1,"byzantium":true},"args":["Lumina","LUMI",21000000,"0x5498F0fd40dE223057637980910720cf1745ba01"],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"initSupply\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaToken.sol\\":\\"LuminaToken\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\n\\\\ncontract LuminaToken is ERC20 {\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    constructor(string memory name, string memory symbol, uint initSupply, address recordsAddr_) ERC20(name, symbol) {\\\\n        // Mint initial supply to msg.sender\\\\n        uint8 decimals = decimals();\\\\n        require(decimals == 18);\\\\n        _mint(msg.sender, initSupply * (10**decimals));\\\\n\\\\n        // Register the records contract address\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n     }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        super._transfer(sender, recipient, amount);\\\\n\\\\n        try records._updateBalance(sender, balanceOf(sender)) {\\\\n        } catch {\\\\n        }\\\\n\\\\n        try records._registerBalance(recipient, balanceOf(recipient), false) {\\\\n        } catch {\\\\n        }\\\\n    }\\\\n\\\\n    function registerBalance() public {\\\\n        uint256 balance = balanceOf(msg.sender);\\\\n        records._registerBalance(msg.sender, balance, true);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f87dbf57391bdcea10dd041f042ba892331ed207bcb1dab9a037a0c625f0c3d\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":5558,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"recordsAddr","offset":0,"slot":"5","type":"t_address"},{"astId":5561,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},429:function(e){e.exports=JSON.parse('{"address":"0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"initSupply","type":"uint256"},{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x1ca02e1ccfb2f54877ecdd2ace6d0d92f8736e87f2e6e9a17f6e0875b1901a9c","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588","transactionIndex":0,"gasUsed":"825192","logsBloom":"0xblockHash":"0xa40d92126cb7a36e72e6d058680b6d59741e89e8f5a229ae373c10e47e9c7d05","transactionHash":"0x1ca02e1ccfb2f54877ecdd2ace6d0d92f8736e87f2e6e9a17f6e0875b1901a9c","logs":[{"transactionIndex":0,"blockNumber":234,"transactionHash":"0x1ca02e1ccfb2f54877ecdd2ace6d0d92f8736e87f2e6e9a17f6e0875b1901a9c","address":"0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x000000000000000000000000000000000000000000115eec47f6cf7e35000000","logIndex":0,"blockHash":"0xa40d92126cb7a36e72e6d058680b6d59741e89e8f5a229ae373c10e47e9c7d05"}],"blockNumber":234,"cumulativeGasUsed":"825192","status":1,"byzantium":true},"args":["Lumina","LUMI",21000000,"0xd5ffA09cF11Eee69A4A9D549F769CcDc3457a6e9"],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"initSupply\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaToken.sol\\":\\"LuminaToken\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\n\\\\ncontract LuminaToken is ERC20 {\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    constructor(string memory name, string memory symbol, uint initSupply, address recordsAddr_) ERC20(name, symbol) {\\\\n        // Mint initial supply to msg.sender\\\\n        uint8 decimals = decimals();\\\\n        require(decimals == 18);\\\\n        _mint(msg.sender, initSupply * (10**decimals));\\\\n\\\\n        // Register the records contract address\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n     }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        super._transfer(sender, recipient, amount);\\\\n\\\\n        try records._updateBalance(sender, balanceOf(sender)) {\\\\n        } catch {\\\\n        }\\\\n\\\\n        try records._registerBalance(recipient, balanceOf(recipient), false) {\\\\n        } catch {\\\\n        }\\\\n    }\\\\n\\\\n    function registerBalance() public {\\\\n        uint256 balance = balanceOf(msg.sender);\\\\n        records._registerBalance(msg.sender, balance, true);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f87dbf57391bdcea10dd041f042ba892331ed207bcb1dab9a037a0c625f0c3d\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":5558,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"recordsAddr","offset":0,"slot":"5","type":"t_address"},{"astId":5561,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},431:function(e){e.exports=JSON.parse('{"address":"0x5498F0fd40dE223057637980910720cf1745ba01","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"Commision","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}],"name":"RegisteredBalance","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MAX_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"name":"_addClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"}],"name":"_registerBalance","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"_updateBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"firstBlockNumber_","type":"uint64"}],"name":"_updateFirstBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddr_","type":"address"}],"name":"attachAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"name":"attachToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"findBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"getClaims","outputs":[{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"getClaimsCnt","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getCommision","outputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"setCommision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x1fe88a321c1d7b8c6e5e3c6d35d5face5641651e575a263729ecc7b8cd2833da","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x5498F0fd40dE223057637980910720cf1745ba01","transactionIndex":0,"gasUsed":"1677655","logsBloom":"0xblockHash":"0xa9480aca340c15ccf09c60f9a80498905640492b53e8d3293ea543348a51b532","transactionHash":"0x1fe88a321c1d7b8c6e5e3c6d35d5face5641651e575a263729ecc7b8cd2833da","logs":[{"transactionIndex":0,"blockNumber":24634506,"transactionHash":"0x1fe88a321c1d7b8c6e5e3c6d35d5face5641651e575a263729ecc7b8cd2833da","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000b2ce8ccd1ea9480000000000000000000000000000000000000000000000000a6194c8f883cb7c0000000000000000000000000000000000000000000006477252e2364948728c00000000000000000000000000000000000000000000000009aec63c2b6522340000000000000000000000000000000000000000000006477305b0c316671bd4","logIndex":0,"blockHash":"0xa9480aca340c15ccf09c60f9a80498905640492b53e8d3293ea543348a51b532"}],"blockNumber":24634506,"cumulativeGasUsed":"1677655","status":1,"byzantium":true},"args":[],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"Commision\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"RegisteredBalance\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MAX_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"_addClaim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"force\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_registerBalance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"registered\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_updateBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"firstBlockNumber_\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"_updateFirstBlockNumber\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachAdmin\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachToken\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"findBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBalances\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getClaims\\",\\"outputs\\":[{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"getClaimsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCommision\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasClaimed\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"setCommision\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaRecords.sol\\":\\"LuminaRecords\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyToken.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./OnlyAdmin.sol\\\\\\";\\\\n\\\\ncontract LuminaRecords is ILuminaRecords, Parameters, OnlyToken, OnlyTrustee, OnlyAdmin {\\\\n\\\\n    uint8 private constant BALANCE_RECORDS_CNT = 5;\\\\n    uint8 private constant DEFAULT_COMMISION_PRC = 22;\\\\n    uint8 private constant ZERO_COMMISION_PRC = 255;\\\\n    uint8 private constant MIN_COMMISION_PRC = 10;\\\\n    uint8 private constant MAX_COMMISION_PRC = 90;\\\\n\\\\n    struct AddrBalanceRecord {\\\\n        uint256 balance;\\\\n        uint64 blockNumber;\\\\n    }\\\\n\\\\n    struct AddrBalanceRecords {\\\\n        AddrBalanceRecord[BALANCE_RECORDS_CNT] records;\\\\n        uint8 recordsCnt;\\\\n    }\\\\n\\\\n    // Mapping blockNumber to Balance Records\\\\n    uint64 private _firstBlockNumber;\\\\n    mapping (address => AddrBalanceRecords) private _balanceRecords;\\\\n\\\\n    // Mapping blockNumber to claimsCnt\\\\n    mapping (uint64 => uint16) private _claimsCnt;\\\\n\\\\n    // Mapping blockNumber to address to uint32 (number of reward units)\\\\n    mapping (uint64 => mapping (address => uint32)) private _claimed;\\\\n\\\\n    // Mapping wallet address to commision rate\\\\n    // Special internal encodings: 0 means default commision, 255 means no commision (0%)\\\\n    mapping (address => uint8) private _commisions;\\\\n\\\\n    event Commision(address indexed wallet, uint8 commisionPrc);\\\\n    event RegisteredBalance(address indexed wallet, uint64 blockNumber, uint256 balance);\\\\n\\\\n    constructor() {\\\\n        _firstBlockNumber = 0;\\\\n    }\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        AddrBalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        uint8 cnt = brs.recordsCnt;\\\\n        balances = new uint256[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            balances[i] = brs.records[i].balance;\\\\n            blockNumbers[i] = brs.records[i].blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance) {\\\\n        balance = 0;\\\\n\\\\n        AddrBalanceRecords memory brs = _balanceRecords[wallet];\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            if(blockNumber >= brs.records[i].blockNumber) {\\\\n                balance = brs.records[i].balance;\\\\n                return (balance);\\\\n            }\\\\n        }\\\\n\\\\n        require(balance == 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n        return (balance);\\\\n    }\\\\n\\\\n    function getClaimsCnt(uint64 blockNumber) public view returns (uint16) {\\\\n        return _claimsCnt[blockNumber];\\\\n    }\\\\n\\\\n    function hasClaimed(uint64 blockNumber, address recipient) public view returns (uint32 rewardUnits) {\\\\n        rewardUnits = _claimed[blockNumber][recipient];\\\\n    }\\\\n\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        uint8 cnt = uint8(blockNumbers.length);\\\\n        claimsCnt = new uint16[](cnt);\\\\n        claimed = new bool[](cnt);\\\\n\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            claimsCnt[i] = getClaimsCnt(blockNumbers[i]);\\\\n            claimed[i] = hasClaimed(blockNumbers[i], recipient) != 0;\\\\n        }\\\\n    }\\\\n\\\\n    function setCommision(uint8 commisionPrc) external {\\\\n        address wallet = msg.sender;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n        uint8 c = commisionPrc == 0 ? ZERO_COMMISION_PRC : commisionPrc;\\\\n        _commisions[wallet] = c;\\\\n        emit Commision(wallet, commisionPrc);\\\\n    }\\\\n\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc) {\\\\n        uint8 c = _commisions[wallet];\\\\n        bool isContract = Address.isContract(wallet);\\\\n        // Contracts default commision is 0%, regular wallets defualt commision is 22%\\\\n        commisionPrc = c == 0 ? (isContract ? 0 : DEFAULT_COMMISION_PRC) : c == ZERO_COMMISION_PRC ? 0 : c;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n    }\\\\n\\\\n    function _cleanupBalances(AddrBalanceRecords storage brs) private {\\\\n        if(brs.recordsCnt > 1) {\\\\n            for(uint8 i = brs.recordsCnt-1; i > 0; i--) {\\\\n                AddrBalanceRecord storage br = brs.records[i-1];\\\\n                if(br.blockNumber <= _firstBlockNumber) {\\\\n                    // We can remove the last record\\\\n                    brs.recordsCnt--;\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _registerBalance(address wallet, uint256 balance, bool force) external onlyToken returns (bool registered) {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return false;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt > 0 && brs.records[0].balance == balance) {\\\\n            // Don\'t register the same amount again\\\\n            registered = true;\\\\n        } else if(brs.recordsCnt < BALANCE_RECORDS_CNT || force) {\\\\n            uint8 n = brs.recordsCnt < BALANCE_RECORDS_CNT ? brs.recordsCnt : BALANCE_RECORDS_CNT - 1;\\\\n            for(uint8 i = n; i > 0; i--) {\\\\n                brs.records[i] = brs.records[i-1];\\\\n            }\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            if(brs.recordsCnt < BALANCE_RECORDS_CNT) {\\\\n                brs.recordsCnt++;\\\\n            }\\\\n            registered = true;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else {\\\\n            registered = false;\\\\n        }\\\\n    }\\\\n\\\\n    function _updateBalance(address wallet, uint256 balance) external onlyToken {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt == 0) {\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            brs.recordsCnt++;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else if(brs.records[0].balance > balance) {\\\\n            brs.records[0].balance = balance;\\\\n            blockNumber = brs.records[0].blockNumber;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        }\\\\n    }\\\\n\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external onlyTrustee {\\\\n        _claimsCnt[blockNumber]++;\\\\n        _claimed[blockNumber][recipient] = rewardUnits;\\\\n    }\\\\n\\\\n    function _updateFirstBlockNumber(uint64 firstBlockNumber_) external onlyAdmin {\\\\n        _firstBlockNumber = firstBlockNumber_;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2f56b42c359bb796776cddfb21b1bc7e5780662b42dcc1216c3f2c708c7cb568\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyAdmin`, which can be applied to your functions to restrict their use to\\\\n * the admin contract.\\\\n */\\\\nabstract contract OnlyAdmin is Context {\\\\n    address private _creatorAddr;\\\\n    address private _adminAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachAdmin(address adminAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyAdmin: only creator can attach a admin contract\\\\\\");\\\\n        require(_adminAddr == address(0), \\\\\\"OnlyAdmin: the admin contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _adminAddr = adminAddr_;\\\\n    }\\\\n\\\\n    function adminAddr() public view returns (address) {\\\\n        return _adminAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the admin.\\\\n     */\\\\n    modifier onlyAdmin() {\\\\n        require(adminAddr() == _msgSender(), \\\\\\"OnlyAdmin: conly admin can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x10cbbb90f6a01a3d19119e405d727a41803c8a23b342ec221d41e67b2083ea22\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyToken`, which can be applied to your functions to restrict their use to\\\\n * the token contract.\\\\n */\\\\nabstract contract OnlyToken is Context {\\\\n    address private _creatorAddr;\\\\n    address private _tokenAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachToken(address tokenAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyToken: only creator can attach a token contract\\\\\\");\\\\n        require(_tokenAddr == address(0), \\\\\\"OnlyToken: the token contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _tokenAddr = tokenAddr_;\\\\n    }\\\\n\\\\n    function tokenAddr() public view returns (address) {\\\\n        return _tokenAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the token.\\\\n     */\\\\n    modifier onlyToken() {\\\\n        require(tokenAddr() == _msgSender(), \\\\\\"OnlyToken: only token can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x00aed4c146f8db327b2aed3b3ffb4846cd67e8a5b0fd226d8a42d17116db0e31\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI or at most 10,000 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MAX_RECIPIENT_BALANCE = 10*1000*1000*REWARD_UNIT; // 10,000 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 2 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe41080651c009b319e6c2a8d03d55fdb6063a1afdb73a2310453a00fd63638bf\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b5060008054336001600160a01b031991821681178355600280548316821790556004805490921617905560058054600160a01b600160e01b0319169055611c1d90819061005d90396000f3fe608060405234801561001057600080fd5b50600436106102475760003560e01c80636bb987fe1161013b578063b313bd62116100b8578063d045d5ae1161007c578063d045d5ae14610478578063d7a8a2b7146104a5578063e81ec612146104cd578063ec2165d3146104d5578063f883fcaa1461041057600080fd5b8063b313bd621461045f578063b91268e814610346578063c28bd11c14610410578063c28cedf314610467578063c6088d971461046f57600080fd5b8063910eb1ce116100ff578063910eb1ce146104295780639d94136214610408578063a21577671461043c578063a5c9cd8214610444578063ad6e33181461044c57600080fd5b80636bb987fe146103de578063731fd3f7146103e757806373d6aafa146104085780637fb0123214610410578063818305931461041857600080fd5b80633e6e387c116101c9578063552ba3331161018d578063552ba3331461038c578063566568751461039f5780635b7f415c146103b25780635fbe4d1d146103ba578063609eb1c3146103cb57600080fd5b80633e6e387c1461034e578063406a6f6014610356578063479e92c814610369578063480414df14610371578063504b36621461038457600080fd5b80631df55679116102105780631df55679146102db57806322a0c348146102f057806330db4fa014610303578063362b8b32146103235780633a3a7c531461034657600080fd5b8062113e081461024c57806306e386321461026b5780630bf43309146102865780630d423bd4146102a057806314270b65146102b6575b600080fd5b6102546104dd565b6040516102629291906115d3565b60405180910390f35b610273600581565b60405161ffff9091168152602001610262565b61028e60d081565b60405160ff9091168152602001610262565b6102a86106ad565b604051908152602001610262565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610262565b6102ee6102e9366004611673565b6106d4565b005b6102a86102fe3660046116a5565b610806565b61030b60c881565b6040516001600160401b039091168152602001610262565b6103366103313660046116d8565b61096b565b6040519015158152602001610262565b6102a8610bf3565b610273600281565b6102ee610364366004611673565b610c0a565b61028e600a81565b6102ee61037f366004611673565b610d27565b61028e606481565b6102ee61039a36600461171d565b610e44565b61028e6103ad366004611673565b611024565b61028e601281565b6001546001600160a01b03166102c3565b6102ee6103d9366004611747565b6110b8565b61030b61996881565b6103fa6103f53660046117a2565b6111bc565b604051610262929190611878565b610273600a81565b61028e600281565b6005546001600160a01b03166102c3565b6102ee6104373660046118ec565b61133c565b61028e60ff81565b6102a86113dc565b6102ee61045a366004611907565b6113e8565b61030b600281565b610336600181565b6102736103e881565b6102736104863660046118ec565b6001600160401b031660009081526007602052604090205461ffff1690565b6104b86104b336600461192a565b6114ad565b60405163ffffffff9091168152602001610262565b6102a86114e4565b61030b6114fc565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b828210156105485760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610507565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b038111156105815761058161178c565b6040519080825280602002602001820160405280156105aa578160200160208202803683370190505b5093508060ff166001600160401b038111156105c8576105c861178c565b6040519080825280602002602001820160405280156105f1578160200160208202803683370190505b50925060005b826020015160ff168160ff1610156106a657825160ff82166005811061061f5761061f611954565b602002015160000151858260ff168151811061063d5761063d611954565b6020908102919091010152825160ff82166005811061065e5761065e611954565b602002015160200151848260ff168151811061067c5761067c611954565b6001600160401b03909216602092830291909101909101528061069e81611980565b9150506105f7565b5050509091565b6106b9600360126119a0565b6106c490600a611aa7565b6106d19062989680611ab6565b81565b6002546001600160a01b031633146107595760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107d85760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610750565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108775760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610836565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff16101561091457815160ff8216600581106108bb576108bb611954565b6020020151602001516001600160401b0316846001600160401b03161061090257815160ff8216600581106108f2576108f2611954565b6020020151519250610965915050565b8061090c81611980565b915050610893565b5081156109635760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e63650000006044820152606401610750565b505b92915050565b6001546000906001600160a01b031633146109985760405162461bcd60e51b815260040161075090611ad5565b6001600160a01b03841660009081526006602052604090206109b981611509565b6109c5600360126119a0565b6109d090600a611aa7565b8410156109f657600a8101546000945060ff166109f1576000915050610bec565b610a30565b610a026012600a611aa7565b610a0e906103e8611ab6565b841115610a3057610a216012600a611aa7565b610a2d906103e8611ab6565b93505b600a810154439060ff1615801590610a485750815485145b15610a565760019250610be9565b600a820154600560ff9091161080610a6b5750835b15610be457600a820154600090600560ff90911610610a9557610a90600160056119a0565b610a9e565b600a83015460ff165b9050805b60ff811615610b2a5783610ab76001836119a0565b60ff1660058110610aca57610aca611954565b600202018460ff831660058110610ae357610ae3611954565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610b2281611b24565b915050610aa2565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610b8d57600a8301805460ff16906000610b7383611980565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610be9565b600092505b50505b9392505050565b610bff600360126119a0565b6106d190600a611aa7565b6000546001600160a01b03163314610c805760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b6064820152608401610750565b6001546001600160a01b031615610cf95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610750565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d9d5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b6064820152608401610750565b6005546001600160a01b031615610e165760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610750565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610e6e5760405162461bcd60e51b815260040161075090611ad5565b6001600160a01b0382166000908152600660205260409020610e8f81611509565b610e9b600360126119a0565b610ea690600a611aa7565b821015610ec757600a8101546000925060ff16610ec257505050565b610f01565b610ed36012600a611aa7565b610edf906103e8611ab6565b821115610f0157610ef26012600a611aa7565b610efe906103e8611ab6565b91505b600a810154439060ff16610fba5782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610f4583611980565b91906101000a81548160ff021916908360ff16021790555050836001600160a01b03167f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a8285604051610fad9291906001600160401b03929092168252602082015260400190565b60405180910390a261101d565b815483101561101d57508181556001810154604080516001600160401b0390921680835260208301859052916001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a25b50505b5050565b6001600160a01b03811660009081526009602052604081205460ff16823b151581156110615760ff8281161461105a5781611070565b6000611070565b8061106d576016611070565b60005b925060ff83161580611095575060ff8316600a118015906110955750605a60ff841611155b6110b15760405162461bcd60e51b815260040161075090611b41565b5050919050565b6003546001600160a01b0316331461112e5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610750565b6001600160401b0383166000908152600760205260408120805461ffff169161115683611b96565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b038111156111de576111de61178c565b604051908082528060200260200182016040528015611207578160200160208202803683370190505b5092508060ff166001600160401b038111156112255761122561178c565b60405190808252806020026020018201604052801561124e578160200160208202803683370190505b50915060005b8160ff168160ff161015611333576112a1868260ff168151811061127a5761127a611954565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff16815181106112b6576112b6611954565b602002602001019061ffff16908161ffff16815250506112f2868260ff16815181106112e4576112e4611954565b6020026020010151866114ad565b63ffffffff1660001415838260ff168151811061131157611311611954565b911515602092830291909101909101528061132b81611980565b915050611254565b50509250929050565b6005546001600160a01b031633146113af5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b6064820152608401610750565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b6106d16012600a611aa7565b3360ff8216158061140c575060ff8216600a1180159061140c5750605a60ff831611155b6114285760405162461bcd60e51b815260040161075090611b41565b600060ff831615611439578261143c565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b906114a090869060ff91909116815260200190565b60405180910390a2505050565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b6114f06012600a611aa7565b6106d1906103e8611ab6565b6106d1619968600e611bb8565b600a810154600160ff90911611156115d057600a8101546000906115329060019060ff166119a0565b90505b60ff8116156110205760008261154c6001846119a0565b60ff166005811061155f5761155f611954565b600554600160029290920292909201908101549092506001600160401b03600160a01b90920482169116116115bd57600a8301805460ff169060006115a383611b24565b91906101000a81548160ff021916908360ff160217905550505b50806115c881611b24565b915050611535565b50565b604080825283519082018190526000906020906060840190828701845b8281101561160c578151845292840192908401906001016115f0565b5050508381038285015284518082528583019183019060005b8181101561164a5783516001600160401b031683529284019291840191600101611625565b5090979650505050505050565b80356001600160a01b038116811461166e57600080fd5b919050565b60006020828403121561168557600080fd5b610bec82611657565b80356001600160401b038116811461166e57600080fd5b600080604083850312156116b857600080fd5b6116c183611657565b91506116cf6020840161168e565b90509250929050565b6000806000606084860312156116ed57600080fd5b6116f684611657565b9250602084013591506040840135801515811461171257600080fd5b809150509250925092565b6000806040838503121561173057600080fd5b61173983611657565b946020939093013593505050565b60008060006060848603121561175c57600080fd5b6117658461168e565b925061177360208501611657565b9150604084013563ffffffff8116811461171257600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156117b557600080fd5b82356001600160401b03808211156117cc57600080fd5b818501915085601f8301126117e057600080fd5b81356020828211156117f4576117f461178c565b8160051b604051601f19603f830116810181811086821117156118195761181961178c565b60405292835281830193508481018201928984111561183757600080fd5b948201945b8386101561185c5761184d8661168e565b8552948201949382019361183c565b965061186b9050878201611657565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b828110156118b557815161ffff1684529284019290840190600101611895565b5050508381038285015284518082528583019183019060005b8181101561164a5783511515835292840192918401916001016118ce565b6000602082840312156118fe57600080fd5b610bec8261168e565b60006020828403121561191957600080fd5b813560ff81168114610bec57600080fd5b6000806040838503121561193d57600080fd5b6119468361168e565b91506116cf60208401611657565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156119975761199761196a565b60010192915050565b600060ff821660ff8416808210156119ba576119ba61196a565b90039392505050565b600181815b808511156119fe5781600019048211156119e4576119e461196a565b808516156119f157918102915b93841c93908002906119c8565b509250929050565b600082611a1557506001610965565b81611a2257506000610965565b8160018114611a385760028114611a4257611a5e565b6001915050610965565b60ff841115611a5357611a5361196a565b50506001821b610965565b5060208310610133831016604e8410600b8410161715611a81575081810a610965565b611a8b83836119c3565b8060001904821115611a9f57611a9f61196a565b029392505050565b6000610bec60ff841683611a06565b6000816000190483118215151615611ad057611ad061196a565b500290565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821680611b3757611b3761196a565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff80831681811415611bae57611bae61196a565b6001019392505050565b60006001600160401b0380831681851681830481118215151615611bde57611bde61196a565b0294935050505056fea264697066735822122014f6304c53150bcfa65cf960fdda22a8c7f1270242f0ab17b58f7ee86e92e86564736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102475760003560e01c80636bb987fe1161013b578063b313bd62116100b8578063d045d5ae1161007c578063d045d5ae14610478578063d7a8a2b7146104a5578063e81ec612146104cd578063ec2165d3146104d5578063f883fcaa1461041057600080fd5b8063b313bd621461045f578063b91268e814610346578063c28bd11c14610410578063c28cedf314610467578063c6088d971461046f57600080fd5b8063910eb1ce116100ff578063910eb1ce146104295780639d94136214610408578063a21577671461043c578063a5c9cd8214610444578063ad6e33181461044c57600080fd5b80636bb987fe146103de578063731fd3f7146103e757806373d6aafa146104085780637fb0123214610410578063818305931461041857600080fd5b80633e6e387c116101c9578063552ba3331161018d578063552ba3331461038c578063566568751461039f5780635b7f415c146103b25780635fbe4d1d146103ba578063609eb1c3146103cb57600080fd5b80633e6e387c1461034e578063406a6f6014610356578063479e92c814610369578063480414df14610371578063504b36621461038457600080fd5b80631df55679116102105780631df55679146102db57806322a0c348146102f057806330db4fa014610303578063362b8b32146103235780633a3a7c531461034657600080fd5b8062113e081461024c57806306e386321461026b5780630bf43309146102865780630d423bd4146102a057806314270b65146102b6575b600080fd5b6102546104dd565b6040516102629291906115d3565b60405180910390f35b610273600581565b60405161ffff9091168152602001610262565b61028e60d081565b60405160ff9091168152602001610262565b6102a86106ad565b604051908152602001610262565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610262565b6102ee6102e9366004611673565b6106d4565b005b6102a86102fe3660046116a5565b610806565b61030b60c881565b6040516001600160401b039091168152602001610262565b6103366103313660046116d8565b61096b565b6040519015158152602001610262565b6102a8610bf3565b610273600281565b6102ee610364366004611673565b610c0a565b61028e600a81565b6102ee61037f366004611673565b610d27565b61028e606481565b6102ee61039a36600461171d565b610e44565b61028e6103ad366004611673565b611024565b61028e601281565b6001546001600160a01b03166102c3565b6102ee6103d9366004611747565b6110b8565b61030b61996881565b6103fa6103f53660046117a2565b6111bc565b604051610262929190611878565b610273600a81565b61028e600281565b6005546001600160a01b03166102c3565b6102ee6104373660046118ec565b61133c565b61028e60ff81565b6102a86113dc565b6102ee61045a366004611907565b6113e8565b61030b600281565b610336600181565b6102736103e881565b6102736104863660046118ec565b6001600160401b031660009081526007602052604090205461ffff1690565b6104b86104b336600461192a565b6114ad565b60405163ffffffff9091168152602001610262565b6102a86114e4565b61030b6114fc565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b828210156105485760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610507565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b038111156105815761058161178c565b6040519080825280602002602001820160405280156105aa578160200160208202803683370190505b5093508060ff166001600160401b038111156105c8576105c861178c565b6040519080825280602002602001820160405280156105f1578160200160208202803683370190505b50925060005b826020015160ff168160ff1610156106a657825160ff82166005811061061f5761061f611954565b602002015160000151858260ff168151811061063d5761063d611954565b6020908102919091010152825160ff82166005811061065e5761065e611954565b602002015160200151848260ff168151811061067c5761067c611954565b6001600160401b03909216602092830291909101909101528061069e81611980565b9150506105f7565b5050509091565b6106b9600360126119a0565b6106c490600a611aa7565b6106d19062989680611ab6565b81565b6002546001600160a01b031633146107595760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107d85760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610750565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108775760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610836565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff16101561091457815160ff8216600581106108bb576108bb611954565b6020020151602001516001600160401b0316846001600160401b03161061090257815160ff8216600581106108f2576108f2611954565b6020020151519250610965915050565b8061090c81611980565b915050610893565b5081156109635760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e63650000006044820152606401610750565b505b92915050565b6001546000906001600160a01b031633146109985760405162461bcd60e51b815260040161075090611ad5565b6001600160a01b03841660009081526006602052604090206109b981611509565b6109c5600360126119a0565b6109d090600a611aa7565b8410156109f657600a8101546000945060ff166109f1576000915050610bec565b610a30565b610a026012600a611aa7565b610a0e906103e8611ab6565b841115610a3057610a216012600a611aa7565b610a2d906103e8611ab6565b93505b600a810154439060ff1615801590610a485750815485145b15610a565760019250610be9565b600a820154600560ff9091161080610a6b5750835b15610be457600a820154600090600560ff90911610610a9557610a90600160056119a0565b610a9e565b600a83015460ff165b9050805b60ff811615610b2a5783610ab76001836119a0565b60ff1660058110610aca57610aca611954565b600202018460ff831660058110610ae357610ae3611954565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610b2281611b24565b915050610aa2565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610b8d57600a8301805460ff16906000610b7383611980565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610be9565b600092505b50505b9392505050565b610bff600360126119a0565b6106d190600a611aa7565b6000546001600160a01b03163314610c805760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b6064820152608401610750565b6001546001600160a01b031615610cf95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610750565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d9d5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b6064820152608401610750565b6005546001600160a01b031615610e165760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b6064820152608401610750565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610e6e5760405162461bcd60e51b815260040161075090611ad5565b6001600160a01b0382166000908152600660205260409020610e8f81611509565b610e9b600360126119a0565b610ea690600a611aa7565b821015610ec757600a8101546000925060ff16610ec257505050565b610f01565b610ed36012600a611aa7565b610edf906103e8611ab6565b821115610f0157610ef26012600a611aa7565b610efe906103e8611ab6565b91505b600a810154439060ff16610fba5782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610f4583611980565b91906101000a81548160ff021916908360ff16021790555050836001600160a01b03167f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a8285604051610fad9291906001600160401b03929092168252602082015260400190565b60405180910390a261101d565b815483101561101d57508181556001810154604080516001600160401b0390921680835260208301859052916001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a25b50505b5050565b6001600160a01b03811660009081526009602052604081205460ff16823b151581156110615760ff8281161461105a5781611070565b6000611070565b8061106d576016611070565b60005b925060ff83161580611095575060ff8316600a118015906110955750605a60ff841611155b6110b15760405162461bcd60e51b815260040161075090611b41565b5050919050565b6003546001600160a01b0316331461112e5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610750565b6001600160401b0383166000908152600760205260408120805461ffff169161115683611b96565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b038111156111de576111de61178c565b604051908082528060200260200182016040528015611207578160200160208202803683370190505b5092508060ff166001600160401b038111156112255761122561178c565b60405190808252806020026020018201604052801561124e578160200160208202803683370190505b50915060005b8160ff168160ff161015611333576112a1868260ff168151811061127a5761127a611954565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff16815181106112b6576112b6611954565b602002602001019061ffff16908161ffff16815250506112f2868260ff16815181106112e4576112e4611954565b6020026020010151866114ad565b63ffffffff1660001415838260ff168151811061131157611311611954565b911515602092830291909101909101528061132b81611980565b915050611254565b50509250929050565b6005546001600160a01b031633146113af5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b6064820152608401610750565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b6106d16012600a611aa7565b3360ff8216158061140c575060ff8216600a1180159061140c5750605a60ff831611155b6114285760405162461bcd60e51b815260040161075090611b41565b600060ff831615611439578261143c565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b906114a090869060ff91909116815260200190565b60405180910390a2505050565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b6114f06012600a611aa7565b6106d1906103e8611ab6565b6106d1619968600e611bb8565b600a810154600160ff90911611156115d057600a8101546000906115329060019060ff166119a0565b90505b60ff8116156110205760008261154c6001846119a0565b60ff166005811061155f5761155f611954565b600554600160029290920292909201908101549092506001600160401b03600160a01b90920482169116116115bd57600a8301805460ff169060006115a383611b24565b91906101000a81548160ff021916908360ff160217905550505b50806115c881611b24565b915050611535565b50565b604080825283519082018190526000906020906060840190828701845b8281101561160c578151845292840192908401906001016115f0565b5050508381038285015284518082528583019183019060005b8181101561164a5783516001600160401b031683529284019291840191600101611625565b5090979650505050505050565b80356001600160a01b038116811461166e57600080fd5b919050565b60006020828403121561168557600080fd5b610bec82611657565b80356001600160401b038116811461166e57600080fd5b600080604083850312156116b857600080fd5b6116c183611657565b91506116cf6020840161168e565b90509250929050565b6000806000606084860312156116ed57600080fd5b6116f684611657565b9250602084013591506040840135801515811461171257600080fd5b809150509250925092565b6000806040838503121561173057600080fd5b61173983611657565b946020939093013593505050565b60008060006060848603121561175c57600080fd5b6117658461168e565b925061177360208501611657565b9150604084013563ffffffff8116811461171257600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156117b557600080fd5b82356001600160401b03808211156117cc57600080fd5b818501915085601f8301126117e057600080fd5b81356020828211156117f4576117f461178c565b8160051b604051601f19603f830116810181811086821117156118195761181961178c565b60405292835281830193508481018201928984111561183757600080fd5b948201945b8386101561185c5761184d8661168e565b8552948201949382019361183c565b965061186b9050878201611657565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b828110156118b557815161ffff1684529284019290840190600101611895565b5050508381038285015284518082528583019183019060005b8181101561164a5783511515835292840192918401916001016118ce565b6000602082840312156118fe57600080fd5b610bec8261168e565b60006020828403121561191957600080fd5b813560ff81168114610bec57600080fd5b6000806040838503121561193d57600080fd5b6119468361168e565b91506116cf60208401611657565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156119975761199761196a565b60010192915050565b600060ff821660ff8416808210156119ba576119ba61196a565b90039392505050565b600181815b808511156119fe5781600019048211156119e4576119e461196a565b808516156119f157918102915b93841c93908002906119c8565b509250929050565b600082611a1557506001610965565b81611a2257506000610965565b8160018114611a385760028114611a4257611a5e565b6001915050610965565b60ff841115611a5357611a5361196a565b50506001821b610965565b5060208310610133831016604e8410600b8410161715611a81575081810a610965565b611a8b83836119c3565b8060001904821115611a9f57611a9f61196a565b029392505050565b6000610bec60ff841683611a06565b6000816000190483118215151615611ad057611ad061196a565b500290565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821680611b3757611b3761196a565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff80831681811415611bae57611bae61196a565b6001019392505050565b60006001600160401b0380831681851681830481118215151615611bde57611bde61196a565b0294935050505056fea264697066735822122014f6304c53150bcfa65cf960fdda22a8c7f1270242f0ab17b58f7ee86e92e86564736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6685,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6687,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6762,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"2","type":"t_address"},{"astId":6764,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_trusteeAddr","offset":0,"slot":"3","type":"t_address"},{"astId":6567,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"4","type":"t_address"},{"astId":6569,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_adminAddr","offset":0,"slot":"5","type":"t_address"},{"astId":4792,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_firstBlockNumber","offset":20,"slot":"5","type":"t_uint64"},{"astId":4797,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_balanceRecords","offset":0,"slot":"6","type":"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)"},{"astId":4801,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimsCnt","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_uint16)"},{"astId":4807,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimed","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_mapping(t_address,t_uint32))"},{"astId":4811,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_commisions","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint8)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage":{"base":"t_struct(AddrBalanceRecord)4782_storage","encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord[5]","numberOfBytes":"320"},"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaRecords.AddrBalanceRecords)","numberOfBytes":"32","value":"t_struct(AddrBalanceRecords)4790_storage"},"t_mapping(t_address,t_uint32)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint32)","numberOfBytes":"32","value":"t_uint32"},"t_mapping(t_address,t_uint8)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint8)","numberOfBytes":"32","value":"t_uint8"},"t_mapping(t_uint64,t_mapping(t_address,t_uint32))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(address => uint32))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint32)"},"t_mapping(t_uint64,t_uint16)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_struct(AddrBalanceRecord)4782_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord","members":[{"astId":4779,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"balance","offset":0,"slot":"0","type":"t_uint256"},{"astId":4781,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"}],"numberOfBytes":"64"},"t_struct(AddrBalanceRecords)4790_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecords","members":[{"astId":4787,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"records","offset":0,"slot":"0","type":"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage"},{"astId":4789,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"recordsCnt","offset":0,"slot":"10","type":"t_uint8"}],"numberOfBytes":"352"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},432:function(e){e.exports=JSON.parse('{"address":"0xd5ffA09cF11Eee69A4A9D549F769CcDc3457a6e9","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"Commision","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}],"name":"RegisteredBalance","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"name":"_addClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"}],"name":"_registerBalance","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"_updateBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"firstBlockNumber_","type":"uint64"}],"name":"_updateFirstBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddr_","type":"address"}],"name":"attachAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"name":"attachToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"findBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"getClaims","outputs":[{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"getClaimsCnt","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getCommision","outputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"setCommision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xb796a3d852f291c1cd6b2127a449889dd4add264c37e5037da04364e62972562","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xd5ffA09cF11Eee69A4A9D549F769CcDc3457a6e9","transactionIndex":0,"gasUsed":"1674847","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x9063545b8a9028290c35fd151937dc6891140feb303013fd7924324e9a067fc9","transactionHash":"0xb796a3d852f291c1cd6b2127a449889dd4add264c37e5037da04364e62972562","logs":[],"blockNumber":233,"cumulativeGasUsed":"1674847","status":1,"byzantium":true},"args":[],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"Commision\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"RegisteredBalance\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"_addClaim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"force\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_registerBalance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"registered\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_updateBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"firstBlockNumber_\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"_updateFirstBlockNumber\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachAdmin\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachToken\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"findBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBalances\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getClaims\\",\\"outputs\\":[{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"getClaimsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCommision\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasClaimed\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"setCommision\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaRecords.sol\\":\\"LuminaRecords\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyToken.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./OnlyAdmin.sol\\\\\\";\\\\n\\\\ncontract LuminaRecords is ILuminaRecords, Parameters, OnlyToken, OnlyTrustee, OnlyAdmin {\\\\n\\\\n    uint8 private constant BALANCE_RECORDS_CNT = 5;\\\\n    uint8 private constant DEFAULT_COMMISION_PRC = 22;\\\\n    uint8 private constant ZERO_COMMISION_PRC = 255;\\\\n    uint8 private constant MIN_COMMISION_PRC = 10;\\\\n    uint8 private constant MAX_COMMISION_PRC = 90;\\\\n\\\\n    struct AddrBalanceRecord {\\\\n        uint256 balance;\\\\n        uint64 blockNumber;\\\\n    }\\\\n\\\\n    struct AddrBalanceRecords {\\\\n        AddrBalanceRecord[BALANCE_RECORDS_CNT] records;\\\\n        uint8 recordsCnt;\\\\n    }\\\\n\\\\n    // Mapping blockNumber to Balance Records\\\\n    uint64 private _firstBlockNumber;\\\\n    mapping (address => AddrBalanceRecords) private _balanceRecords;\\\\n\\\\n    // Mapping blockNumber to claimsCnt\\\\n    mapping (uint64 => uint16) private _claimsCnt;\\\\n\\\\n    // Mapping blockNumber to address to uint32 (number of reward units)\\\\n    mapping (uint64 => mapping (address => uint32)) private _claimed;\\\\n\\\\n    // Mapping wallet address to commision rate\\\\n    // Special internal encodings: 0 means default commision, 255 means no commision (0%)\\\\n    mapping (address => uint8) private _commisions;\\\\n\\\\n    event Commision(address indexed wallet, uint8 commisionPrc);\\\\n    event RegisteredBalance(address indexed wallet, uint64 blockNumber, uint256 balance);\\\\n\\\\n    constructor() {\\\\n        _firstBlockNumber = 0;\\\\n    }\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        AddrBalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        uint8 cnt = brs.recordsCnt;\\\\n        balances = new uint256[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            balances[i] = brs.records[i].balance;\\\\n            blockNumbers[i] = brs.records[i].blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance) {\\\\n        balance = 0;\\\\n\\\\n        AddrBalanceRecords memory brs = _balanceRecords[wallet];\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            if(blockNumber >= brs.records[i].blockNumber) {\\\\n                balance = brs.records[i].balance;\\\\n                return (balance);\\\\n            }\\\\n        }\\\\n\\\\n        require(balance == 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n        return (balance);\\\\n    }\\\\n\\\\n    function getClaimsCnt(uint64 blockNumber) public view returns (uint16) {\\\\n        return _claimsCnt[blockNumber];\\\\n    }\\\\n\\\\n    function hasClaimed(uint64 blockNumber, address recipient) public view returns (uint32 rewardUnits) {\\\\n        rewardUnits = _claimed[blockNumber][recipient];\\\\n    }\\\\n\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        uint8 cnt = uint8(blockNumbers.length);\\\\n        claimsCnt = new uint16[](cnt);\\\\n        claimed = new bool[](cnt);\\\\n\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            claimsCnt[i] = getClaimsCnt(blockNumbers[i]);\\\\n            claimed[i] = hasClaimed(blockNumbers[i], recipient) != 0;\\\\n        }\\\\n    }\\\\n\\\\n    function setCommision(uint8 commisionPrc) external {\\\\n        address wallet = msg.sender;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n        uint8 c = commisionPrc == 0 ? ZERO_COMMISION_PRC : commisionPrc;\\\\n        _commisions[wallet] = c;\\\\n        emit Commision(wallet, commisionPrc);\\\\n    }\\\\n\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc) {\\\\n        uint8 c = _commisions[wallet];\\\\n        bool isContract = Address.isContract(wallet);\\\\n        // Contracts default commision is 0%, regular wallets defualt commision is 22%\\\\n        commisionPrc = c == 0 ? (isContract ? 0 : DEFAULT_COMMISION_PRC) : c == ZERO_COMMISION_PRC ? 0 : c;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n    }\\\\n\\\\n    function _cleanupBalances(AddrBalanceRecords storage brs) private {\\\\n        if(brs.recordsCnt > 1) {\\\\n            for(uint8 i = brs.recordsCnt-1; i > 0; i--) {\\\\n                AddrBalanceRecord storage br = brs.records[i-1];\\\\n                if(br.blockNumber <= _firstBlockNumber) {\\\\n                    // We can remove the last record\\\\n                    brs.recordsCnt--;\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _registerBalance(address wallet, uint256 balance, bool force) external onlyToken returns (bool registered) {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return false;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt > 0 && brs.records[0].balance == balance) {\\\\n            // Don\'t register the same amount again\\\\n            registered = true;\\\\n        } else if(brs.recordsCnt < BALANCE_RECORDS_CNT || force) {\\\\n            uint8 n = brs.recordsCnt < BALANCE_RECORDS_CNT ? brs.recordsCnt : BALANCE_RECORDS_CNT - 1;\\\\n            for(uint8 i = n; i > 0; i--) {\\\\n                brs.records[i] = brs.records[i-1];\\\\n            }\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            if(brs.recordsCnt < BALANCE_RECORDS_CNT) {\\\\n                brs.recordsCnt++;\\\\n            }\\\\n            registered = true;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else {\\\\n            registered = false;\\\\n        }\\\\n    }\\\\n\\\\n    function _updateBalance(address wallet, uint256 balance) external onlyToken {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is no sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return;\\\\n            }\\\\n        } else if(balance > MAX_REGISTERED_BALANCE) {\\\\n            balance = MAX_REGISTERED_BALANCE;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt == 0) {\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            brs.recordsCnt++;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else if(brs.records[0].balance > balance) {\\\\n            brs.records[0].balance = balance;\\\\n            blockNumber = brs.records[0].blockNumber;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        }\\\\n    }\\\\n\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external onlyTrustee {\\\\n        _claimsCnt[blockNumber]++;\\\\n        _claimed[blockNumber][recipient] = rewardUnits;\\\\n    }\\\\n\\\\n    function _updateFirstBlockNumber(uint64 firstBlockNumber_) external onlyAdmin {\\\\n        _firstBlockNumber = firstBlockNumber_;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2f56b42c359bb796776cddfb21b1bc7e5780662b42dcc1216c3f2c708c7cb568\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyAdmin`, which can be applied to your functions to restrict their use to\\\\n * the admin contract.\\\\n */\\\\nabstract contract OnlyAdmin is Context {\\\\n    address private _creatorAddr;\\\\n    address private _adminAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachAdmin(address adminAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyAdmin: only creator can attach a admin contract\\\\\\");\\\\n        require(_adminAddr == address(0), \\\\\\"OnlyAdmin: the admin contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _adminAddr = adminAddr_;\\\\n    }\\\\n\\\\n    function adminAddr() public view returns (address) {\\\\n        return _adminAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the admin.\\\\n     */\\\\n    modifier onlyAdmin() {\\\\n        require(adminAddr() == _msgSender(), \\\\\\"OnlyAdmin: conly admin can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x10cbbb90f6a01a3d19119e405d727a41803c8a23b342ec221d41e67b2083ea22\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyToken`, which can be applied to your functions to restrict their use to\\\\n * the token contract.\\\\n */\\\\nabstract contract OnlyToken is Context {\\\\n    address private _creatorAddr;\\\\n    address private _tokenAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachToken(address tokenAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyToken: only creator can attach a token contract\\\\\\");\\\\n        require(_tokenAddr == address(0), \\\\\\"OnlyToken: the token contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _tokenAddr = tokenAddr_;\\\\n    }\\\\n\\\\n    function tokenAddr() public view returns (address) {\\\\n        return _tokenAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the token.\\\\n     */\\\\n    modifier onlyToken() {\\\\n        require(tokenAddr() == _msgSender(), \\\\\\"OnlyToken: only token can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x00aed4c146f8db327b2aed3b3ffb4846cd67e8a5b0fd226d8a42d17116db0e31\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x19515758397fdbbdde67a6f4c5f2d02f89aa369109752c5dcfec52d1adb626ac\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061023c5760003560e01c80636bb987fe1161013b578063b313bd62116100b8578063d045d5ae1161007c578063d045d5ae1461046d578063d7a8a2b71461049a578063e81ec612146104c2578063ec2165d3146104ca578063f883fcaa146103fd57600080fd5b8063b313bd621461044c578063b91268e814610454578063c28bd11c146103fd578063c28cedf31461045c578063c6088d971461046457600080fd5b8063910eb1ce116100ff578063910eb1ce146104165780639d941362146103f5578063a215776714610429578063a5c9cd8214610431578063ad6e33181461043957600080fd5b80636bb987fe146103cb578063731fd3f7146103d457806373d6aafa146103f55780637fb01232146103fd578063818305931461040557600080fd5b80633e6e387c116101c9578063552ba3331161018d578063552ba33314610379578063566568751461038c5780635b7f415c1461039f5780635fbe4d1d146103a7578063609eb1c3146103b857600080fd5b80633e6e387c1461033b578063406a6f6014610343578063479e92c814610356578063480414df1461035e578063504b36621461037157600080fd5b80631df55679116102105780631df55679146102ba57806322a0c348146102cf57806330db4fa0146102f0578063362b8b32146103105780633a3a7c531461033357600080fd5b8062113e081461024157806306e38632146102605780630bf433091461027b57806314270b6514610295575b600080fd5b6102496104d2565b6040516102579291906115c6565b60405180910390f35b610268600581565b60405161ffff9091168152602001610257565b61028360d081565b60405160ff9091168152602001610257565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610257565b6102cd6102c8366004611666565b6106a2565b005b6102e26102dd366004611698565b6107d4565b604051908152602001610257565b6102f860c881565b6040516001600160401b039091168152602001610257565b61032361031e3660046116cb565b610939565b6040519015158152602001610257565b6102e2610bc1565b610268600281565b6102cd610351366004611666565b610bdb565b610283600a81565b6102cd61036c366004611666565b610cf8565b610283606481565b6102cd610387366004611710565b610e15565b61028361039a366004611666565b610ff5565b610283601281565b6001546001600160a01b03166102a2565b6102cd6103c636600461173a565b611089565b6102f861996881565b6103e76103e2366004611795565b61118d565b60405161025792919061186b565b610268600a81565b610283600281565b6005546001600160a01b03166102a2565b6102cd6104243660046118df565b61130d565b61028360ff81565b6102e26113ad565b6102cd6104473660046118fa565b6113b9565b6102f8600281565b6102e261147e565b610323600181565b6102686103e881565b61026861047b3660046118df565b6001600160401b031660009081526007602052604090205461ffff1690565b6104ad6104a836600461191d565b6114a0565b60405163ffffffff9091168152602001610257565b6102e26114d7565b6102f86114ef565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561053d5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104fc565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b038111156105765761057661177f565b60405190808252806020026020018201604052801561059f578160200160208202803683370190505b5093508060ff166001600160401b038111156105bd576105bd61177f565b6040519080825280602002602001820160405280156105e6578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561069b57825160ff82166005811061061457610614611947565b602002015160000151858260ff168151811061063257610632611947565b6020908102919091010152825160ff82166005811061065357610653611947565b602002015160200151848260ff168151811061067157610671611947565b6001600160401b03909216602092830291909101909101528061069381611973565b9150506105ec565b5050509091565b6002546001600160a01b031633146107275760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107a65760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e2061747461636865640000000000606482015260840161071e565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108455760408051808201909152600283028501805482526001908101546001600160401b03166020808401919091529183529092019101610804565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108e257815160ff82166005811061088957610889611947565b6020020151602001516001600160401b0316846001600160401b0316106108d057815160ff8216600581106108c0576108c0611947565b6020020151519250610933915050565b806108da81611973565b915050610861565b5081156109315760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e6365000000604482015260640161071e565b505b92915050565b6001546000906001600160a01b031633146109665760405162461bcd60e51b815260040161071e90611993565b6001600160a01b0384166000908152600660205260409020610987816114fc565b610993600360126119e2565b61099e90600a611ae9565b8410156109c457600a8101546000945060ff166109bf576000915050610bba565b6109fe565b6109d06012600a611ae9565b6109dc906103e8611af8565b8411156109fe576109ef6012600a611ae9565b6109fb906103e8611af8565b93505b600a810154439060ff1615801590610a165750815485145b15610a245760019250610bb7565b600a820154600560ff9091161080610a395750835b15610bb257600a820154600090600560ff90911610610a6357610a5e600160056119e2565b610a6c565b600a83015460ff165b9050805b60ff811615610af85783610a856001836119e2565b60ff1660058110610a9857610a98611947565b600202018460ff831660058110610ab157610ab1611947565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610af081611b17565b915050610a70565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610b5b57600a8301805460ff16906000610b4183611973565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610bb7565b600092505b50505b9392505050565b610bcd600360126119e2565b610bd890600a611ae9565b81565b6000546001600160a01b03163314610c515760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b606482015260840161071e565b6001546001600160a01b031615610cca5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b606482015260840161071e565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d6e5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b606482015260840161071e565b6005546001600160a01b031615610de75760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b606482015260840161071e565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610e3f5760405162461bcd60e51b815260040161071e90611993565b6001600160a01b0382166000908152600660205260409020610e60816114fc565b610e6c600360126119e2565b610e7790600a611ae9565b821015610e9857600a8101546000925060ff16610e9357505050565b610ed2565b610ea46012600a611ae9565b610eb0906103e8611af8565b821115610ed257610ec36012600a611ae9565b610ecf906103e8611af8565b91505b600a810154439060ff16610f8b5782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610f1683611973565b91906101000a81548160ff021916908360ff16021790555050836001600160a01b03167f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a8285604051610f7e9291906001600160401b03929092168252602082015260400190565b60405180910390a2610fee565b8154831015610fee57508181556001810154604080516001600160401b0390921680835260208301859052916001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a25b50505b5050565b6001600160a01b03811660009081526009602052604081205460ff16823b151581156110325760ff8281161461102b5781611041565b6000611041565b8061103e576016611041565b60005b925060ff83161580611066575060ff8316600a118015906110665750605a60ff841611155b6110825760405162461bcd60e51b815260040161071e90611b34565b5050919050565b6003546001600160a01b031633146110ff5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b606482015260840161071e565b6001600160401b0383166000908152600760205260408120805461ffff169161112783611b89565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b038111156111af576111af61177f565b6040519080825280602002602001820160405280156111d8578160200160208202803683370190505b5092508060ff166001600160401b038111156111f6576111f661177f565b60405190808252806020026020018201604052801561121f578160200160208202803683370190505b50915060005b8160ff168160ff16101561130457611272868260ff168151811061124b5761124b611947565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff168151811061128757611287611947565b602002602001019061ffff16908161ffff16815250506112c3868260ff16815181106112b5576112b5611947565b6020026020010151866114a0565b63ffffffff1660001415838260ff16815181106112e2576112e2611947565b91151560209283029190910190910152806112fc81611973565b915050611225565b50509250929050565b6005546001600160a01b031633146113805760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b606482015260840161071e565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610bd86012600a611ae9565b3360ff821615806113dd575060ff8216600a118015906113dd5750605a60ff831611155b6113f95760405162461bcd60e51b815260040161071e90611b34565b600060ff83161561140a578261140d565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061147190869060ff91909116815260200190565b60405180910390a2505050565b61148a600360126119e2565b61149590600a611ae9565b610bd890600a611af8565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b6114e36012600a611ae9565b610bd8906103e8611af8565b610bd86199686007611bab565b600a810154600160ff90911611156115c357600a8101546000906115259060019060ff166119e2565b90505b60ff811615610ff15760008261153f6001846119e2565b60ff166005811061155257611552611947565b600554600160029290920292909201908101549092506001600160401b03600160a01b90920482169116116115b057600a8301805460ff1690600061159683611b17565b91906101000a81548160ff021916908360ff160217905550505b50806115bb81611b17565b915050611528565b50565b604080825283519082018190526000906020906060840190828701845b828110156115ff578151845292840192908401906001016115e3565b5050508381038285015284518082528583019183019060005b8181101561163d5783516001600160401b031683529284019291840191600101611618565b5090979650505050505050565b80356001600160a01b038116811461166157600080fd5b919050565b60006020828403121561167857600080fd5b610bba8261164a565b80356001600160401b038116811461166157600080fd5b600080604083850312156116ab57600080fd5b6116b48361164a565b91506116c260208401611681565b90509250929050565b6000806000606084860312156116e057600080fd5b6116e98461164a565b9250602084013591506040840135801515811461170557600080fd5b809150509250925092565b6000806040838503121561172357600080fd5b61172c8361164a565b946020939093013593505050565b60008060006060848603121561174f57600080fd5b61175884611681565b92506117666020850161164a565b9150604084013563ffffffff8116811461170557600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156117a857600080fd5b82356001600160401b03808211156117bf57600080fd5b818501915085601f8301126117d357600080fd5b81356020828211156117e7576117e761177f565b8160051b604051601f19603f8301168101818110868211171561180c5761180c61177f565b60405292835281830193508481018201928984111561182a57600080fd5b948201945b8386101561184f5761184086611681565b8552948201949382019361182f565b965061185e905087820161164a565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b828110156118a857815161ffff1684529284019290840190600101611888565b5050508381038285015284518082528583019183019060005b8181101561163d5783511515835292840192918401916001016118c1565b6000602082840312156118f157600080fd5b610bba82611681565b60006020828403121561190c57600080fd5b813560ff81168114610bba57600080fd5b6000806040838503121561193057600080fd5b61193983611681565b91506116c26020840161164a565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561198a5761198a61195d565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff8416808210156119fc576119fc61195d565b90039392505050565b600181815b80851115611a40578160001904821115611a2657611a2661195d565b80851615611a3357918102915b93841c9390800290611a0a565b509250929050565b600082611a5757506001610933565b81611a6457506000610933565b8160018114611a7a5760028114611a8457611aa0565b6001915050610933565b60ff841115611a9557611a9561195d565b50506001821b610933565b5060208310610133831016604e8410600b8410161715611ac3575081810a610933565b611acd8383611a05565b8060001904821115611ae157611ae161195d565b029392505050565b6000610bba60ff841683611a48565b6000816000190483118215151615611b1257611b1261195d565b500290565b600060ff821680611b2a57611b2a61195d565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff80831681811415611ba157611ba161195d565b6001019392505050565b60006001600160401b0380831681851681830481118215151615611bd157611bd161195d565b0294935050505056fea2646970667358221220642639f9abe5654d841dbf9c88ccf35859ea16781c9b88183389ee50a1a0526264736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6672,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6674,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6749,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"2","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_trusteeAddr","offset":0,"slot":"3","type":"t_address"},{"astId":6554,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"4","type":"t_address"},{"astId":6556,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_adminAddr","offset":0,"slot":"5","type":"t_address"},{"astId":4792,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_firstBlockNumber","offset":20,"slot":"5","type":"t_uint64"},{"astId":4797,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_balanceRecords","offset":0,"slot":"6","type":"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)"},{"astId":4801,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimsCnt","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_uint16)"},{"astId":4807,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimed","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_mapping(t_address,t_uint32))"},{"astId":4811,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_commisions","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint8)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage":{"base":"t_struct(AddrBalanceRecord)4782_storage","encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord[5]","numberOfBytes":"320"},"t_mapping(t_address,t_struct(AddrBalanceRecords)4790_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaRecords.AddrBalanceRecords)","numberOfBytes":"32","value":"t_struct(AddrBalanceRecords)4790_storage"},"t_mapping(t_address,t_uint32)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint32)","numberOfBytes":"32","value":"t_uint32"},"t_mapping(t_address,t_uint8)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint8)","numberOfBytes":"32","value":"t_uint8"},"t_mapping(t_uint64,t_mapping(t_address,t_uint32))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(address => uint32))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint32)"},"t_mapping(t_uint64,t_uint16)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_struct(AddrBalanceRecord)4782_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord","members":[{"astId":4779,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"balance","offset":0,"slot":"0","type":"t_uint256"},{"astId":4781,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"}],"numberOfBytes":"64"},"t_struct(AddrBalanceRecords)4790_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecords","members":[{"astId":4787,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"records","offset":0,"slot":"0","type":"t_array(t_struct(AddrBalanceRecord)4782_storage)5_storage"},{"astId":4789,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"recordsCnt","offset":0,"slot":"10","type":"t_uint8"}],"numberOfBytes":"352"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},433:function(e){e.exports=JSON.parse('{"address":"0x45715c741B01abF1a8BD8549C6c4F51C89778efD","abi":[{"inputs":[{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"challenge","type":"uint256"},{"indexed":false,"internalType":"bool","name":"premium","type":"bool"}],"name":"AddChallenge","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MAX_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bool","name":"premium","type":"bool"}],"name":"_cleanupChallenge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"addChallenges","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChallengesAllowance","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"readChallenges","outputs":[{"internalType":"uint8","name":"totalCnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"uint16[]","name":"rewardUnits","type":"uint16[]"},{"internalType":"uint256[]","name":"challengeHashes","type":"uint256[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"retrieveChallenge","outputs":[{"components":[{"internalType":"uint256","name":"challengeHash","type":"uint256"},{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint16","name":"rewardUnits","type":"uint16"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint8","name":"prev","type":"uint8"},{"internalType":"uint8","name":"next","type":"uint8"}],"internalType":"struct ChallengeRecords.Challenge","name":"ch","type":"tuple"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"generalDifficulty","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x953d67a68b39b0e88695cb0eb4ea17974854fae8bf854bb0b479d20c320da401","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x45715c741B01abF1a8BD8549C6c4F51C89778efD","transactionIndex":0,"gasUsed":"7504008","logsBloom":"0xblockHash":"0xcd79921cfafacee42b7e00e02d7cf2cf96ba196ff96f1fbe3fc67d35a852c2ea","transactionHash":"0x953d67a68b39b0e88695cb0eb4ea17974854fae8bf854bb0b479d20c320da401","logs":[{"transactionIndex":0,"blockNumber":24634513,"transactionHash":"0x953d67a68b39b0e88695cb0eb4ea17974854fae8bf854bb0b479d20c320da401","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x000000000000000000000000000000000000000000000000031fc9aa5d5f5bc00000000000000000000000000000000000000000000000000956d300a1a6777c00000000000000000000000000000000000000000000064774e2d984ea83a5a20000000000000000000000000000000000000000000000000637095644471bbc0000000000000000000000000000000000000000000006477802a32f47e30162","logIndex":0,"blockHash":"0xcd79921cfafacee42b7e00e02d7cf2cf96ba196ff96f1fbe3fc67d35a852c2ea"}],"blockNumber":24634513,"cumulativeGasUsed":"7504008","status":1,"byzantium":true},"args":["0x5498F0fd40dE223057637980910720cf1745ba01"],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"challenge\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"AddChallenge\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MAX_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_cleanupChallenge\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"addChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChallengesAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"readChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"totalCnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"challengeHashes\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"retrieveChallenge\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"challengeHash\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"index\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"prev\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"next\\",\\"type\\":\\"uint8\\"}],\\"internalType\\":\\"struct ChallengeRecords.Challenge\\",\\"name\\":\\"ch\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaAdmin.sol\\":\\"LuminaAdmin\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\n\\\\ncontract LuminaAdmin is ILuminaAdmin, Parameters, ChallengeRecords, OnlyTrustee {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    // Challenge Records\\\\n    ChallengeSet private _basicChallenges;\\\\n    ChallengeSet private _premiumChallenges;\\\\n\\\\n    // Challenge Records Creation Management\\\\n    uint64 private _createdBasicChallenges;\\\\n    uint64 private _createdPremiumChallenges;\\\\n\\\\n    uint64 private _startingBlockNumber; // First block of the Newton Era\\\\n    uint64 private _nextChallengeBlockNumber; // Block number assigned for next challenge\\\\n    uint64 private _nextDonorBlockNumber; // Next donor block number providing blockHash to the next challenge\\\\n\\\\n    uint64 private _blocksPerChallenge; // Adjusted current blocks per challenge parameter\\\\n    uint64 private _nextBlocksPerChallengeInc; // When is next block-per-challegne increase due\\\\n    uint16 private _rewardUnits; // Current number of reward units\\\\n    uint64 private _nextRewardUnitsInc; // Next increase of reward units until 1 full token\\\\n\\\\n    event AddChallenge(uint64 indexed blockNumber, uint256 challenge, bool premium);\\\\n\\\\n    constructor(address recordsAddr_) {\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n\\\\n        _challengeSetInit(_basicChallenges);\\\\n        _challengeSetInit(_premiumChallenges);\\\\n\\\\n        _createdBasicChallenges = 0;\\\\n        _createdPremiumChallenges = 0;\\\\n\\\\n        _startingBlockNumber = uint64(block.number) > (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) ? uint64(block.number) - (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) : 0;\\\\n        _nextChallengeBlockNumber = _startingBlockNumber;\\\\n        _nextDonorBlockNumber = 0;\\\\n        _blocksPerChallenge = BLOCKS_PER_CHALLENGE;\\\\n        _nextBlocksPerChallengeInc = 0;\\\\n        _rewardUnits = REWARD_UNITS_START;\\\\n        _nextRewardUnitsInc = REWARD_INC_INTERVAL;\\\\n    }\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (totalCnt, indexes, blockNumbers, rewardUnits, challengeHashes, nexts) = _challengesGet(chs, limit);\\\\n        (claimsCnt, claimed) = records.getClaims(blockNumbers, msg.sender);\\\\n    }\\\\n\\\\n    // Calculates a close estimate of how many new challegnes\\\\n    // are allowed to be added to the system\\\\n    function getChallengesAllowance() external view returns (uint8) {\\\\n        if(_basicChallenges.cnt >= MAX_CHALLENGE_CNT || _premiumChallenges.cnt >= MAX_CHALLENGE_CNT) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        if(blockNumber <= _nextChallengeBlockNumber) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 cnt = (blockNumber + _blocksPerChallenge - 1 - _nextChallengeBlockNumber) / _blocksPerChallenge;\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        uint64 nextDonorBlockNumber = _nextDonorBlockNumber;\\\\n        if(nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n\\\\n        require(nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n        uint64 donorsCnt = blockNumber - nextDonorBlockNumber;\\\\n\\\\n        if(donorsCnt < cnt) {\\\\n            cnt = donorsCnt;\\\\n        }\\\\n\\\\n        require(cnt <= MAX_DONOR_BLOCKS, \\\\\\"Failed: cnt <= MAX_DONOR_BLOCKS\\\\\\");\\\\n        return uint8(cnt);\\\\n    }\\\\n\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (Challenge memory ch, bool premium, uint8 generalDifficulty) {\\\\n        premium = false;\\\\n        uint8 chi;\\\\n        (chi, generalDifficulty) = _challengeFind(_basicChallenges, blockNumber);\\\\n        if(chi == CHALLENGE_NULL) {\\\\n            (chi, generalDifficulty) = _challengeFind(_premiumChallenges, blockNumber);\\\\n            premium = true;\\\\n        }\\\\n        require(chi != CHALLENGE_NULL, \\\\\\"Challenge with this blockNumber doesn\'t exist or has been claimed already\\\\\\");\\\\n        ch = _challengeGet(premium ? _premiumChallenges : _basicChallenges, chi);\\\\n\\\\n        require(ch.blockNumber == blockNumber, \\\\\\"Corrupt blockNumber in challenge\\\\\\");\\\\n    }\\\\n\\\\n    function addChallenges(uint8 limit) public returns (uint8) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        if(_nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            _nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n        require(_nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: _nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n\\\\n        // Create new challenges\\\\n        uint8 i = 0;\\\\n        while(i < limit\\\\n            && _nextDonorBlockNumber < blockNumber\\\\n            && _nextChallengeBlockNumber < blockNumber\\\\n            && _basicChallenges.cnt < MAX_CHALLENGE_CNT\\\\n            && _premiumChallenges.cnt < MAX_CHALLENGE_CNT\\\\n        ) {\\\\n            uint64 bn = _nextDonorBlockNumber;\\\\n\\\\n            // Calculate a challenge hash\\\\n            bytes32 bh = blockhash(bn);\\\\n            require(uint256(bh) != 0, \\\\\\"Missing blockhash number\\\\\\");\\\\n\\\\n            bytes memory data = abi.encodePacked(uint256(bh), uint256(uint160(msg.sender)), uint256(uint160(address(this))), uint256(blockNumber) ^ uint256(block.chainid));\\\\n            require(data.length == 128, \\\\\\"Invalid challenge data\\\\\\");\\\\n            uint256 challengeHash = uint256(keccak256(data));\\\\n\\\\n            if(uint8(challengeHash >> 252) == LUCKY_NUMBER) {\\\\n                emit AddChallenge(blockNumber, challengeHash, true);\\\\n                _challengeInsertTail(_premiumChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdPremiumChallenges++;\\\\n            } else {\\\\n                emit AddChallenge(blockNumber, challengeHash, false);\\\\n                _challengeInsertTail(_basicChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdBasicChallenges++;\\\\n            }\\\\n\\\\n            _nextDonorBlockNumber++;\\\\n            _nextChallengeBlockNumber += _blocksPerChallenge;\\\\n\\\\n            if(_rewardUnits < REWARD_UNITS_STANDARD) {\\\\n                // Newton Epoch - Managing the ramp-up\\\\n                if(_createdBasicChallenges >= _nextRewardUnitsInc) {\\\\n                    // Increase the reward\\\\n                    _rewardUnits += REWARD_UNITS_INC;\\\\n                    _nextRewardUnitsInc += REWARD_INC_INTERVAL;\\\\n                    if(_rewardUnits >= REWARD_UNITS_STANDARD) {\\\\n                        // Switching to Einstein Epoch\\\\n                        _nextRewardUnitsInc = 0;\\\\n                        _nextBlocksPerChallengeInc = blockNumber + BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n                    }\\\\n                }\\\\n            } else if(blockNumber >= _nextBlocksPerChallengeInc) {\\\\n                // Einstein Epoch - Managing the cooldown\\\\n                _blocksPerChallenge += BLOCKS_PER_CHALLENGE_INC;\\\\n                _nextBlocksPerChallengeInc += BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n            }\\\\n\\\\n            i++;\\\\n        }\\\\n\\\\n        return i;\\\\n    }\\\\n\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external onlyTrustee {\\\\n        // All rewards were claimed, remove challenge from the set\\\\n        ChallengeRecords.ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (uint8 index, uint8 generalDifficulty2) = _challengeFind(chs, blockNumber);\\\\n        require(index != CHALLENGE_NULL, \\\\\\"Corrupt challenge records\\\\\\");\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty2 && generalDifficulty2 <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        _challengeRemove(chs, index);\\\\n\\\\n        uint64 bn1 = _challengeGetFirstBlock(_basicChallenges);\\\\n        uint64 bn2 = _challengeGetFirstBlock(_premiumChallenges);\\\\n        records._updateFirstBlockNumber(bn1 < bn2 ? bn1 : bn2);\\\\n\\\\n        // If you are the lucky miner, why not pay for a few more challenge?\\\\n        addChallenges(10);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfc16e8dbb6073dcf275bdfef06d4dacefafa13756c62b06a9b33978747442da0\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI or at most 10,000 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MAX_RECIPIENT_BALANCE = 10*1000*1000*REWARD_UNIT; // 10,000 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 2 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe41080651c009b319e6c2a8d03d55fdb6063a1afdb73a2310453a00fd63638bf\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6762,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6764,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_trusteeAddr","offset":0,"slot":"1","type":"t_address"},{"astId":2710,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":2713,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"records","offset":0,"slot":"3","type":"t_contract(ILuminaRecords)2689"},{"astId":2716,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_basicChallenges","offset":0,"slot":"4","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2719,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_premiumChallenges","offset":0,"slot":"205","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2721,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdBasicChallenges","offset":0,"slot":"406","type":"t_uint64"},{"astId":2723,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdPremiumChallenges","offset":8,"slot":"406","type":"t_uint64"},{"astId":2725,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_startingBlockNumber","offset":16,"slot":"406","type":"t_uint64"},{"astId":2727,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextChallengeBlockNumber","offset":24,"slot":"406","type":"t_uint64"},{"astId":2729,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextDonorBlockNumber","offset":0,"slot":"407","type":"t_uint64"},{"astId":2731,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_blocksPerChallenge","offset":8,"slot":"407","type":"t_uint64"},{"astId":2733,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextBlocksPerChallengeInc","offset":16,"slot":"407","type":"t_uint64"},{"astId":2735,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_rewardUnits","offset":24,"slot":"407","type":"t_uint16"},{"astId":2737,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextRewardUnitsInc","offset":0,"slot":"408","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Challenge)1498_storage)100_storage":{"base":"t_struct(Challenge)1498_storage","encoding":"inplace","label":"struct ChallengeRecords.Challenge[100]","numberOfBytes":"6400"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_struct(Challenge)1498_storage":{"encoding":"inplace","label":"struct ChallengeRecords.Challenge","members":[{"astId":1485,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"challengeHash","offset":0,"slot":"0","type":"t_uint256"},{"astId":1487,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"},{"astId":1489,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"rewardUnits","offset":8,"slot":"1","type":"t_uint16"},{"astId":1491,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"index","offset":10,"slot":"1","type":"t_uint8"},{"astId":1493,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"valid","offset":11,"slot":"1","type":"t_bool"},{"astId":1495,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"prev","offset":12,"slot":"1","type":"t_uint8"},{"astId":1497,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"next","offset":13,"slot":"1","type":"t_uint8"}],"numberOfBytes":"64"},"t_struct(ChallengeSet)1512_storage":{"encoding":"inplace","label":"struct ChallengeRecords.ChallengeSet","members":[{"astId":1503,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"ch","offset":0,"slot":"0","type":"t_array(t_struct(Challenge)1498_storage)100_storage"},{"astId":1505,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"cnt","offset":0,"slot":"200","type":"t_uint8"},{"astId":1507,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"freeIndex","offset":1,"slot":"200","type":"t_uint8"},{"astId":1509,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"head","offset":2,"slot":"200","type":"t_uint8"},{"astId":1511,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"tail","offset":3,"slot":"200","type":"t_uint8"}],"numberOfBytes":"6432"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},434:function(e){e.exports=JSON.parse('{"address":"0xdFA3F1F27106aA91004acdE7Bf09B1aAC3cf3182","abi":[{"inputs":[{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"challenge","type":"uint256"},{"indexed":false,"internalType":"bool","name":"premium","type":"bool"}],"name":"AddChallenge","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bool","name":"premium","type":"bool"}],"name":"_cleanupChallenge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"addChallenges","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChallengesAllowance","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"readChallenges","outputs":[{"internalType":"uint8","name":"totalCnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"uint16[]","name":"rewardUnits","type":"uint16[]"},{"internalType":"uint256[]","name":"challengeHashes","type":"uint256[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"retrieveChallenge","outputs":[{"components":[{"internalType":"uint256","name":"challengeHash","type":"uint256"},{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint16","name":"rewardUnits","type":"uint16"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint8","name":"prev","type":"uint8"},{"internalType":"uint8","name":"next","type":"uint8"}],"internalType":"struct ChallengeRecords.Challenge","name":"ch","type":"tuple"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"generalDifficulty","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x1e5785c8fa0d5a2765bd67c6e110ace6b027a9c3de88db7b493b68902327583c","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xdFA3F1F27106aA91004acdE7Bf09B1aAC3cf3182","transactionIndex":0,"gasUsed":"7481029","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x92a5a2128009c08f2ecc6874ff65907d2923e265dd8344f5b33b41fd310f944e","transactionHash":"0x1e5785c8fa0d5a2765bd67c6e110ace6b027a9c3de88db7b493b68902327583c","logs":[],"blockNumber":235,"cumulativeGasUsed":"7481029","status":1,"byzantium":true},"args":["0xd5ffA09cF11Eee69A4A9D549F769CcDc3457a6e9"],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"challenge\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"AddChallenge\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_cleanupChallenge\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"addChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChallengesAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"readChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"totalCnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"challengeHashes\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"retrieveChallenge\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"challengeHash\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"index\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"prev\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"next\\",\\"type\\":\\"uint8\\"}],\\"internalType\\":\\"struct ChallengeRecords.Challenge\\",\\"name\\":\\"ch\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaAdmin.sol\\":\\"LuminaAdmin\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\n\\\\ncontract LuminaAdmin is ILuminaAdmin, Parameters, ChallengeRecords, OnlyTrustee {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    // Challenge Records\\\\n    ChallengeSet private _basicChallenges;\\\\n    ChallengeSet private _premiumChallenges;\\\\n\\\\n    // Challenge Records Creation Management\\\\n    uint64 private _createdBasicChallenges;\\\\n    uint64 private _createdPremiumChallenges;\\\\n\\\\n    uint64 private _startingBlockNumber; // First block of the Newton Era\\\\n    uint64 private _nextChallengeBlockNumber; // Block number assigned for next challenge\\\\n    uint64 private _nextDonorBlockNumber; // Next donor block number providing blockHash to the next challenge\\\\n\\\\n    uint64 private _blocksPerChallenge; // Adjusted current blocks per challenge parameter\\\\n    uint64 private _nextBlocksPerChallengeInc; // When is next block-per-challegne increase due\\\\n    uint16 private _rewardUnits; // Current number of reward units\\\\n    uint64 private _nextRewardUnitsInc; // Next increase of reward units until 1 full token\\\\n\\\\n    event AddChallenge(uint64 indexed blockNumber, uint256 challenge, bool premium);\\\\n\\\\n    constructor(address recordsAddr_) {\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n\\\\n        _challengeSetInit(_basicChallenges);\\\\n        _challengeSetInit(_premiumChallenges);\\\\n\\\\n        _createdBasicChallenges = 0;\\\\n        _createdPremiumChallenges = 0;\\\\n\\\\n        _startingBlockNumber = uint64(block.number) > (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) ? uint64(block.number) - (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) : 0;\\\\n        _nextChallengeBlockNumber = _startingBlockNumber;\\\\n        _nextDonorBlockNumber = 0;\\\\n        _blocksPerChallenge = BLOCKS_PER_CHALLENGE;\\\\n        _nextBlocksPerChallengeInc = 0;\\\\n        _rewardUnits = REWARD_UNITS_START;\\\\n        _nextRewardUnitsInc = REWARD_INC_INTERVAL;\\\\n    }\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (totalCnt, indexes, blockNumbers, rewardUnits, challengeHashes, nexts) = _challengesGet(chs, limit);\\\\n        (claimsCnt, claimed) = records.getClaims(blockNumbers, msg.sender);\\\\n    }\\\\n\\\\n    // Calculates a close estimate of how many new challegnes\\\\n    // are allowed to be added to the system\\\\n    function getChallengesAllowance() external view returns (uint8) {\\\\n        if(_basicChallenges.cnt >= MAX_CHALLENGE_CNT || _premiumChallenges.cnt >= MAX_CHALLENGE_CNT) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        if(blockNumber <= _nextChallengeBlockNumber) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 cnt = (blockNumber + _blocksPerChallenge - 1 - _nextChallengeBlockNumber) / _blocksPerChallenge;\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        uint64 nextDonorBlockNumber = _nextDonorBlockNumber;\\\\n        if(nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n\\\\n        require(nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n        uint64 donorsCnt = blockNumber - nextDonorBlockNumber;\\\\n\\\\n        if(donorsCnt < cnt) {\\\\n            cnt = donorsCnt;\\\\n        }\\\\n\\\\n        require(cnt <= MAX_DONOR_BLOCKS, \\\\\\"Failed: cnt <= MAX_DONOR_BLOCKS\\\\\\");\\\\n        return uint8(cnt);\\\\n    }\\\\n\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (Challenge memory ch, bool premium, uint8 generalDifficulty) {\\\\n        premium = false;\\\\n        uint8 chi;\\\\n        (chi, generalDifficulty) = _challengeFind(_basicChallenges, blockNumber);\\\\n        if(chi == CHALLENGE_NULL) {\\\\n            (chi, generalDifficulty) = _challengeFind(_premiumChallenges, blockNumber);\\\\n            premium = true;\\\\n        }\\\\n        require(chi != CHALLENGE_NULL, \\\\\\"Challenge with this blockNumber doesn\'t exist or has been claimed already\\\\\\");\\\\n        ch = _challengeGet(premium ? _premiumChallenges : _basicChallenges, chi);\\\\n\\\\n        require(ch.blockNumber == blockNumber, \\\\\\"Corrupt blockNumber in challenge\\\\\\");\\\\n    }\\\\n\\\\n    function addChallenges(uint8 limit) public returns (uint8) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        if(_nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            _nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n        require(_nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: _nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n\\\\n        // Create new challenges\\\\n        uint8 i = 0;\\\\n        while(i < limit\\\\n            && _nextDonorBlockNumber < blockNumber\\\\n            && _nextChallengeBlockNumber < blockNumber\\\\n            && _basicChallenges.cnt < MAX_CHALLENGE_CNT\\\\n            && _premiumChallenges.cnt < MAX_CHALLENGE_CNT\\\\n        ) {\\\\n            uint64 bn = _nextDonorBlockNumber;\\\\n\\\\n            // Calculate a challenge hash\\\\n            bytes32 bh = blockhash(bn);\\\\n            require(uint256(bh) != 0, \\\\\\"Missing blockhash number\\\\\\");\\\\n\\\\n            bytes memory data = abi.encodePacked(uint256(bh), uint256(uint160(msg.sender)), uint256(uint160(address(this))), uint256(blockNumber) ^ uint256(block.chainid));\\\\n            require(data.length == 128, \\\\\\"Invalid challenge data\\\\\\");\\\\n            uint256 challengeHash = uint256(keccak256(data));\\\\n\\\\n            if(uint8(challengeHash >> 252) == LUCKY_NUMBER) {\\\\n                emit AddChallenge(blockNumber, challengeHash, true);\\\\n                _challengeInsertTail(_premiumChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdPremiumChallenges++;\\\\n            } else {\\\\n                emit AddChallenge(blockNumber, challengeHash, false);\\\\n                _challengeInsertTail(_basicChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdBasicChallenges++;\\\\n            }\\\\n\\\\n            _nextDonorBlockNumber++;\\\\n            _nextChallengeBlockNumber += _blocksPerChallenge;\\\\n\\\\n            if(_rewardUnits < REWARD_UNITS_STANDARD) {\\\\n                // Newton Epoch - Managing the ramp-up\\\\n                if(_createdBasicChallenges >= _nextRewardUnitsInc) {\\\\n                    // Increase the reward\\\\n                    _rewardUnits += REWARD_UNITS_INC;\\\\n                    _nextRewardUnitsInc += REWARD_INC_INTERVAL;\\\\n                    if(_rewardUnits >= REWARD_UNITS_STANDARD) {\\\\n                        // Switching to Einstein Epoch\\\\n                        _nextRewardUnitsInc = 0;\\\\n                        _nextBlocksPerChallengeInc = blockNumber + BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n                    }\\\\n                }\\\\n            } else if(blockNumber >= _nextBlocksPerChallengeInc) {\\\\n                // Einstein Epoch - Managing the cooldown\\\\n                _blocksPerChallenge += BLOCKS_PER_CHALLENGE_INC;\\\\n                _nextBlocksPerChallengeInc += BLOCKS_PER_CHALLENGE_INC_INTERVAL;\\\\n            }\\\\n\\\\n            i++;\\\\n        }\\\\n\\\\n        return i;\\\\n    }\\\\n\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external onlyTrustee {\\\\n        // All rewards were claimed, remove challenge from the set\\\\n        ChallengeRecords.ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (uint8 index, uint8 generalDifficulty2) = _challengeFind(chs, blockNumber);\\\\n        require(index != CHALLENGE_NULL, \\\\\\"Corrupt challenge records\\\\\\");\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty2 && generalDifficulty2 <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        _challengeRemove(chs, index);\\\\n\\\\n        uint64 bn1 = _challengeGetFirstBlock(_basicChallenges);\\\\n        uint64 bn2 = _challengeGetFirstBlock(_premiumChallenges);\\\\n        records._updateFirstBlockNumber(bn1 < bn2 ? bn1 : bn2);\\\\n\\\\n        // If you are the lucky miner, why not pay for a few more challenge?\\\\n        addChallenges(10);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfc16e8dbb6073dcf275bdfef06d4dacefafa13756c62b06a9b33978747442da0\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x19515758397fdbbdde67a6f4c5f2d02f89aa369109752c5dcfec52d1adb626ac\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162002bfd38038062002bfd833981016040819052620000349162000275565b600080546001600160a01b031990811633179091556002805482166001600160a01b0384169081179091556003805490921617905562000075600462000175565b6200008160cd62000175565b61019680546001600160801b0319169055620000a0600260c8620002bd565b6001600160401b0316436001600160401b031611620000c1576000620000db565b620000cf600260c8620002bd565b620000db9043620002ef565b61019680546001600160801b0381166001600160c01b036001600160401b03948516600160801b90810291821692909217600160801b600160c01b03199093161704909216600160c01b02919091179055506101978054780a0000000000000000000000000000000200000000000000006001600160d01b031990911617905561019880546001600160401b03191660051790556200037b565b60005b606460ff821610156200025e5760008260ff8316606481106200019f576200019f6200031a565b6000600291909102919091019081556001808201805461ffff60581b1960ff87166a010000000000000000000002166001600160681b0319909116176cff000000000000000000000000179055909150606490620001ff90849062000330565b60ff1610620002105760ff6200021d565b6200021d82600162000330565b6001909101805460ff929092166d01000000000000000000000000000260ff60681b1990921691909117905580620002558162000358565b91505062000178565b5060c801805463ffffffff191663ffff0000179055565b6000602082840312156200028857600080fd5b81516001600160a01b0381168114620002a057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0382811684821681151582840482111615620002e657620002e6620002a7565b02949350505050565b60006001600160401b0383811690831681811015620003125762000312620002a7565b039392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115620003505762000350620002a7565b019392505050565b600060ff821660ff811415620003725762000372620002a7565b60010192915050565b612872806200038b6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806373d6aafa11610104578063c28bd11c116100a2578063ec2165d311610071578063ec2165d314610360578063f5d4d8a114610368578063f7f595fb1461038a578063f883fcaa1461030f57600080fd5b8063c28bd11c1461030f578063c28cedf314610337578063c6088d971461034f578063e81ec6121461035857600080fd5b8063a2157767116100de578063a215776714610317578063a5c9cd821461031f578063b313bd6214610327578063b91268e81461032f57600080fd5b806373d6aafa146103075780637fb012321461030f5780639d9413621461030757600080fd5b8063345af9771161017c578063504b36621161014b578063504b3662146102c757806357dce6ff146102cf5780635b7f415c146102f65780636bb987fe146102fe57600080fd5b8063345af9771461028e5780633a3a7c53146102a15780633e6e387c146102b7578063479e92c8146102bf57600080fd5b806314270b65116101b857806314270b65146102215780631df55679146102465780631e7bfd601461025b57806330db4fa01461026e57600080fd5b806306e38632146101df5780630bf43309146101ff578063132e12c414610219575b600080fd5b6101e7600581565b60405161ffff90911681526020015b60405180910390f35b61020760d081565b60405160ff90911681526020016101f6565b61020761039d565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101f6565b610259610254366004611ff1565b610594565b005b60025461022e906001600160a01b031681565b61027660c881565b6040516001600160401b0390911681526020016101f6565b61020761029c366004612030565b6106c1565b6102a9610cff565b6040519081526020016101f6565b6101e7600281565b610207600a81565b610207606481565b6102e26102dd366004612063565b610d19565b6040516101f6989796959493929190612175565b610207601281565b61027661996881565b6101e7600a81565b610207600281565b61020760ff81565b6102a9610ddc565b610276600281565b6102a9610de8565b61033f600181565b60405190151581526020016101f6565b6101e76103e881565b6102a9610e0a565b610276610e22565b61037b610376366004612254565b610e2f565b6040516101f69392919061226f565b6102596103983660046122ef565b61100c565b60cc54600090606460ff9091161015806103c0575061019554606460ff90911610155b156103cb5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103f357600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b9004166001610425838661233c565b61042f9190612367565b6104399190612367565b610443919061238f565b9050600060c86001600160401b0384161161045f57600061046a565b61046a60c884612367565b610197549091506001600160401b039081169082168110156104895750805b836001600160401b0316816001600160401b031611156105045760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006105108286612367565b9050836001600160401b0316816001600160401b03161015610530578093505b60c86001600160401b038516111561058a5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104fb565b5091949350505050565b6000546001600160a01b031633146106145760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104fb565b6001546001600160a01b0316156106935760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104fb565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106dd5760006106e8565b6106e860c883612367565b610197549091506001600160401b038083169116101561072057610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107945760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104fb565b60005b8460ff168160ff161080156107ba5750610197546001600160401b038085169116105b80156107db5750610196546001600160401b03808516600160c01b90920416105b80156107ee575060cc54606460ff909116105b8015610802575061019554606460ff909116105b15610cf757610197546001600160401b03168040806108635760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104fb565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108ee5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104fb565b8051602082012060fc81901c600214156109af5760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261096460cd858361019760189054906101000a900461ffff1661121e565b6101968054600160401b90046001600160401b0316906008610985836123c3565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a51565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a2610a116004858361019760189054906101000a900461ffff1661121e565b61019680546001600160401b0316906000610a2b836123c3565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a6b836123c3565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610acb919061233c565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610c225761019854610196546001600160401b03918216911610610c1d57600a61019760188282829054906101000a900461ffff16610b4291906123ea565b92506101000a81548161ffff021916908361ffff1602179055506001610b6a57610a8c610b6d565b60055b610198805461ffff9290921691600090610b919084906001600160401b031661233c565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610c1d57610198805467ffffffffffffffff19169055610beb6199686007612407565b610bf5908861233c565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610ce1565b610197546001600160401b03600160801b909104811690881610610ce157600261019760088282829054906101000a90046001600160401b0316610c66919061233c565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506199686007610c999190612407565b6101978054601090610cbc908490600160801b90046001600160401b031661233c565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ceb81612436565b95505050505050610797565b949350505050565b610d0b60036012612456565b610d1690600a612555565b81565b6000606080606080606080606060008a610d34576004610d37565b60cd5b9050610d43818b611498565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d83908a903390600401612564565b600060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc8919081019061266b565b999c989b5096995094979396929594505050565b610d166012600a612555565b610df460036012612456565b610dff90600a612555565b610d1690600a612737565b610e166012600a612555565b610d16906103e8612737565b610d166199686007612407565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610e7560048661186f565b9250905060ff8082161415610e9857610e8f60cd8661186f565b60019450925090505b60ff8181161415610f235760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104fb565b610f3b83610f32576004610f35565b60cd5b82611aed565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c0840152919550908616146110045760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104fb565b509193909250565b6001546001600160a01b031633146110825760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104fb565b600081611090576004611093565b60cd5b90506000806110a2838661186f565b909250905060ff80831614156110fa5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104fb565b60ff8116600a11801590611112575060d060ff821611155b61115e5760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fb565b6111688383611c06565b60006111746004611ed6565b9050600061118260cd611ed6565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111af57826111b1565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b1580156111f257600080fd5b505af1158015611206573d6000803e3d6000fd5b50505050611214600a6106c1565b5050505050505050565b60c8840154606460ff909116106112875760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104fb565b60c8840154610100900460ff16606481106112b45760405162461bcd60e51b81526004016104fb90612756565b60006112c08683611aed565b6001810154909150600160581b900460ff161561133c5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104fb565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b19161790935554919091048116146114185760006113fd878860c80160039054906101000a900460ff16611aed565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156114625760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff1690600061147783612436565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114cf5760c889015460ff166114d1565b875b60c88a015460ff908116985090915081166001600160401b038111156114f9576114f961258e565b604051908082528060200260200182016040528015611522578160200160208202803683370190505b5095508060ff166001600160401b038111156115405761154061258e565b604051908082528060200260200182016040528015611569578160200160208202803683370190505b5094508060ff166001600160401b038111156115875761158761258e565b6040519080825280602002602001820160405280156115b0578160200160208202803683370190505b5092508060ff166001600160401b038111156115ce576115ce61258e565b6040519080825280602002602001820160405280156115f7578160200160208202803683370190505b5091508060ff166001600160401b038111156116155761161561258e565b60405190808252806020026020018201604052801561163e578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117e357600061166d8c84611aed565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b9185169081106116fb576116fb612799565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061172957611729612799565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff168151811061176357611763612799565b602002602001019061ffff16908161ffff16815250508060000151868360ff168151811061179357611793612799565b6020026020010181815250508060c00151858360ff16815181106117b9576117b9612799565b60ff9092166020928302919091019091015260c001519150806117db81612436565b915050611653565b5060c88a015460ff908116908a1610806117ff575060ff818116145b6118635760405162461bcd60e51b815260206004820152602f60248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765734765742860448201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b60648201526084016104fb565b50509295509295509295565b60c8820154600090819060ff1660648111156119045760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104fb565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611ac15760006119348786611aed565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611aa957806060015160ff168560ff16146119df5760405162461bcd60e51b81526004016104fb906127af565b60016119eb8385612456565b6119f59190612456565b611a009060026127fe565b611a0b9060d0612456565b935060ff8416600a11801590611a25575060d060ff851611155b611aa15760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104fb565b505050611ae6565b60c00151935080611ab981612436565b91505061191a565b5060ff83811614611ae45760405162461bcd60e51b81526004016104fb906127af565b505b9250929050565b6000606460ff831610611b685760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104fb565b60008360ff841660648110611b7f57611b7f612799565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611bfd5760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104fb565b90505b92915050565b60c882015460ff16611c6b5760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104fb565b6000611c778383611aed565b6001810154909150600160581b900460ff16611ce55760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104fb565b6001810154600160601b900460ff90811614611d40576000611d188483600101600c9054906101000a900460ff16611aed565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d9b576000611d738483600101600d9054906101000a900460ff16611aed565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611ddb57600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611e1e57600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611e3c575060ff818116145b611e585760405162461bcd60e51b81526004016104fb90612756565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611eb78361281f565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611ef957439150611feb565b6000611f058483611aed565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611fe45760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104fb565b6020015191505b50919050565b60006020828403121561200357600080fd5b81356001600160a01b0381168114611bfd57600080fd5b803560ff8116811461202b57600080fd5b919050565b60006020828403121561204257600080fd5b61204b8261201a565b9392505050565b801515811461206057600080fd5b50565b6000806040838503121561207657600080fd5b823561208181612052565b915061208f6020840161201a565b90509250929050565b600081518084526020808501945080840160005b838110156120cb57815160ff16875295820195908201906001016120ac565b509495945050505050565b600081518084526020808501945080840160005b838110156120cb5781516001600160401b0316875295820195908201906001016120ea565b600081518084526020808501945080840160005b838110156120cb57815161ffff1687529582019590820190600101612123565b600081518084526020808501945080840160005b838110156120cb578151151587529582019590820190600101612157565b600061010060ff8b168352602081818501526121938285018c612098565b915083820360408501526121a7828b6120d6565b915083820360608501526121bb828a61210f565b84810360808601528851808252828a0193509082019060005b818110156121f0578451835293830193918301916001016121d4565b505084810360a08601526122048189612098565b9250505082810360c084015261221a818661210f565b905082810360e084015261222e8185612143565b9b9a5050505050505050505050565b80356001600160401b038116811461202b57600080fd5b60006020828403121561226657600080fd5b61204b8261223d565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c08501516122d760c084018260ff169052565b5083151560e083015260ff8316610100830152610cf7565b6000806040838503121561230257600080fd5b61230b8361223d565b9150602083013561231b81612052565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851680830382111561235e5761235e612326565b01949350505050565b60006001600160401b038381169083168181101561238757612387612326565b039392505050565b60006001600160401b03808416806123b757634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123e0576123e0612326565b6001019392505050565b600061ffff80831681851680830382111561235e5761235e612326565b60006001600160401b038083168185168183048111821515161561242d5761242d612326565b02949350505050565b600060ff821660ff81141561244d5761244d612326565b60010192915050565b600060ff821660ff84168082101561247057612470612326565b90039392505050565b600181815b80851115611ae457816000190482111561249a5761249a612326565b808516156124a757918102915b93841c939080029061247e565b6000826124c357506001611c00565b816124d057506000611c00565b81600181146124e657600281146124f05761250c565b6001915050611c00565b60ff84111561250157612501612326565b50506001821b611c00565b5060208310610133831016604e8410600b841016171561252f575081810a611c00565b6125398383612479565b806000190482111561254d5761254d612326565b029392505050565b600061204b60ff8416836124b4565b60408152600061257760408301856120d6565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125cc576125cc61258e565b604052919050565b60006001600160401b038211156125ed576125ed61258e565b5060051b60200190565b600082601f83011261260857600080fd5b8151602061261d612618836125d4565b6125a4565b82815260059290921b8401810191818101908684111561263c57600080fd5b8286015b8481101561266057805161265381612052565b8352918301918301612640565b509695505050505050565b6000806040838503121561267e57600080fd5b82516001600160401b038082111561269557600080fd5b818501915085601f8301126126a957600080fd5b815160206126b9612618836125d4565b82815260059290921b840181019181810190898411156126d857600080fd5b948201945b8386101561270757855161ffff811681146126f85760008081fd5b825294820194908201906126dd565b9188015191965090935050508082111561272057600080fd5b5061272d858286016125f7565b9150509250929050565b600081600019048311821515161561275157612751612326565b500290565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff048111821515161561254d5761254d612326565b600060ff82168061283257612832612326565b600019019291505056fea26469706673582212208faa95538bc59ee6d9ee64ab146085a0231909c630ce71e2e79403bffb1cd47864736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806373d6aafa11610104578063c28bd11c116100a2578063ec2165d311610071578063ec2165d314610360578063f5d4d8a114610368578063f7f595fb1461038a578063f883fcaa1461030f57600080fd5b8063c28bd11c1461030f578063c28cedf314610337578063c6088d971461034f578063e81ec6121461035857600080fd5b8063a2157767116100de578063a215776714610317578063a5c9cd821461031f578063b313bd6214610327578063b91268e81461032f57600080fd5b806373d6aafa146103075780637fb012321461030f5780639d9413621461030757600080fd5b8063345af9771161017c578063504b36621161014b578063504b3662146102c757806357dce6ff146102cf5780635b7f415c146102f65780636bb987fe146102fe57600080fd5b8063345af9771461028e5780633a3a7c53146102a15780633e6e387c146102b7578063479e92c8146102bf57600080fd5b806314270b65116101b857806314270b65146102215780631df55679146102465780631e7bfd601461025b57806330db4fa01461026e57600080fd5b806306e38632146101df5780630bf43309146101ff578063132e12c414610219575b600080fd5b6101e7600581565b60405161ffff90911681526020015b60405180910390f35b61020760d081565b60405160ff90911681526020016101f6565b61020761039d565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101f6565b610259610254366004611ff1565b610594565b005b60025461022e906001600160a01b031681565b61027660c881565b6040516001600160401b0390911681526020016101f6565b61020761029c366004612030565b6106c1565b6102a9610cff565b6040519081526020016101f6565b6101e7600281565b610207600a81565b610207606481565b6102e26102dd366004612063565b610d19565b6040516101f6989796959493929190612175565b610207601281565b61027661996881565b6101e7600a81565b610207600281565b61020760ff81565b6102a9610ddc565b610276600281565b6102a9610de8565b61033f600181565b60405190151581526020016101f6565b6101e76103e881565b6102a9610e0a565b610276610e22565b61037b610376366004612254565b610e2f565b6040516101f69392919061226f565b6102596103983660046122ef565b61100c565b60cc54600090606460ff9091161015806103c0575061019554606460ff90911610155b156103cb5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103f357600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b9004166001610425838661233c565b61042f9190612367565b6104399190612367565b610443919061238f565b9050600060c86001600160401b0384161161045f57600061046a565b61046a60c884612367565b610197549091506001600160401b039081169082168110156104895750805b836001600160401b0316816001600160401b031611156105045760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006105108286612367565b9050836001600160401b0316816001600160401b03161015610530578093505b60c86001600160401b038516111561058a5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104fb565b5091949350505050565b6000546001600160a01b031633146106145760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104fb565b6001546001600160a01b0316156106935760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104fb565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106dd5760006106e8565b6106e860c883612367565b610197549091506001600160401b038083169116101561072057610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107945760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104fb565b60005b8460ff168160ff161080156107ba5750610197546001600160401b038085169116105b80156107db5750610196546001600160401b03808516600160c01b90920416105b80156107ee575060cc54606460ff909116105b8015610802575061019554606460ff909116105b15610cf757610197546001600160401b03168040806108635760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104fb565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108ee5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104fb565b8051602082012060fc81901c600214156109af5760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261096460cd858361019760189054906101000a900461ffff1661121e565b6101968054600160401b90046001600160401b0316906008610985836123c3565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a51565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a2610a116004858361019760189054906101000a900461ffff1661121e565b61019680546001600160401b0316906000610a2b836123c3565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a6b836123c3565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610acb919061233c565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610c225761019854610196546001600160401b03918216911610610c1d57600a61019760188282829054906101000a900461ffff16610b4291906123ea565b92506101000a81548161ffff021916908361ffff1602179055506001610b6a57610a8c610b6d565b60055b610198805461ffff9290921691600090610b919084906001600160401b031661233c565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610c1d57610198805467ffffffffffffffff19169055610beb6199686007612407565b610bf5908861233c565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610ce1565b610197546001600160401b03600160801b909104811690881610610ce157600261019760088282829054906101000a90046001600160401b0316610c66919061233c565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506199686007610c999190612407565b6101978054601090610cbc908490600160801b90046001600160401b031661233c565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ceb81612436565b95505050505050610797565b949350505050565b610d0b60036012612456565b610d1690600a612555565b81565b6000606080606080606080606060008a610d34576004610d37565b60cd5b9050610d43818b611498565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d83908a903390600401612564565b600060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc8919081019061266b565b999c989b5096995094979396929594505050565b610d166012600a612555565b610df460036012612456565b610dff90600a612555565b610d1690600a612737565b610e166012600a612555565b610d16906103e8612737565b610d166199686007612407565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610e7560048661186f565b9250905060ff8082161415610e9857610e8f60cd8661186f565b60019450925090505b60ff8181161415610f235760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104fb565b610f3b83610f32576004610f35565b60cd5b82611aed565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c0840152919550908616146110045760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104fb565b509193909250565b6001546001600160a01b031633146110825760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104fb565b600081611090576004611093565b60cd5b90506000806110a2838661186f565b909250905060ff80831614156110fa5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104fb565b60ff8116600a11801590611112575060d060ff821611155b61115e5760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104fb565b6111688383611c06565b60006111746004611ed6565b9050600061118260cd611ed6565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111af57826111b1565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b1580156111f257600080fd5b505af1158015611206573d6000803e3d6000fd5b50505050611214600a6106c1565b5050505050505050565b60c8840154606460ff909116106112875760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104fb565b60c8840154610100900460ff16606481106112b45760405162461bcd60e51b81526004016104fb90612756565b60006112c08683611aed565b6001810154909150600160581b900460ff161561133c5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104fb565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b19161790935554919091048116146114185760006113fd878860c80160039054906101000a900460ff16611aed565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156114625760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff1690600061147783612436565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114cf5760c889015460ff166114d1565b875b60c88a015460ff908116985090915081166001600160401b038111156114f9576114f961258e565b604051908082528060200260200182016040528015611522578160200160208202803683370190505b5095508060ff166001600160401b038111156115405761154061258e565b604051908082528060200260200182016040528015611569578160200160208202803683370190505b5094508060ff166001600160401b038111156115875761158761258e565b6040519080825280602002602001820160405280156115b0578160200160208202803683370190505b5092508060ff166001600160401b038111156115ce576115ce61258e565b6040519080825280602002602001820160405280156115f7578160200160208202803683370190505b5091508060ff166001600160401b038111156116155761161561258e565b60405190808252806020026020018201604052801561163e578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117e357600061166d8c84611aed565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b9185169081106116fb576116fb612799565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061172957611729612799565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff168151811061176357611763612799565b602002602001019061ffff16908161ffff16815250508060000151868360ff168151811061179357611793612799565b6020026020010181815250508060c00151858360ff16815181106117b9576117b9612799565b60ff9092166020928302919091019091015260c001519150806117db81612436565b915050611653565b5060c88a015460ff908116908a1610806117ff575060ff818116145b6118635760405162461bcd60e51b815260206004820152602f60248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765734765742860448201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b60648201526084016104fb565b50509295509295509295565b60c8820154600090819060ff1660648111156119045760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104fb565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611ac15760006119348786611aed565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611aa957806060015160ff168560ff16146119df5760405162461bcd60e51b81526004016104fb906127af565b60016119eb8385612456565b6119f59190612456565b611a009060026127fe565b611a0b9060d0612456565b935060ff8416600a11801590611a25575060d060ff851611155b611aa15760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104fb565b505050611ae6565b60c00151935080611ab981612436565b91505061191a565b5060ff83811614611ae45760405162461bcd60e51b81526004016104fb906127af565b505b9250929050565b6000606460ff831610611b685760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104fb565b60008360ff841660648110611b7f57611b7f612799565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611bfd5760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104fb565b90505b92915050565b60c882015460ff16611c6b5760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104fb565b6000611c778383611aed565b6001810154909150600160581b900460ff16611ce55760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104fb565b6001810154600160601b900460ff90811614611d40576000611d188483600101600c9054906101000a900460ff16611aed565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d9b576000611d738483600101600d9054906101000a900460ff16611aed565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611ddb57600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611e1e57600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611e3c575060ff818116145b611e585760405162461bcd60e51b81526004016104fb90612756565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611eb78361281f565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611ef957439150611feb565b6000611f058483611aed565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611fe45760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104fb565b6020015191505b50919050565b60006020828403121561200357600080fd5b81356001600160a01b0381168114611bfd57600080fd5b803560ff8116811461202b57600080fd5b919050565b60006020828403121561204257600080fd5b61204b8261201a565b9392505050565b801515811461206057600080fd5b50565b6000806040838503121561207657600080fd5b823561208181612052565b915061208f6020840161201a565b90509250929050565b600081518084526020808501945080840160005b838110156120cb57815160ff16875295820195908201906001016120ac565b509495945050505050565b600081518084526020808501945080840160005b838110156120cb5781516001600160401b0316875295820195908201906001016120ea565b600081518084526020808501945080840160005b838110156120cb57815161ffff1687529582019590820190600101612123565b600081518084526020808501945080840160005b838110156120cb578151151587529582019590820190600101612157565b600061010060ff8b168352602081818501526121938285018c612098565b915083820360408501526121a7828b6120d6565b915083820360608501526121bb828a61210f565b84810360808601528851808252828a0193509082019060005b818110156121f0578451835293830193918301916001016121d4565b505084810360a08601526122048189612098565b9250505082810360c084015261221a818661210f565b905082810360e084015261222e8185612143565b9b9a5050505050505050505050565b80356001600160401b038116811461202b57600080fd5b60006020828403121561226657600080fd5b61204b8261223d565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c08501516122d760c084018260ff169052565b5083151560e083015260ff8316610100830152610cf7565b6000806040838503121561230257600080fd5b61230b8361223d565b9150602083013561231b81612052565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851680830382111561235e5761235e612326565b01949350505050565b60006001600160401b038381169083168181101561238757612387612326565b039392505050565b60006001600160401b03808416806123b757634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123e0576123e0612326565b6001019392505050565b600061ffff80831681851680830382111561235e5761235e612326565b60006001600160401b038083168185168183048111821515161561242d5761242d612326565b02949350505050565b600060ff821660ff81141561244d5761244d612326565b60010192915050565b600060ff821660ff84168082101561247057612470612326565b90039392505050565b600181815b80851115611ae457816000190482111561249a5761249a612326565b808516156124a757918102915b93841c939080029061247e565b6000826124c357506001611c00565b816124d057506000611c00565b81600181146124e657600281146124f05761250c565b6001915050611c00565b60ff84111561250157612501612326565b50506001821b611c00565b5060208310610133831016604e8410600b841016171561252f575081810a611c00565b6125398383612479565b806000190482111561254d5761254d612326565b029392505050565b600061204b60ff8416836124b4565b60408152600061257760408301856120d6565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125cc576125cc61258e565b604052919050565b60006001600160401b038211156125ed576125ed61258e565b5060051b60200190565b600082601f83011261260857600080fd5b8151602061261d612618836125d4565b6125a4565b82815260059290921b8401810191818101908684111561263c57600080fd5b8286015b8481101561266057805161265381612052565b8352918301918301612640565b509695505050505050565b6000806040838503121561267e57600080fd5b82516001600160401b038082111561269557600080fd5b818501915085601f8301126126a957600080fd5b815160206126b9612618836125d4565b82815260059290921b840181019181810190898411156126d857600080fd5b948201945b8386101561270757855161ffff811681146126f85760008081fd5b825294820194908201906126dd565b9188015191965090935050508082111561272057600080fd5b5061272d858286016125f7565b9150509250929050565b600081600019048311821515161561275157612751612326565b500290565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff048111821515161561254d5761254d612326565b600060ff82168061283257612832612326565b600019019291505056fea26469706673582212208faa95538bc59ee6d9ee64ab146085a0231909c630ce71e2e79403bffb1cd47864736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6749,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_trusteeAddr","offset":0,"slot":"1","type":"t_address"},{"astId":2710,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":2713,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"records","offset":0,"slot":"3","type":"t_contract(ILuminaRecords)2689"},{"astId":2716,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_basicChallenges","offset":0,"slot":"4","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2719,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_premiumChallenges","offset":0,"slot":"205","type":"t_struct(ChallengeSet)1512_storage"},{"astId":2721,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdBasicChallenges","offset":0,"slot":"406","type":"t_uint64"},{"astId":2723,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdPremiumChallenges","offset":8,"slot":"406","type":"t_uint64"},{"astId":2725,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_startingBlockNumber","offset":16,"slot":"406","type":"t_uint64"},{"astId":2727,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextChallengeBlockNumber","offset":24,"slot":"406","type":"t_uint64"},{"astId":2729,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextDonorBlockNumber","offset":0,"slot":"407","type":"t_uint64"},{"astId":2731,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_blocksPerChallenge","offset":8,"slot":"407","type":"t_uint64"},{"astId":2733,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextBlocksPerChallengeInc","offset":16,"slot":"407","type":"t_uint64"},{"astId":2735,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_rewardUnits","offset":24,"slot":"407","type":"t_uint16"},{"astId":2737,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextRewardUnitsInc","offset":0,"slot":"408","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Challenge)1498_storage)100_storage":{"base":"t_struct(Challenge)1498_storage","encoding":"inplace","label":"struct ChallengeRecords.Challenge[100]","numberOfBytes":"6400"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_struct(Challenge)1498_storage":{"encoding":"inplace","label":"struct ChallengeRecords.Challenge","members":[{"astId":1485,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"challengeHash","offset":0,"slot":"0","type":"t_uint256"},{"astId":1487,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"},{"astId":1489,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"rewardUnits","offset":8,"slot":"1","type":"t_uint16"},{"astId":1491,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"index","offset":10,"slot":"1","type":"t_uint8"},{"astId":1493,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"valid","offset":11,"slot":"1","type":"t_bool"},{"astId":1495,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"prev","offset":12,"slot":"1","type":"t_uint8"},{"astId":1497,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"next","offset":13,"slot":"1","type":"t_uint8"}],"numberOfBytes":"64"},"t_struct(ChallengeSet)1512_storage":{"encoding":"inplace","label":"struct ChallengeRecords.ChallengeSet","members":[{"astId":1503,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"ch","offset":0,"slot":"0","type":"t_array(t_struct(Challenge)1498_storage)100_storage"},{"astId":1505,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"cnt","offset":0,"slot":"200","type":"t_uint8"},{"astId":1507,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"freeIndex","offset":1,"slot":"200","type":"t_uint8"},{"astId":1509,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"head","offset":2,"slot":"200","type":"t_uint8"},{"astId":1511,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"tail","offset":3,"slot":"200","type":"t_uint8"}],"numberOfBytes":"6432"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},435:function(e){e.exports=JSON.parse('{"address":"0xC89A12f2d352b71d505Ce19719A20fDB3569A37b","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"},{"internalType":"address","name":"recordsAddr_","type":"address"},{"internalType":"address","name":"adminAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"miner","type":"address"},{"indexed":false,"internalType":"uint256","name":"solution","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"claimNo","type":"uint16"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"marketingAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"MarketingCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MAX_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"claimReward","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProgress","outputs":[{"internalType":"uint256","name":"progress","type":"uint256"},{"internalType":"uint256","name":"progressMax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"marketingAddr_","type":"address"}],"name":"setMarketingAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifyClaim","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifySolution","outputs":[{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x5d4b3d03456288df9eb8f76f1c42de8b1508adf9b1634af453debaf9ceee29aa","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xC89A12f2d352b71d505Ce19719A20fDB3569A37b","transactionIndex":1,"gasUsed":"2353762","logsBloom":"0x00000000000000020000000000000000000000000000000000800000000000000000000004000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001010000000400000100000000004000000000020000000000000000000800000000010080000080000000000000400000000000000000000008000000000000020000000080000000000000000000200020000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000020000000000000000000000000000000000000000000000000000000000000100000","blockHash":"0x12ac6d98e8bfca0d1f6dcfec316965dcf8a025ca70891079b5c9ed774a9757f8","transactionHash":"0x5d4b3d03456288df9eb8f76f1c42de8b1508adf9b1634af453debaf9ceee29aa","logs":[{"transactionIndex":1,"blockNumber":24634516,"transactionHash":"0x5d4b3d03456288df9eb8f76f1c42de8b1508adf9b1634af453debaf9ceee29aa","address":"0xC89A12f2d352b71d505Ce19719A20fDB3569A37b","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":37,"blockHash":"0x12ac6d98e8bfca0d1f6dcfec316965dcf8a025ca70891079b5c9ed774a9757f8"},{"transactionIndex":1,"blockNumber":24634516,"transactionHash":"0x5d4b3d03456288df9eb8f76f1c42de8b1508adf9b1634af453debaf9ceee29aa","address":"0xC89A12f2d352b71d505Ce19719A20fDB3569A37b","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":38,"blockHash":"0x12ac6d98e8bfca0d1f6dcfec316965dcf8a025ca70891079b5c9ed774a9757f8"},{"transactionIndex":1,"blockNumber":24634516,"transactionHash":"0x5d4b3d03456288df9eb8f76f1c42de8b1508adf9b1634af453debaf9ceee29aa","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000fade05a3c084f00000000000000000000000000000000000000000000000000637095640b3177c000000000000000000000000000000000000000000000647790c6bf46d5eece6000000000000000000000000000000000000000000000000053c2b509cf2928c0000000000000000000000000000000000000000000006477a0749fa111f71d6","logIndex":39,"blockHash":"0x12ac6d98e8bfca0d1f6dcfec316965dcf8a025ca70891079b5c9ed774a9757f8"}],"blockNumber":24634516,"cumulativeGasUsed":"2754366","status":1,"byzantium":true},"args":["0x384338c8f3F7beA28Befecf51d22565a57cE421C","0x5498F0fd40dE223057637980910720cf1745ba01","0x45715c741B01abF1a8BD8549C6c4F51C89778efD"],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"Claim\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"MarketingCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MAX_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"claimReward\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getClaimedTokens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProgress\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progress\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progressMax\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"marketingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMarketingAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifyClaim\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifySolution\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaTrustee.sol\\":\\"LuminaTrustee\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./Rules.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\n\\\\ncontract LuminaTrustee is Ownable, Pausable, Progressing, Rules {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Public address of the linked records contract\\\\n    address public recordsAddr;\\\\n    // Public address of the linked administrator contract\\\\n    address public adminAddr;\\\\n    // Public address of the linked marketing contract\\\\n    address public marketingAddr;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n    // Link to LuminaRecords contract\\\\n    ILuminaRecords private records;\\\\n    // Link to LuminaAdministator contract\\\\n    ILuminaAdmin private admin;\\\\n\\\\n    uint64 private _claimedChallenges;\\\\n    uint256 private _claimedTokens;\\\\n    uint64 private _marketingCallSuccessCnt;\\\\n    uint64 private _marketingCallFailedCnt;\\\\n\\\\n    event Claim(uint64 indexed blockNumber, address indexed recipient, address indexed miner, uint256 solution, uint8 commisionPrc, uint16 claimNo);\\\\n    event MarketingCallFailed(address marketingAddr, uint64 blockNumber, string message);\\\\n\\\\n    constructor(address tokenAddr_, address recordsAddr_, address adminAddr_) {\\\\n        pause();\\\\n\\\\n        tokenAddr = tokenAddr_;\\\\n        recordsAddr = recordsAddr_;\\\\n        adminAddr = adminAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n        records = ILuminaRecords(recordsAddr);\\\\n        admin = ILuminaAdmin(adminAddr);\\\\n\\\\n        _claimedChallenges = 0;\\\\n        _claimedTokens = 0;\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function getProgress() public view override returns (uint256 progress, uint256 progressMax) {\\\\n        progress = _claimedTokens;\\\\n        progressMax = _claimedTokens+token.balanceOf(address(this));\\\\n    }\\\\n\\\\n    function getClaimedTokens() public view returns (uint256) {\\\\n        return _claimedTokens;\\\\n    }\\\\n\\\\n    function setMarketingAddr(address marketingAddr_) external onlyOwner {\\\\n        require(marketingAddr_ == address(0) || ILuminaMarketing(marketingAddr_).owner() == owner(), \\\\\\"The marketing contract address must point to a contract with the same owner\\\\\\");\\\\n        marketingAddr = marketingAddr_;\\\\n    }\\\\n\\\\n    function _getAdjustedDifficulty(uint64 blockNumber, address recipient, uint8 generalDifficulty, uint256 challengeHash) private view returns (uint8 adjustedDifficulty) {\\\\n        uint256 registeredBalance = records.findBalance(recipient, blockNumber);\\\\n\\\\n        uint8 walletDiscount = _getWalletDifficultyDiscount(challengeHash, recipient, registeredBalance);\\\\n        uint8 balanceDiscount = _getBalanceDifficultyDiscount(registeredBalance);\\\\n\\\\n        // Calculate Adjusted Difficulty\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): generalDifficulty out of range\\\\\\");\\\\n        uint8 totalDiscount = walletDiscount + balanceDiscount;\\\\n        adjustedDifficulty = generalDifficulty >= totalDiscount ? generalDifficulty - totalDiscount : 0;\\\\n        if(adjustedDifficulty < MIN_CHALLENGE_DIFFICULTY) {\\\\n            adjustedDifficulty = MIN_CHALLENGE_DIFFICULTY;\\\\n        }\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= adjustedDifficulty && adjustedDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): adjustedDifficulty out of range\\\\\\");\\\\n    }\\\\n\\\\n    function verifySolution(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused returns (uint16 solvedDifficulty) {\\\\n        (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        require(premium == false || premium == true);\\\\n\\\\n        bytes memory data = abi.encodePacked(solution, ch.challengeHash, uint256(uint160(recipient)), uint256(uint160(miner)));\\\\n        require(data.length == 128, \\\\\\"Invalid solution data\\\\\\");\\\\n        bytes32 digest = keccak256(data);\\\\n\\\\n        solvedDifficulty = 256 - Utils._findHsb(uint256(digest));\\\\n    }\\\\n\\\\n    function _isLuminaFund(address recipient) private pure returns (bool) {\\\\n        ILuminaFund maybeFund = ILuminaFund(recipient);\\\\n        try maybeFund.isLuminaFund() returns (bool isFund) {\\\\n            return isFund;\\\\n        } catch {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    // Reasons\\\\n    // 0 - satisfies all criteria, at this moment, to claim the tokens\\\\n    // 1 - blockNumber does not exist or has no live challenge assigned right now\\\\n    // 2 - solvedDifficulty doesn\'t safisfy the current requirements\\\\n    // 3 - this challenge has already been claimed by this address\\\\n    // 4 - all available rewards have been already claimed\\\\n    // 5 - recipient\'s address is not eligible for rewards, external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    // 6 - recipient\'s address is not eligible for rewards, external miners can only make claims on addresses with at most 10,000 LUMI\\\\n    // 7 - recipient\'s address is not eligible for rewards, it is a contract that is not a Lumina Fund\\\\n    function verifyClaim(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 rewardsCnt, uint16 claimsCnt)\\\\n    {\\\\n        ChallengeRecords.Challenge memory ch;\\\\n\\\\n        // Retrieve the challenge information\\\\n        uint8 generalDifficulty;\\\\n        (ch, premium, generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(ch.valid, \\\\\\"Invalid challenge record\\\\\\");\\\\n\\\\n        // Get adjustd difficulty\\\\n        uint8 adjustedDifficulty = _getAdjustedDifficulty(blockNumber, recipient, generalDifficulty, ch.challengeHash);\\\\n\\\\n        // Get actual solved difficulty\\\\n        uint16 solvedDifficulty = verifySolution(blockNumber, miner, recipient, solution);\\\\n\\\\n        // Calculate Reward Tokens\\\\n        rewardUnits = 0;\\\\n        reason = 0;\\\\n        if(solvedDifficulty >= adjustedDifficulty) {\\\\n            uint256 balance = token.balanceOf(recipient);\\\\n            if(records.hasClaimed(blockNumber, recipient) != 0) {\\\\n                reason = 3;\\\\n            } else if(miner != recipient && balance < MINERS_CLAIM_MIN_RECIPIENT_BALANCE) {\\\\n                reason = 5;\\\\n            } else if(miner != recipient && balance > MINERS_CLAIM_MAX_RECIPIENT_BALANCE) {\\\\n                reason = 6;\\\\n            } else if(Address.isContract(recipient) && !_isLuminaFund(recipient)) {\\\\n                reason = 7;\\\\n            }\\\\n        } else {\\\\n            reason = 2;\\\\n        }\\\\n\\\\n        if(reason == 0) {\\\\n            uint16 rewardTokens;\\\\n            (rewardsCnt, rewardTokens) = _getRewardTokens(ch.challengeHash);\\\\n\\\\n            if(rewardsCnt > REWARDS_CNT_LIMIT) {\\\\n                rewardsCnt = REWARDS_CNT_LIMIT;\\\\n            }\\\\n\\\\n            claimsCnt = records.getClaimsCnt(blockNumber);\\\\n            if(claimsCnt < rewardsCnt) {\\\\n                rewardUnits = uint32(rewardTokens) * uint32(ch.rewardUnits);\\\\n                reason = 0;\\\\n            } else {\\\\n                reason = 4;\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function claimReward(uint64 blockNumber, address miner, address recipient, uint256 solution) external whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 claimsCnt)\\\\n    {\\\\n        uint16 rewardsCnt;\\\\n\\\\n        (rewardUnits, reason, premium, rewardsCnt, claimsCnt) = verifyClaim(blockNumber, miner, recipient, solution);\\\\n\\\\n        if(reason == 0) {\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(rewardUnits > 0, \\\\\\"Invalid reward amount\\\\\\");\\\\n            require(rewardUnits <= uint256(2000).mul(REWARD_UNITS_STANDARD), \\\\\\"Invalid reward, amount too big\\\\\\");\\\\n\\\\n            // Transfer reward to msg.sender\\\\n            uint256 rewardAmount = uint256(rewardUnits).mul(REWARD_UNIT);\\\\n\\\\n            uint8 commisionPrc = records.getCommision(recipient);\\\\n            if(miner != recipient) {\\\\n                uint256 commisionAmount = rewardAmount.mul(commisionPrc).div(100);\\\\n                uint256 recipientAmount = rewardAmount.sub(commisionAmount);\\\\n                token.transfer(recipient, recipientAmount);\\\\n                token.transfer(miner, commisionAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, commisionPrc, claimsCnt);\\\\n            } else {\\\\n                token.transfer(recipient, rewardAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, 0, claimsCnt);\\\\n            }\\\\n\\\\n            _claimedTokens = _claimedTokens.add(rewardAmount);\\\\n\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(claimsCnt < REWARDS_CNT_LIMIT, \\\\\\"claim count is too big\\\\\\");\\\\n            require(claimsCnt < rewardsCnt, \\\\\\"claim count is too big\\\\\\");\\\\n            claimsCnt++;\\\\n            records._addClaim(blockNumber, recipient, rewardUnits);\\\\n\\\\n            if(claimsCnt >= rewardsCnt) {\\\\n                _claimedChallenges++;\\\\n                admin._cleanupChallenge(blockNumber, premium);\\\\n            }\\\\n\\\\n            // Notify the marketing contract\\\\n            if(marketingAddr != address(0)) {\\\\n                ILuminaMarketing marketing = ILuminaMarketing(marketingAddr);\\\\n                try marketing._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc) {\\\\n                } catch Error(string memory message) {\\\\n                    _marketingCallSuccessCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, message);\\\\n                } catch {\\\\n                    _marketingCallFailedCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xac82c1fa23d58faa715005268093191a3449f070f8fd8734ec8f45b50a1c6064\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI or at most 10,000 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MAX_RECIPIENT_BALANCE = 10*1000*1000*REWARD_UNIT; // 10,000 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 2 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe41080651c009b319e6c2a8d03d55fdb6063a1afdb73a2310453a00fd63638bf\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Rules.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract Rules is Parameters {\\\\n    using SafeMath for uint256;\\\\n\\\\n    function _getWalletDifficultyDiscount(uint256 challengeHash, address addr, uint256 balance) internal pure returns (uint8) {\\\\n        uint256 h1 = challengeHash;\\\\n        uint256 h2 = uint256(uint160(addr));\\\\n\\\\n        uint256 o = h1 ^ h2;\\\\n        uint16 lsb = Utils._findLsb(o);\\\\n        if(lsb == 0) {\\\\n            lsb = 256;\\\\n        } else {\\\\n            lsb--;\\\\n        }\\\\n\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint8 n = 0;\\\\n        if(b1 >= 1) {\\\\n            if(lsb >= 20) {\\\\n                n = 30;\\\\n            } else if(lsb >= 10) {\\\\n                n = 20 + (uint8(lsb) - 10);\\\\n            } else {\\\\n                n = 2 * uint8(lsb);\\\\n            }\\\\n        } else {\\\\n            if(lsb > 10) {\\\\n                n = 10;\\\\n            } else {\\\\n                n = uint8(lsb);\\\\n            }\\\\n        }\\\\n\\\\n        return n;\\\\n    }\\\\n\\\\n   function _getBalanceDifficultyDiscount(uint256 balance) internal pure returns (uint8) {\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint256 b2 = balance.mod(TOKEN_UNIT).div(REWARD_UNIT);\\\\n\\\\n        uint8 discount;\\\\n        if(b1 >= 1) {\\\\n            if(b1 >= 1000) {\\\\n                discount = 2 * 10 + 10;\\\\n            } else if(b1 >= 500) {\\\\n                discount = 2 * 9 + 10;\\\\n            } else if(b1 >= 200) {\\\\n                discount = 2 * 8 + 10;\\\\n            } else if(b1 >= 100) {\\\\n                discount = 2 * 7 + 10;\\\\n            } else if(b1 >= 50) {\\\\n                discount = 2 * 6 + 10;\\\\n            } else if(b1 >= 20) {\\\\n                discount = 2 * 5 + 10;\\\\n            } else if(b1 >= 10) {\\\\n                discount = 2 * 4 + 10;\\\\n            } else if(b1 >= 5) {\\\\n                discount = 2 * 3 + 10;\\\\n            } else if(b1 >= 3) {\\\\n                discount = 2 * 2 + 10;\\\\n            } else if(b1 >= 2) {\\\\n                discount = 2 * 1 + 10;\\\\n            } else {\\\\n                discount = 2 * 0 + 10;\\\\n            }\\\\n        } else {\\\\n            if(b2 >= 500) {\\\\n                discount = 9;\\\\n            } else if(b2 >= 200) {\\\\n                discount = 8;\\\\n            } else if(b2 >= 100) {\\\\n                discount = 7;\\\\n            } else if(b2 >= 50) {\\\\n                discount = 6;\\\\n            } else if(b2 >= 20) {\\\\n                discount = 5;\\\\n            } else if(b2 >= 10) {\\\\n                discount = 4;\\\\n            } else if(b2 >= 5) {\\\\n                discount = 3;\\\\n            } else if(b2 >= 2) {\\\\n                discount = 2;\\\\n            } else if(b2 >= 1) {\\\\n                discount = 1;\\\\n            } else {\\\\n                discount = 0;\\\\n            }\\\\n        }\\\\n        return discount;\\\\n    }\\\\n\\\\n    // Now of tokens is means in Einstein era, during Newton era the number need to be multiplies with current units per token number\\\\n    function _getRewardTokens(uint256 challengeHash) internal pure returns (uint16 rewardsCnt, uint16 tokens) {\\\\n        uint256 h = challengeHash;\\\\n\\\\n        if(((h >> (256-20)) & 0xFFFFF) == 0x22222) {\\\\n            return (500, 2000);\\\\n        } else if(((h >> (256-16)) & 0xFFFF) == 0x2222) {\\\\n            return (200, 500);\\\\n        } else if(((h >> (256-12)) & 0xFFF) == 0x222) {\\\\n            return (100, 100);\\\\n        } else if(((h >> (256-2)) & 0xFF) == 0x22) {\\\\n            return (50, 20);\\\\n        } else if(((h >> (256-4)) & 0xF) == 0x2) {\\\\n            return (20, 5);\\\\n        } else {\\\\n            return (10, 1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3009c450f1ddaa90322820a0ba12ec9b6370364e56bca1b04e7c61e6204df66e\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620029373803806200293783398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b6200170b1760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b61268080620002b76000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80637fb012321161013b578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610462578063ec2165d31461046a578063f2fde38b14610472578063f668bee514610485578063f883fcaa146103cd57600080fd5b8063b91268e81461033e578063b915dec214610449578063c28bd11c146103cd578063c28cedf314610451578063c6088d971461045957600080fd5b80639d941362116100ff5780639d941362146103c5578063a21577671461041e578063a5c9cd8214610426578063a7c1d5901461042e578063b313bd621461044157600080fd5b80637fb01232146103cd57806381830593146103d55780638456cb59146103e85780638da5cb5b146103f0578063939c44561461040157600080fd5b80633f4ba83a116101c95780635c975abb1161018d5780635c975abb146103835780635fbe4d1d146103a15780636bb987fe146103b4578063715018a6146103bd57806373d6aafa146103c557600080fd5b80633f4ba83a1461034e5780633ff42b9214610358578063479e92c81461036b578063504b3662146103735780635b7f415c1461037b57600080fd5b80630ff8a7eb116102105780630ff8a7eb146102e05780631e7bfd60146102f357806330db4fa01461031e5780633a3a7c531461033e5780633e6e387c1461034657600080fd5b806306e38632146102425780630bf43309146102625780630d423bd41461027c5780630e7d8db914610292575b600080fd5b61024a600581565b60405161ffff90911681526020015b60405180910390f35b61026a60d081565b60405160ff9091168152602001610259565b6102846104cb565b604051908152602001610259565b6102a56102a0366004611f47565b6104f2565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a001610259565b61024a6102ee366004611f47565b61096a565b600254610306906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b61032660c881565b6040516001600160401b039091168152602001610259565b610284610b58565b61024a600281565b610356610b6f565b005b600454610306906001600160a01b031681565b61026a600a81565b61026a606481565b61026a601281565b600054600160a01b900460ff165b6040519015158152602001610259565b600154610306906001600160a01b031681565b61032661996881565b610356610ba3565b61024a600a81565b61026a600281565b600354610306906001600160a01b031681565b610356610bff565b6000546001600160a01b0316610306565b610409610c31565b60408051928352602083019190915201610259565b61026a60ff81565b610284610cb4565b61035661043c366004611f98565b610cc0565b610326600281565b600854610284565b610391600181565b61024a6103e881565b610284610e25565b610326610e3d565b610356610480366004611f98565b610e4a565b610498610493366004611f47565b610ee5565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff166060820152608001610259565b6104d760036012611fcb565b6104e290600a6120d2565b6104ef90629896806120e1565b81565b600080600080600061050e60005460ff600160a01b9091041690565b156105345760405162461bcd60e51b815260040161052b90612100565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e491906121cf565b608083015191975091935090915061063e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f72640000000000000000604482015260640161052b565b60006106508c8b84866000015161178d565b905060006106608d8d8d8d61096a565b905060009850600097508160ff168161ffff161061085b576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190612293565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107499291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a91906122ac565b63ffffffff161561079e5760039850610855565b8b6001600160a01b03168d6001600160a01b0316141580156107d557506107c760036012611fcb565b6107d290600a6120d2565b81105b156107e35760059850610855565b8b6001600160a01b03168d6001600160a01b031614158015610827575061080c60036012611fcb565b61081790600a6120d2565b61082490629896806120e1565b81115b156108355760069850610855565b8b3b1515801561084b57506108498c61196d565b155b1561085557600798505b50610860565b600297505b60ff881661095b57600061087785600001516119e1565b9097509050600261ffff8816111561088e57600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b81526004016108de91906001600160401b0391909116815260200190565b602060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122d2565b95508661ffff168661ffff16101561095457846040015161ffff168161ffff1661094991906122ed565b995060009850610959565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff16156109955760405162461bcd60e51b815260040161052b90612100565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1091906121cf565b9250925092508060ff166001610a27576014610a2a565b600a5b60ff1611158015610a3f575060d060ff821611155b610a8b5760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e6765000000000000604482015260640161052b565b811580610a9a57506001821515145b610aa357600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610b2e5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b604482015260640161052b565b80516020820120610b3e81611a7a565b610b4a90610100612319565b9a9950505050505050505050565b610b6460036012611fcb565b6104ef90600a6120d2565b6000546001600160a01b03163314610b995760405162461bcd60e51b815260040161052b9061233c565b610ba1611aed565b565b6000546001600160a01b03163314610bcd5760405162461bcd60e51b815260040161052b9061233c565b600054600160a01b900460ff1615610bf75760405162461bcd60e51b815260040161052b90612100565b610ba1611b71565b6000546001600160a01b03163314610c295760405162461bcd60e51b815260040161052b9061233c565b610ba161170b565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca19190612293565b600854610cae9190612371565b90509091565b6104ef6012600a6120d2565b6000546001600160a01b03163314610cea5760405162461bcd60e51b815260040161052b9061233c565b6001600160a01b0381161580610d7d57506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190612389565b6001600160a01b0316145b610e035760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a40161052b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610e316012600a6120d2565b6104ef906103e86120e1565b6104ef619968600e6123a6565b6000546001600160a01b03163314610e745760405162461bcd60e51b815260040161052b9061233c565b6001600160a01b038116610ed95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052b565b610ee281611ba1565b50565b600080600080610eff60005460ff600160a01b9091041690565b15610f1c5760405162461bcd60e51b815260040161052b90612100565b6000610f2a898989896104f2565b9398509196509450909250905060ff84166116ff5760008563ffffffff1611610f8d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b604482015260640161052b565b610f9b6107d06103e8611bf1565b8563ffffffff161115610ff05760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f206269670000604482015260640161052b565b600061101c61100160036012611fcb565b61100c90600a6120d2565b63ffffffff8089169190611bf116565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109091906123cc565b9050886001600160a01b03168a6001600160a01b03161461123d5760006110c560646110bf8560ff8616611bf1565b90611c06565b905060006110d38483611c12565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c91906123e7565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c491906123e7565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b60405161122e9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a45050611315565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906123e7565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546113229083611c1e565b600855600261ffff8516106113725760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b604482015260640161052b565b8261ffff168461ffff16106113c25760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b604482015260640161052b565b836113cc81612402565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b15801561143157600080fd5b505af1158015611445573d6000803e3d6000fd5b505050508261ffff168461ffff16106114ff5760078054600160a01b90046001600160401b031690601461147883612424565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156116fc57600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561158657600080fd5b505af1925050508015611597575060015b6116fa576115a3612441565b806308c379a0141561165757506115b861245d565b806115c35750611659565b600980546001600160401b03169060006115dc83612424565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e83604051611649939291906124e6565b60405180910390a1506116fa565b505b600980546801000000000000000090046001600160401b031690600861167e83612424565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156117355760405162461bcd60e51b815260040161052b90612100565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117703390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190612293565b9050600061181d848784611c2a565b9050600061182a83611cf7565b905060ff8616600a11801590611844575060d060ff871611155b6118a65760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b606482015260840161052b565b60006118b2828461255b565b90508060ff168760ff1610156118c95760006118d3565b6118d38188611fcb565b9450600a60ff861610156118e657600a94505b60ff8516600a118015906118fe575060d060ff861611155b6119615760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b606482015260840161052b565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119cd575060408051601f3d908101601f191682019092526119ca918101906123e7565b60015b6119da5750600092915050565b9392505050565b600080826202222260ec82901c1415611a0357506101f4936107d09350915050565b61222260f082901c1415611a1f575060c8936101f49350915050565b61022260f482901c1415611a395750606493849350915050565b602260fe82901c1415611a53575060329360149350915050565b600260fc82901c1415611a6d575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611ae65760006001611a9f8385612580565b61ffff16901c905060006001611ab68360026125a6565b611ac091906125b6565b9050808611611ad157819250611adf565b611adc826001612580565b93505b5050611a81565b5092915050565b600054600160a01b900460ff16611b3d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161052b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611770565b6000546001600160a01b03163314611b9b5760405162461bcd60e51b815260040161052b9061233c565b610ba160005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611bfd82846120e1565b90505b92915050565b6000611bfd82846125e3565b6000611bfd82846125b6565b6000611bfd8284612371565b6000836001600160a01b03841680821883611c4482611e97565b905061ffff8116611c585750610100611c66565b80611c62816125f7565b9150505b6000611c7e611c776012600a6120d2565b8890611c06565b9050600060018210611cd25760148361ffff1610611c9e5750601e611cea565b600a8361ffff1610611cc757611cb5600a84611fcb565b611cc090601461255b565b9050611cea565b611cc0836002612615565b600a8361ffff161115611ce75750600a611cea565b50815b9998505050505050505050565b600080611d10611d096012600a6120d2565b8490611c06565b90506000611d44611d2360036012611fcb565b611d2e90600a6120d2565b6110bf611d3d6012600a6120d2565b8790611f11565b9050600060018310611dfa576103e88310611d615750601e611e8f565b6101f48310611d725750601c611e8f565b60c88310611d825750601a611e8f565b60648310611d9257506018611e8f565b60328310611da257506016611e8f565b60148310611db257506014611e8f565b600a8310611dc257506012611e8f565b60058310611dd257506010611e8f565b60038310611de25750600e611e8f565b60028310611df25750600c611e8f565b50600a611e8f565b6101f48210611e0b57506009611e8f565b60c88210611e1b57506008611e8f565b60648210611e2b57506007611e8f565b60328210611e3b57506006611e8f565b60148210611e4b57506005611e8f565b600a8210611e5b57506004611e8f565b60058210611e6b57506003611e8f565b60028210611e7b57506002611e8f565b60018210611e8b57506001611e8f565b5060005b949350505050565b600081611ea657506000919050565b60016101005b8061ffff168261ffff161015611ae65760006001611eca8385612580565b61ffff16901c905060006001611ee18360026125a6565b611eeb91906125b6565b9050858116611f0657611eff826001612580565b9350611f0a565b8192505b5050611eac565b6000611bfd8284612636565b6001600160401b0381168114610ee257600080fd5b6001600160a01b0381168114610ee257600080fd5b60008060008060808587031215611f5d57600080fd5b8435611f6881611f1d565b93506020850135611f7881611f32565b92506040850135611f8881611f32565b9396929550929360600135925050565b600060208284031215611faa57600080fd5b81356119da81611f32565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015611fe557611fe5611fb5565b90039392505050565b600181815b8085111561202957816000190482111561200f5761200f611fb5565b8085161561201c57918102915b93841c9390800290611ff3565b509250929050565b60008261204057506001611c00565b8161204d57506000611c00565b8160018114612063576002811461206d57612089565b6001915050611c00565b60ff84111561207e5761207e611fb5565b50506001821b611c00565b5060208310610133831016604e8410600b84101617156120ac575081810a611c00565b6120b68383611fee565b80600019048211156120ca576120ca611fb5565b029392505050565b6000611bfd60ff841683612031565b60008160001904831182151516156120fb576120fb611fb5565b500290565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b038211171561215757634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b038111828210171561219057634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff811681146121a957600080fd5b919050565b805160ff811681146121a957600080fd5b805180151581146121a957600080fd5b60008060008385036101208112156121e657600080fd5b60e08112156121f457600080fd5b506040516122018161212a565b84518152602085015161221381611f1d565b602082015261222460408601612197565b6040820152612235606086016121ae565b6060820152612246608086016121bf565b608082015261225760a086016121ae565b60a082015261226860c086016121ae565b60c0820152925061227b60e085016121bf565b915061228a61010085016121ae565b90509250925092565b6000602082840312156122a557600080fd5b5051919050565b6000602082840312156122be57600080fd5b815163ffffffff811681146119da57600080fd5b6000602082840312156122e457600080fd5b611bfd82612197565b600063ffffffff8083168185168183048111821515161561231057612310611fb5565b02949350505050565b600061ffff8381169083168181101561233457612334611fb5565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561238457612384611fb5565b500190565b60006020828403121561239b57600080fd5b81516119da81611f32565b60006001600160401b038083168185168183048111821515161561231057612310611fb5565b6000602082840312156123de57600080fd5b611bfd826121ae565b6000602082840312156123f957600080fd5b611bfd826121bf565b600061ffff8083168181141561241a5761241a611fb5565b6001019392505050565b60006001600160401b038083168181141561241a5761241a611fb5565b600060033d111561245a5760046000803e5060005160e01c5b90565b600060443d101561246b5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561249a57505050505090565b82850191508151818111156124b25750505050505090565b843d87010160208285010111156124cc5750505050505090565b6124db6020828601018761215d565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b8181101561253157858101830151858201608001528201612515565b81811115612543576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561257857612578611fb5565b019392505050565b600061ffff80831681851680830382111561259d5761259d611fb5565b01949350505050565b6000611bfd61ffff841683612031565b6000828210156125c8576125c8611fb5565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826125f2576125f26125cd565b500490565b600061ffff82168061260b5761260b611fb5565b6000190192915050565b600060ff821660ff84168160ff04811182151516156120ca576120ca611fb5565b600082612645576126456125cd565b50069056fea2646970667358221220bd643b22003397668c93fe1c5ca132bb7093b3522b86768a1217f5317b0ee3da64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80637fb012321161013b578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610462578063ec2165d31461046a578063f2fde38b14610472578063f668bee514610485578063f883fcaa146103cd57600080fd5b8063b91268e81461033e578063b915dec214610449578063c28bd11c146103cd578063c28cedf314610451578063c6088d971461045957600080fd5b80639d941362116100ff5780639d941362146103c5578063a21577671461041e578063a5c9cd8214610426578063a7c1d5901461042e578063b313bd621461044157600080fd5b80637fb01232146103cd57806381830593146103d55780638456cb59146103e85780638da5cb5b146103f0578063939c44561461040157600080fd5b80633f4ba83a116101c95780635c975abb1161018d5780635c975abb146103835780635fbe4d1d146103a15780636bb987fe146103b4578063715018a6146103bd57806373d6aafa146103c557600080fd5b80633f4ba83a1461034e5780633ff42b9214610358578063479e92c81461036b578063504b3662146103735780635b7f415c1461037b57600080fd5b80630ff8a7eb116102105780630ff8a7eb146102e05780631e7bfd60146102f357806330db4fa01461031e5780633a3a7c531461033e5780633e6e387c1461034657600080fd5b806306e38632146102425780630bf43309146102625780630d423bd41461027c5780630e7d8db914610292575b600080fd5b61024a600581565b60405161ffff90911681526020015b60405180910390f35b61026a60d081565b60405160ff9091168152602001610259565b6102846104cb565b604051908152602001610259565b6102a56102a0366004611f47565b6104f2565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a001610259565b61024a6102ee366004611f47565b61096a565b600254610306906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b61032660c881565b6040516001600160401b039091168152602001610259565b610284610b58565b61024a600281565b610356610b6f565b005b600454610306906001600160a01b031681565b61026a600a81565b61026a606481565b61026a601281565b600054600160a01b900460ff165b6040519015158152602001610259565b600154610306906001600160a01b031681565b61032661996881565b610356610ba3565b61024a600a81565b61026a600281565b600354610306906001600160a01b031681565b610356610bff565b6000546001600160a01b0316610306565b610409610c31565b60408051928352602083019190915201610259565b61026a60ff81565b610284610cb4565b61035661043c366004611f98565b610cc0565b610326600281565b600854610284565b610391600181565b61024a6103e881565b610284610e25565b610326610e3d565b610356610480366004611f98565b610e4a565b610498610493366004611f47565b610ee5565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff166060820152608001610259565b6104d760036012611fcb565b6104e290600a6120d2565b6104ef90629896806120e1565b81565b600080600080600061050e60005460ff600160a01b9091041690565b156105345760405162461bcd60e51b815260040161052b90612100565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e491906121cf565b608083015191975091935090915061063e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f72640000000000000000604482015260640161052b565b60006106508c8b84866000015161178d565b905060006106608d8d8d8d61096a565b905060009850600097508160ff168161ffff161061085b576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190612293565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107499291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a91906122ac565b63ffffffff161561079e5760039850610855565b8b6001600160a01b03168d6001600160a01b0316141580156107d557506107c760036012611fcb565b6107d290600a6120d2565b81105b156107e35760059850610855565b8b6001600160a01b03168d6001600160a01b031614158015610827575061080c60036012611fcb565b61081790600a6120d2565b61082490629896806120e1565b81115b156108355760069850610855565b8b3b1515801561084b57506108498c61196d565b155b1561085557600798505b50610860565b600297505b60ff881661095b57600061087785600001516119e1565b9097509050600261ffff8816111561088e57600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b81526004016108de91906001600160401b0391909116815260200190565b602060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122d2565b95508661ffff168661ffff16101561095457846040015161ffff168161ffff1661094991906122ed565b995060009850610959565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff16156109955760405162461bcd60e51b815260040161052b90612100565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1091906121cf565b9250925092508060ff166001610a27576014610a2a565b600a5b60ff1611158015610a3f575060d060ff821611155b610a8b5760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e6765000000000000604482015260640161052b565b811580610a9a57506001821515145b610aa357600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610b2e5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b604482015260640161052b565b80516020820120610b3e81611a7a565b610b4a90610100612319565b9a9950505050505050505050565b610b6460036012611fcb565b6104ef90600a6120d2565b6000546001600160a01b03163314610b995760405162461bcd60e51b815260040161052b9061233c565b610ba1611aed565b565b6000546001600160a01b03163314610bcd5760405162461bcd60e51b815260040161052b9061233c565b600054600160a01b900460ff1615610bf75760405162461bcd60e51b815260040161052b90612100565b610ba1611b71565b6000546001600160a01b03163314610c295760405162461bcd60e51b815260040161052b9061233c565b610ba161170b565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca19190612293565b600854610cae9190612371565b90509091565b6104ef6012600a6120d2565b6000546001600160a01b03163314610cea5760405162461bcd60e51b815260040161052b9061233c565b6001600160a01b0381161580610d7d57506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190612389565b6001600160a01b0316145b610e035760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a40161052b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610e316012600a6120d2565b6104ef906103e86120e1565b6104ef619968600e6123a6565b6000546001600160a01b03163314610e745760405162461bcd60e51b815260040161052b9061233c565b6001600160a01b038116610ed95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052b565b610ee281611ba1565b50565b600080600080610eff60005460ff600160a01b9091041690565b15610f1c5760405162461bcd60e51b815260040161052b90612100565b6000610f2a898989896104f2565b9398509196509450909250905060ff84166116ff5760008563ffffffff1611610f8d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b604482015260640161052b565b610f9b6107d06103e8611bf1565b8563ffffffff161115610ff05760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f206269670000604482015260640161052b565b600061101c61100160036012611fcb565b61100c90600a6120d2565b63ffffffff8089169190611bf116565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109091906123cc565b9050886001600160a01b03168a6001600160a01b03161461123d5760006110c560646110bf8560ff8616611bf1565b90611c06565b905060006110d38483611c12565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c91906123e7565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c491906123e7565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b60405161122e9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a45050611315565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906123e7565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546113229083611c1e565b600855600261ffff8516106113725760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b604482015260640161052b565b8261ffff168461ffff16106113c25760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b604482015260640161052b565b836113cc81612402565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b15801561143157600080fd5b505af1158015611445573d6000803e3d6000fd5b505050508261ffff168461ffff16106114ff5760078054600160a01b90046001600160401b031690601461147883612424565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156116fc57600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561158657600080fd5b505af1925050508015611597575060015b6116fa576115a3612441565b806308c379a0141561165757506115b861245d565b806115c35750611659565b600980546001600160401b03169060006115dc83612424565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e83604051611649939291906124e6565b60405180910390a1506116fa565b505b600980546801000000000000000090046001600160401b031690600861167e83612424565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156117355760405162461bcd60e51b815260040161052b90612100565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117703390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190612293565b9050600061181d848784611c2a565b9050600061182a83611cf7565b905060ff8616600a11801590611844575060d060ff871611155b6118a65760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b606482015260840161052b565b60006118b2828461255b565b90508060ff168760ff1610156118c95760006118d3565b6118d38188611fcb565b9450600a60ff861610156118e657600a94505b60ff8516600a118015906118fe575060d060ff861611155b6119615760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b606482015260840161052b565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119cd575060408051601f3d908101601f191682019092526119ca918101906123e7565b60015b6119da5750600092915050565b9392505050565b600080826202222260ec82901c1415611a0357506101f4936107d09350915050565b61222260f082901c1415611a1f575060c8936101f49350915050565b61022260f482901c1415611a395750606493849350915050565b602260fe82901c1415611a53575060329360149350915050565b600260fc82901c1415611a6d575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611ae65760006001611a9f8385612580565b61ffff16901c905060006001611ab68360026125a6565b611ac091906125b6565b9050808611611ad157819250611adf565b611adc826001612580565b93505b5050611a81565b5092915050565b600054600160a01b900460ff16611b3d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161052b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611770565b6000546001600160a01b03163314611b9b5760405162461bcd60e51b815260040161052b9061233c565b610ba160005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611bfd82846120e1565b90505b92915050565b6000611bfd82846125e3565b6000611bfd82846125b6565b6000611bfd8284612371565b6000836001600160a01b03841680821883611c4482611e97565b905061ffff8116611c585750610100611c66565b80611c62816125f7565b9150505b6000611c7e611c776012600a6120d2565b8890611c06565b9050600060018210611cd25760148361ffff1610611c9e5750601e611cea565b600a8361ffff1610611cc757611cb5600a84611fcb565b611cc090601461255b565b9050611cea565b611cc0836002612615565b600a8361ffff161115611ce75750600a611cea565b50815b9998505050505050505050565b600080611d10611d096012600a6120d2565b8490611c06565b90506000611d44611d2360036012611fcb565b611d2e90600a6120d2565b6110bf611d3d6012600a6120d2565b8790611f11565b9050600060018310611dfa576103e88310611d615750601e611e8f565b6101f48310611d725750601c611e8f565b60c88310611d825750601a611e8f565b60648310611d9257506018611e8f565b60328310611da257506016611e8f565b60148310611db257506014611e8f565b600a8310611dc257506012611e8f565b60058310611dd257506010611e8f565b60038310611de25750600e611e8f565b60028310611df25750600c611e8f565b50600a611e8f565b6101f48210611e0b57506009611e8f565b60c88210611e1b57506008611e8f565b60648210611e2b57506007611e8f565b60328210611e3b57506006611e8f565b60148210611e4b57506005611e8f565b600a8210611e5b57506004611e8f565b60058210611e6b57506003611e8f565b60028210611e7b57506002611e8f565b60018210611e8b57506001611e8f565b5060005b949350505050565b600081611ea657506000919050565b60016101005b8061ffff168261ffff161015611ae65760006001611eca8385612580565b61ffff16901c905060006001611ee18360026125a6565b611eeb91906125b6565b9050858116611f0657611eff826001612580565b9350611f0a565b8192505b5050611eac565b6000611bfd8284612636565b6001600160401b0381168114610ee257600080fd5b6001600160a01b0381168114610ee257600080fd5b60008060008060808587031215611f5d57600080fd5b8435611f6881611f1d565b93506020850135611f7881611f32565b92506040850135611f8881611f32565b9396929550929360600135925050565b600060208284031215611faa57600080fd5b81356119da81611f32565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015611fe557611fe5611fb5565b90039392505050565b600181815b8085111561202957816000190482111561200f5761200f611fb5565b8085161561201c57918102915b93841c9390800290611ff3565b509250929050565b60008261204057506001611c00565b8161204d57506000611c00565b8160018114612063576002811461206d57612089565b6001915050611c00565b60ff84111561207e5761207e611fb5565b50506001821b611c00565b5060208310610133831016604e8410600b84101617156120ac575081810a611c00565b6120b68383611fee565b80600019048211156120ca576120ca611fb5565b029392505050565b6000611bfd60ff841683612031565b60008160001904831182151516156120fb576120fb611fb5565b500290565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b038211171561215757634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b038111828210171561219057634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff811681146121a957600080fd5b919050565b805160ff811681146121a957600080fd5b805180151581146121a957600080fd5b60008060008385036101208112156121e657600080fd5b60e08112156121f457600080fd5b506040516122018161212a565b84518152602085015161221381611f1d565b602082015261222460408601612197565b6040820152612235606086016121ae565b6060820152612246608086016121bf565b608082015261225760a086016121ae565b60a082015261226860c086016121ae565b60c0820152925061227b60e085016121bf565b915061228a61010085016121ae565b90509250925092565b6000602082840312156122a557600080fd5b5051919050565b6000602082840312156122be57600080fd5b815163ffffffff811681146119da57600080fd5b6000602082840312156122e457600080fd5b611bfd82612197565b600063ffffffff8083168185168183048111821515161561231057612310611fb5565b02949350505050565b600061ffff8381169083168181101561233457612334611fb5565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561238457612384611fb5565b500190565b60006020828403121561239b57600080fd5b81516119da81611f32565b60006001600160401b038083168185168183048111821515161561231057612310611fb5565b6000602082840312156123de57600080fd5b611bfd826121ae565b6000602082840312156123f957600080fd5b611bfd826121bf565b600061ffff8083168181141561241a5761241a611fb5565b6001019392505050565b60006001600160401b038083168181141561241a5761241a611fb5565b600060033d111561245a5760046000803e5060005160e01c5b90565b600060443d101561246b5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561249a57505050505090565b82850191508151818111156124b25750505050505090565b843d87010160208285010111156124cc5750505050505090565b6124db6020828601018761215d565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b8181101561253157858101830151858201608001528201612515565b81811115612543576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561257857612578611fb5565b019392505050565b600061ffff80831681851680830382111561259d5761259d611fb5565b01949350505050565b6000611bfd61ffff841683612031565b6000828210156125c8576125c8611fb5565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826125f2576125f26125cd565b500490565b600061ffff82168061260b5761260b611fb5565b6000190192915050565b600060ff821660ff84168160ff04811182151516156120ca576120ca611fb5565b600082612645576126456125cd565b50069056fea2646970667358221220bd643b22003397668c93fe1c5ca132bb7093b3522b86768a1217f5317b0ee3da64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":5700,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":5702,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":5704,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"adminAddr","offset":0,"slot":"3","type":"t_address"},{"astId":5706,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"marketingAddr","offset":0,"slot":"4","type":"t_address"},{"astId":5709,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"token","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":5712,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"},{"astId":5715,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"admin","offset":0,"slot":"7","type":"t_contract(ILuminaAdmin)2509"},{"astId":5717,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedChallenges","offset":20,"slot":"7","type":"t_uint64"},{"astId":5719,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedTokens","offset":0,"slot":"8","type":"t_uint256"},{"astId":5721,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallSuccessCnt","offset":0,"slot":"9","type":"t_uint64"},{"astId":5723,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallFailedCnt","offset":8,"slot":"9","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(ILuminaAdmin)2509":{"encoding":"inplace","label":"contract ILuminaAdmin","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},436:function(e){e.exports=JSON.parse('{"address":"0x29999C962Ef226b65518406754A8fF70A007c712","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"},{"internalType":"address","name":"recordsAddr_","type":"address"},{"internalType":"address","name":"adminAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"miner","type":"address"},{"indexed":false,"internalType":"uint256","name":"solution","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"claimNo","type":"uint16"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"marketingAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"MarketingCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"claimReward","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProgress","outputs":[{"internalType":"uint256","name":"progress","type":"uint256"},{"internalType":"uint256","name":"progressMax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"marketingAddr_","type":"address"}],"name":"setMarketingAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifyClaim","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifySolution","outputs":[{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x59dfcabc438862351c177634d4cabfd4e61bd5c5014e266a8eddf8589680f7d5","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x29999C962Ef226b65518406754A8fF70A007c712","transactionIndex":0,"gasUsed":"2335711","logsBloom":"0xblockHash":"0xc3e08ac2b5bcdab57eb4c9b23c73b7f746265a02b80b545f3fd5481fc0e72343","transactionHash":"0x59dfcabc438862351c177634d4cabfd4e61bd5c5014e266a8eddf8589680f7d5","logs":[{"transactionIndex":0,"blockNumber":236,"transactionHash":"0x59dfcabc438862351c177634d4cabfd4e61bd5c5014e266a8eddf8589680f7d5","address":"0x29999C962Ef226b65518406754A8fF70A007c712","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":0,"blockHash":"0xc3e08ac2b5bcdab57eb4c9b23c73b7f746265a02b80b545f3fd5481fc0e72343"},{"transactionIndex":0,"blockNumber":236,"transactionHash":"0x59dfcabc438862351c177634d4cabfd4e61bd5c5014e266a8eddf8589680f7d5","address":"0x29999C962Ef226b65518406754A8fF70A007c712","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":1,"blockHash":"0xc3e08ac2b5bcdab57eb4c9b23c73b7f746265a02b80b545f3fd5481fc0e72343"}],"blockNumber":236,"cumulativeGasUsed":"2335711","status":1,"byzantium":true},"args":["0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588","0xd5ffA09cF11Eee69A4A9D549F769CcDc3457a6e9","0xdFA3F1F27106aA91004acdE7Bf09B1aAC3cf3182"],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"Claim\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"MarketingCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"claimReward\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getClaimedTokens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProgress\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progress\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progressMax\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"marketingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMarketingAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifyClaim\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifySolution\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaTrustee.sol\\":\\"LuminaTrustee\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.rewardUnits = 0;\\\\n            ch.index = i;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengesGet(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0f8c8aead5176cfdd1aa69275f31915fc7fcb11c89e7cc6fd1fa0a20bc3d9acb\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./Rules.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\n\\\\ncontract LuminaTrustee is Ownable, Pausable, Progressing, Rules {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Public address of the linked records contract\\\\n    address public recordsAddr;\\\\n    // Public address of the linked administrator contract\\\\n    address public adminAddr;\\\\n    // Public address of the linked marketing contract\\\\n    address public marketingAddr;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n    // Link to LuminaRecords contract\\\\n    ILuminaRecords private records;\\\\n    // Link to LuminaAdministator contract\\\\n    ILuminaAdmin private admin;\\\\n\\\\n    uint64 private _claimedChallenges;\\\\n    uint256 private _claimedTokens;\\\\n    uint64 private _marketingCallSuccessCnt;\\\\n    uint64 private _marketingCallFailedCnt;\\\\n\\\\n    event Claim(uint64 indexed blockNumber, address indexed recipient, address indexed miner, uint256 solution, uint8 commisionPrc, uint16 claimNo);\\\\n    event MarketingCallFailed(address marketingAddr, uint64 blockNumber, string message);\\\\n\\\\n    constructor(address tokenAddr_, address recordsAddr_, address adminAddr_) {\\\\n        pause();\\\\n\\\\n        tokenAddr = tokenAddr_;\\\\n        recordsAddr = recordsAddr_;\\\\n        adminAddr = adminAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n        records = ILuminaRecords(recordsAddr);\\\\n        admin = ILuminaAdmin(adminAddr);\\\\n\\\\n        _claimedChallenges = 0;\\\\n        _claimedTokens = 0;\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function getProgress() public view override returns (uint256 progress, uint256 progressMax) {\\\\n        progress = _claimedTokens;\\\\n        progressMax = _claimedTokens+token.balanceOf(address(this));\\\\n    }\\\\n\\\\n    function getClaimedTokens() public view returns (uint256) {\\\\n        return _claimedTokens;\\\\n    }\\\\n\\\\n    function setMarketingAddr(address marketingAddr_) external onlyOwner {\\\\n        require(marketingAddr_ == address(0) || ILuminaMarketing(marketingAddr_).owner() == owner(), \\\\\\"The marketing contract address must point to a contract with the same owner\\\\\\");\\\\n        marketingAddr = marketingAddr_;\\\\n    }\\\\n\\\\n    function _getAdjustedDifficulty(uint64 blockNumber, address recipient, uint8 generalDifficulty, uint256 challengeHash) private view returns (uint8 adjustedDifficulty) {\\\\n        uint256 registeredBalance = records.findBalance(recipient, blockNumber);\\\\n\\\\n        uint8 walletDiscount = _getWalletDifficultyDiscount(challengeHash, recipient, registeredBalance);\\\\n        uint8 balanceDiscount = _getBalanceDifficultyDiscount(registeredBalance);\\\\n\\\\n        // Calculate Adjusted Difficulty\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): generalDifficulty out of range\\\\\\");\\\\n        uint8 totalDiscount = walletDiscount + balanceDiscount;\\\\n        adjustedDifficulty = generalDifficulty >= totalDiscount ? generalDifficulty - totalDiscount : 0;\\\\n        if(adjustedDifficulty < MIN_CHALLENGE_DIFFICULTY) {\\\\n            adjustedDifficulty = MIN_CHALLENGE_DIFFICULTY;\\\\n        }\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= adjustedDifficulty && adjustedDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): adjustedDifficulty out of range\\\\\\");\\\\n    }\\\\n\\\\n    function verifySolution(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused returns (uint16 solvedDifficulty) {\\\\n        (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        require(premium == false || premium == true);\\\\n\\\\n        bytes memory data = abi.encodePacked(solution, ch.challengeHash, uint256(uint160(recipient)), uint256(uint160(miner)));\\\\n        require(data.length == 128, \\\\\\"Invalid solution data\\\\\\");\\\\n        bytes32 digest = keccak256(data);\\\\n\\\\n        solvedDifficulty = 256 - Utils._findHsb(uint256(digest));\\\\n    }\\\\n\\\\n    function _isLuminaFund(address recipient) private pure returns (bool) {\\\\n        ILuminaFund maybeFund = ILuminaFund(recipient);\\\\n        try maybeFund.isLuminaFund() returns (bool isFund) {\\\\n            return isFund;\\\\n        } catch {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    // Reasons\\\\n    // 0 - satisfies all criteria, at this moment, to claim the tokens\\\\n    // 1 - blockNumber does not exist or has no live challenge assigned right now\\\\n    // 2 - solvedDifficulty doesn\'t safisfy the current requirements\\\\n    // 3 - this challenge has already been claimed by this address\\\\n    // 4 - all available rewards have been already claimed\\\\n    // 5 - recipient\'s address is not eligible for rewards, external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    // 6 - recipient\'s address is not eligible for rewards, it is a contract that is not a Lumina Fund\\\\n    function verifyClaim(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 rewardsCnt, uint16 claimsCnt)\\\\n    {\\\\n        ChallengeRecords.Challenge memory ch;\\\\n\\\\n        // Retrieve the challenge information\\\\n        uint8 generalDifficulty;\\\\n        (ch, premium, generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(ch.valid, \\\\\\"Invalid challenge record\\\\\\");\\\\n\\\\n        // Get adjustd difficulty\\\\n        uint8 adjustedDifficulty = _getAdjustedDifficulty(blockNumber, recipient, generalDifficulty, ch.challengeHash);\\\\n\\\\n        // Get actual solved difficulty\\\\n        uint16 solvedDifficulty = verifySolution(blockNumber, miner, recipient, solution);\\\\n\\\\n        // Calculate Reward Tokens\\\\n        rewardUnits = 0;\\\\n        reason = 0;\\\\n        if(solvedDifficulty >= adjustedDifficulty) {\\\\n            uint256 balance = token.balanceOf(recipient);\\\\n            if(records.hasClaimed(blockNumber, recipient) != 0) {\\\\n                reason = 3;\\\\n            } else if(miner != recipient && balance < MINERS_CLAIM_MIN_RECIPIENT_BALANCE) {\\\\n                reason = 5;\\\\n            } else if(Address.isContract(recipient) && !_isLuminaFund(recipient)) {\\\\n                reason = 6;\\\\n            }\\\\n        } else {\\\\n            reason = 2;\\\\n        }\\\\n\\\\n        if(reason == 0) {\\\\n            uint16 rewardTokens;\\\\n            (rewardsCnt, rewardTokens) = _getRewardTokens(ch.challengeHash);\\\\n\\\\n            if(rewardsCnt > REWARDS_CNT_LIMIT) {\\\\n                rewardsCnt = REWARDS_CNT_LIMIT;\\\\n            }\\\\n\\\\n            claimsCnt = records.getClaimsCnt(blockNumber);\\\\n            if(claimsCnt < rewardsCnt) {\\\\n                rewardUnits = uint32(rewardTokens) * uint32(ch.rewardUnits);\\\\n                reason = 0;\\\\n            } else {\\\\n                reason = 4;\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function claimReward(uint64 blockNumber, address miner, address recipient, uint256 solution) external whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 claimsCnt)\\\\n    {\\\\n        uint16 rewardsCnt;\\\\n\\\\n        (rewardUnits, reason, premium, rewardsCnt, claimsCnt) = verifyClaim(blockNumber, miner, recipient, solution);\\\\n\\\\n        if(reason == 0) {\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(rewardUnits > 0, \\\\\\"Invalid reward amount\\\\\\");\\\\n            require(rewardUnits <= uint256(2000).mul(REWARD_UNITS_STANDARD), \\\\\\"Invalid reward, amount too big\\\\\\");\\\\n\\\\n            // Transfer reward to msg.sender\\\\n            uint256 rewardAmount = uint256(rewardUnits).mul(REWARD_UNIT);\\\\n\\\\n            uint8 commisionPrc = records.getCommision(recipient);\\\\n            if(miner != recipient) {\\\\n                uint256 commisionAmount = rewardAmount.mul(commisionPrc).div(100);\\\\n                uint256 recipientAmount = rewardAmount.sub(commisionAmount);\\\\n                token.transfer(recipient, recipientAmount);\\\\n                token.transfer(miner, commisionAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, commisionPrc, claimsCnt);\\\\n            } else {\\\\n                token.transfer(recipient, rewardAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, 0, claimsCnt);\\\\n            }\\\\n\\\\n            _claimedTokens = _claimedTokens.add(rewardAmount);\\\\n\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(claimsCnt < REWARDS_CNT_LIMIT, \\\\\\"claim count is too big\\\\\\");\\\\n            require(claimsCnt < rewardsCnt, \\\\\\"claim count is too big\\\\\\");\\\\n            claimsCnt++;\\\\n            records._addClaim(blockNumber, recipient, rewardUnits);\\\\n\\\\n            if(claimsCnt >= rewardsCnt) {\\\\n                _claimedChallenges++;\\\\n                admin._cleanupChallenge(blockNumber, premium);\\\\n            }\\\\n\\\\n            // Notify the marketing contract\\\\n            if(marketingAddr != address(0)) {\\\\n                ILuminaMarketing marketing = ILuminaMarketing(marketingAddr);\\\\n                try marketing._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc) {\\\\n                } catch Error(string memory message) {\\\\n                    _marketingCallSuccessCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, message);\\\\n                } catch {\\\\n                    _marketingCallFailedCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3abb18c92c1ed229a724077f859287196c92e79a44843c2272b9a97a823b400b\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x19515758397fdbbdde67a6f4c5f2d02f89aa369109752c5dcfec52d1adb626ac\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Rules.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract Rules is Parameters {\\\\n    using SafeMath for uint256;\\\\n\\\\n    function _getWalletDifficultyDiscount(uint256 challengeHash, address addr, uint256 balance) internal pure returns (uint8) {\\\\n        uint256 h1 = challengeHash;\\\\n        uint256 h2 = uint256(uint160(addr));\\\\n\\\\n        uint256 o = h1 ^ h2;\\\\n        uint16 lsb = Utils._findLsb(o);\\\\n        if(lsb == 0) {\\\\n            lsb = 256;\\\\n        } else {\\\\n            lsb--;\\\\n        }\\\\n\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint8 n = 0;\\\\n        if(b1 >= 1) {\\\\n            if(lsb >= 20) {\\\\n                n = 30;\\\\n            } else if(lsb >= 10) {\\\\n                n = 20 + (uint8(lsb) - 10);\\\\n            } else {\\\\n                n = 2 * uint8(lsb);\\\\n            }\\\\n        } else {\\\\n            if(lsb > 10) {\\\\n                n = 10;\\\\n            } else {\\\\n                n = uint8(lsb);\\\\n            }\\\\n        }\\\\n\\\\n        return n;\\\\n    }\\\\n\\\\n   function _getBalanceDifficultyDiscount(uint256 balance) internal pure returns (uint8) {\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint256 b2 = balance.mod(TOKEN_UNIT).div(REWARD_UNIT);\\\\n\\\\n        uint8 discount;\\\\n        if(b1 >= 1) {\\\\n            if(b1 >= 1000) {\\\\n                discount = 2 * 10 + 10;\\\\n            } else if(b1 >= 500) {\\\\n                discount = 2 * 9 + 10;\\\\n            } else if(b1 >= 200) {\\\\n                discount = 2 * 8 + 10;\\\\n            } else if(b1 >= 100) {\\\\n                discount = 2 * 7 + 10;\\\\n            } else if(b1 >= 50) {\\\\n                discount = 2 * 6 + 10;\\\\n            } else if(b1 >= 20) {\\\\n                discount = 2 * 5 + 10;\\\\n            } else if(b1 >= 10) {\\\\n                discount = 2 * 4 + 10;\\\\n            } else if(b1 >= 5) {\\\\n                discount = 2 * 3 + 10;\\\\n            } else if(b1 >= 3) {\\\\n                discount = 2 * 2 + 10;\\\\n            } else if(b1 >= 2) {\\\\n                discount = 2 * 1 + 10;\\\\n            } else {\\\\n                discount = 2 * 0 + 10;\\\\n            }\\\\n        } else {\\\\n            if(b2 >= 500) {\\\\n                discount = 9;\\\\n            } else if(b2 >= 200) {\\\\n                discount = 8;\\\\n            } else if(b2 >= 100) {\\\\n                discount = 7;\\\\n            } else if(b2 >= 50) {\\\\n                discount = 6;\\\\n            } else if(b2 >= 20) {\\\\n                discount = 5;\\\\n            } else if(b2 >= 10) {\\\\n                discount = 4;\\\\n            } else if(b2 >= 5) {\\\\n                discount = 3;\\\\n            } else if(b2 >= 2) {\\\\n                discount = 2;\\\\n            } else if(b2 >= 1) {\\\\n                discount = 1;\\\\n            } else {\\\\n                discount = 0;\\\\n            }\\\\n        }\\\\n        return discount;\\\\n    }\\\\n\\\\n    // Now of tokens is means in Einstein era, during Newton era the number need to be multiplies with current units per token number\\\\n    function _getRewardTokens(uint256 challengeHash) internal pure returns (uint16 rewardsCnt, uint16 tokens) {\\\\n        uint256 h = challengeHash;\\\\n\\\\n        if(((h >> (256-20)) & 0xFFFFF) == 0x22222) {\\\\n            return (500, 2000);\\\\n        } else if(((h >> (256-16)) & 0xFFFF) == 0x2222) {\\\\n            return (200, 500);\\\\n        } else if(((h >> (256-12)) & 0xFFF) == 0x222) {\\\\n            return (100, 100);\\\\n        } else if(((h >> (256-2)) & 0xFF) == 0x22) {\\\\n            return (50, 20);\\\\n        } else if(((h >> (256-4)) & 0xF) == 0x2) {\\\\n            return (20, 5);\\\\n        } else {\\\\n            return (10, 1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3009c450f1ddaa90322820a0ba12ec9b6370364e56bca1b04e7c61e6204df66e\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620028e3380380620028e383398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b620016b71760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b61262c80620002b76000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638183059311610130578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610457578063ec2165d31461045f578063f2fde38b14610467578063f668bee51461047a578063f883fcaa146103ba57600080fd5b8063b91268e814610436578063b915dec21461043e578063c28bd11c146103ba578063c28cedf314610446578063c6088d971461044e57600080fd5b80639d941362116100ff5780639d941362146103b2578063a21577671461040b578063a5c9cd8214610413578063a7c1d5901461041b578063b313bd621461042e57600080fd5b806381830593146103c25780638456cb59146103d55780638da5cb5b146103dd578063939c4456146103ee57600080fd5b80633ff42b92116101be5780635fbe4d1d116101825780635fbe4d1d1461038e5780636bb987fe146103a1578063715018a6146103aa57806373d6aafa146103b25780637fb01232146103ba57600080fd5b80633ff42b9214610345578063479e92c814610358578063504b3662146103605780635b7f415c146103685780635c975abb1461037057600080fd5b80631e7bfd60116102055780631e7bfd60146102d257806330db4fa0146102fd5780633a3a7c531461031d5780633e6e387c146103335780633f4ba83a1461033b57600080fd5b806306e38632146102375780630bf43309146102575780630e7d8db9146102715780630ff8a7eb146102bf575b600080fd5b61023f600581565b60405161ffff90911681526020015b60405180910390f35b61025f60d081565b60405160ff909116815260200161024e565b61028461027f366004611ef3565b6104c0565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a00161024e565b61023f6102cd366004611ef3565b6108f1565b6002546102e5906001600160a01b031681565b6040516001600160a01b03909116815260200161024e565b61030560c881565b6040516001600160401b03909116815260200161024e565b610325610adf565b60405190815260200161024e565b61023f600281565b610343610af9565b005b6004546102e5906001600160a01b031681565b61025f600a81565b61025f606481565b61025f601281565b600054600160a01b900460ff165b604051901515815260200161024e565b6001546102e5906001600160a01b031681565b61030561996881565b610343610b2d565b61023f600a81565b61025f600281565b6003546102e5906001600160a01b031681565b610343610b89565b6000546001600160a01b03166102e5565b6103f6610bbb565b6040805192835260208301919091520161024e565b61025f60ff81565b610325610c3e565b610343610429366004611f44565b610c4a565b610305600281565b610325610daf565b600854610325565b61037e600181565b61023f6103e881565b610325610dd1565b610305610de9565b610343610475366004611f44565b610df6565b61048d610488366004611ef3565b610e91565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff16606082015260800161024e565b60008060008060006104dc60005460ff600160a01b9091041690565b156105025760405162461bcd60e51b81526004016104f990611f61565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190612030565b608083015191975091935090915061060c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104f9565b600061061e8c8b848660000151611739565b9050600061062e8d8d8d8d6108f1565b905060009850600097508160ff168161ffff16106107e2576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906120f4565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107179291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061210d565b63ffffffff161561076c57600398506107dc565b8b6001600160a01b03168d6001600160a01b0316141580156107ae575061079560036012612149565b6107a090600a612250565b6107ab90600a61225f565b81105b156107bc57600598506107dc565b8b3b151580156107d257506107d08c611919565b155b156107dc57600698505b506107e7565b600297505b60ff88166108e25760006107fe856000015161198d565b9097509050600261ffff8816111561081557600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b815260040161086591906001600160401b0391909116815260200190565b602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061227e565b95508661ffff168661ffff1610156108db57846040015161ffff168161ffff166108d09190612299565b9950600098506108e0565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff161561091c5760405162461bcd60e51b81526004016104f990611f61565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190612030565b9250925092508060ff1660016109ae5760146109b1565b600a5b60ff16111580156109c6575060d060ff821611155b610a125760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104f9565b811580610a2157506001821515145b610a2a57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610ab55760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104f9565b80516020820120610ac581611a26565b610ad1906101006122c5565b9a9950505050505050505050565b610aeb60036012612149565b610af690600a612250565b81565b6000546001600160a01b03163314610b235760405162461bcd60e51b81526004016104f9906122e8565b610b2b611a99565b565b6000546001600160a01b03163314610b575760405162461bcd60e51b81526004016104f9906122e8565b600054600160a01b900460ff1615610b815760405162461bcd60e51b81526004016104f990611f61565b610b2b611b1d565b6000546001600160a01b03163314610bb35760405162461bcd60e51b81526004016104f9906122e8565b610b2b6116b7565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b91906120f4565b600854610c38919061231d565b90509091565b610af66012600a612250565b6000546001600160a01b03163314610c745760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b0381161580610d0757506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc9190612335565b6001600160a01b0316145b610d8d5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104f9565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610dbb60036012612149565b610dc690600a612250565b610af690600a61225f565b610ddd6012600a612250565b610af6906103e861225f565b610af66199686007612352565b6000546001600160a01b03163314610e205760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b038116610e855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f9565b610e8e81611b4d565b50565b600080600080610eab60005460ff600160a01b9091041690565b15610ec85760405162461bcd60e51b81526004016104f990611f61565b6000610ed6898989896104c0565b9398509196509450909250905060ff84166116ab5760008563ffffffff1611610f395760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104f9565b610f476107d06103e8611b9d565b8563ffffffff161115610f9c5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104f9565b6000610fc8610fad60036012612149565b610fb890600a612250565b63ffffffff8089169190611b9d16565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103c9190612378565b9050886001600160a01b03168a6001600160a01b0316146111e9576000611071606461106b8560ff8616611b9d565b90611bb2565b9050600061107f8483611bbe565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612393565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111709190612393565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111da9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506112c1565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612393565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546112ce9083611bca565b600855600261ffff85161061131e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b8261ffff168461ffff161061136e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b83611378816123ae565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b505050508261ffff168461ffff16106114ab5760078054600160a01b90046001600160401b0316906014611424836123d0565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156116a857600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561153257600080fd5b505af1925050508015611543575060015b6116a65761154f6123ed565b806308c379a014156116035750611564612409565b8061156f5750611605565b600980546001600160401b0316906000611588836123d0565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e836040516115f593929190612492565b60405180910390a1506116a6565b505b600980546801000000000000000090046001600160401b031690600861162a836123d0565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156116e15760405162461bcd60e51b81526004016104f990611f61565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861171c3390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906120f4565b905060006117c9848784611bd6565b905060006117d683611ca3565b905060ff8616600a118015906117f0575060d060ff871611155b6118525760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104f9565b600061185e8284612507565b90508060ff168760ff16101561187557600061187f565b61187f8188612149565b9450600a60ff8616101561189257600a94505b60ff8516600a118015906118aa575060d060ff861611155b61190d5760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104f9565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611979575060408051601f3d908101601f1916820190925261197691810190612393565b60015b6119865750600092915050565b9392505050565b600080826202222260ec82901c14156119af57506101f4936107d09350915050565b61222260f082901c14156119cb575060c8936101f49350915050565b61022260f482901c14156119e55750606493849350915050565b602260fe82901c14156119ff575060329360149350915050565b600260fc82901c1415611a19575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611a925760006001611a4b838561252c565b61ffff16901c905060006001611a62836002612552565b611a6c9190612562565b9050808611611a7d57819250611a8b565b611a8882600161252c565b93505b5050611a2d565b5092915050565b600054600160a01b900460ff16611ae95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104f9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361171c565b6000546001600160a01b03163314611b475760405162461bcd60e51b81526004016104f9906122e8565b610b2b60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611ba9828461225f565b90505b92915050565b6000611ba9828461258f565b6000611ba98284612562565b6000611ba9828461231d565b6000836001600160a01b03841680821883611bf082611e43565b905061ffff8116611c045750610100611c12565b80611c0e816125a3565b9150505b6000611c2a611c236012600a612250565b8890611bb2565b9050600060018210611c7e5760148361ffff1610611c4a5750601e611c96565b600a8361ffff1610611c7357611c61600a84612149565b611c6c906014612507565b9050611c96565b611c6c8360026125c1565b600a8361ffff161115611c935750600a611c96565b50815b9998505050505050505050565b600080611cbc611cb56012600a612250565b8490611bb2565b90506000611cf0611ccf60036012612149565b611cda90600a612250565b61106b611ce96012600a612250565b8790611ebd565b9050600060018310611da6576103e88310611d0d5750601e611e3b565b6101f48310611d1e5750601c611e3b565b60c88310611d2e5750601a611e3b565b60648310611d3e57506018611e3b565b60328310611d4e57506016611e3b565b60148310611d5e57506014611e3b565b600a8310611d6e57506012611e3b565b60058310611d7e57506010611e3b565b60038310611d8e5750600e611e3b565b60028310611d9e5750600c611e3b565b50600a611e3b565b6101f48210611db757506009611e3b565b60c88210611dc757506008611e3b565b60648210611dd757506007611e3b565b60328210611de757506006611e3b565b60148210611df757506005611e3b565b600a8210611e0757506004611e3b565b60058210611e1757506003611e3b565b60028210611e2757506002611e3b565b60018210611e3757506001611e3b565b5060005b949350505050565b600081611e5257506000919050565b60016101005b8061ffff168261ffff161015611a925760006001611e76838561252c565b61ffff16901c905060006001611e8d836002612552565b611e979190612562565b9050858116611eb257611eab82600161252c565b9350611eb6565b8192505b5050611e58565b6000611ba982846125e2565b6001600160401b0381168114610e8e57600080fd5b6001600160a01b0381168114610e8e57600080fd5b60008060008060808587031215611f0957600080fd5b8435611f1481611ec9565b93506020850135611f2481611ede565b92506040850135611f3481611ede565b9396929550929360600135925050565b600060208284031215611f5657600080fd5b813561198681611ede565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611fb857634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611ff157634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff8116811461200a57600080fd5b919050565b805160ff8116811461200a57600080fd5b8051801515811461200a57600080fd5b600080600083850361012081121561204757600080fd5b60e081121561205557600080fd5b5060405161206281611f8b565b84518152602085015161207481611ec9565b602082015261208560408601611ff8565b60408201526120966060860161200f565b60608201526120a760808601612020565b60808201526120b860a0860161200f565b60a08201526120c960c0860161200f565b60c082015292506120dc60e08501612020565b91506120eb610100850161200f565b90509250925092565b60006020828403121561210657600080fd5b5051919050565b60006020828403121561211f57600080fd5b815163ffffffff8116811461198657600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561216357612163612133565b90039392505050565b600181815b808511156121a757816000190482111561218d5761218d612133565b8085161561219a57918102915b93841c9390800290612171565b509250929050565b6000826121be57506001611bac565b816121cb57506000611bac565b81600181146121e157600281146121eb57612207565b6001915050611bac565b60ff8411156121fc576121fc612133565b50506001821b611bac565b5060208310610133831016604e8410600b841016171561222a575081810a611bac565b612234838361216c565b806000190482111561224857612248612133565b029392505050565b6000611ba960ff8416836121af565b600081600019048311821515161561227957612279612133565b500290565b60006020828403121561229057600080fd5b611ba982611ff8565b600063ffffffff808316818516818304811182151516156122bc576122bc612133565b02949350505050565b600061ffff838116908316818110156122e0576122e0612133565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561233057612330612133565b500190565b60006020828403121561234757600080fd5b815161198681611ede565b60006001600160401b03808316818516818304811182151516156122bc576122bc612133565b60006020828403121561238a57600080fd5b611ba98261200f565b6000602082840312156123a557600080fd5b611ba982612020565b600061ffff808316818114156123c6576123c6612133565b6001019392505050565b60006001600160401b03808316818114156123c6576123c6612133565b600060033d11156124065760046000803e5060005160e01c5b90565b600060443d10156124175790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561244657505050505090565b828501915081518181111561245e5750505050505090565b843d87010160208285010111156124785750505050505090565b61248760208286010187611fbe565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b818110156124dd578581018301518582016080015282016124c1565b818111156124ef576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561252457612524612133565b019392505050565b600061ffff80831681851680830382111561254957612549612133565b01949350505050565b6000611ba961ffff8416836121af565b60008282101561257457612574612133565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261259e5761259e612579565b500490565b600061ffff8216806125b7576125b7612133565b6000190192915050565b600060ff821660ff84168160ff048111821515161561224857612248612133565b6000826125f1576125f1612579565b50069056fea2646970667358221220fa5afe0195ca1f3a32a2019fffcf00c2e32332ee3e7e38f83041e121b4555dc964736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638183059311610130578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610457578063ec2165d31461045f578063f2fde38b14610467578063f668bee51461047a578063f883fcaa146103ba57600080fd5b8063b91268e814610436578063b915dec21461043e578063c28bd11c146103ba578063c28cedf314610446578063c6088d971461044e57600080fd5b80639d941362116100ff5780639d941362146103b2578063a21577671461040b578063a5c9cd8214610413578063a7c1d5901461041b578063b313bd621461042e57600080fd5b806381830593146103c25780638456cb59146103d55780638da5cb5b146103dd578063939c4456146103ee57600080fd5b80633ff42b92116101be5780635fbe4d1d116101825780635fbe4d1d1461038e5780636bb987fe146103a1578063715018a6146103aa57806373d6aafa146103b25780637fb01232146103ba57600080fd5b80633ff42b9214610345578063479e92c814610358578063504b3662146103605780635b7f415c146103685780635c975abb1461037057600080fd5b80631e7bfd60116102055780631e7bfd60146102d257806330db4fa0146102fd5780633a3a7c531461031d5780633e6e387c146103335780633f4ba83a1461033b57600080fd5b806306e38632146102375780630bf43309146102575780630e7d8db9146102715780630ff8a7eb146102bf575b600080fd5b61023f600581565b60405161ffff90911681526020015b60405180910390f35b61025f60d081565b60405160ff909116815260200161024e565b61028461027f366004611ef3565b6104c0565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a00161024e565b61023f6102cd366004611ef3565b6108f1565b6002546102e5906001600160a01b031681565b6040516001600160a01b03909116815260200161024e565b61030560c881565b6040516001600160401b03909116815260200161024e565b610325610adf565b60405190815260200161024e565b61023f600281565b610343610af9565b005b6004546102e5906001600160a01b031681565b61025f600a81565b61025f606481565b61025f601281565b600054600160a01b900460ff165b604051901515815260200161024e565b6001546102e5906001600160a01b031681565b61030561996881565b610343610b2d565b61023f600a81565b61025f600281565b6003546102e5906001600160a01b031681565b610343610b89565b6000546001600160a01b03166102e5565b6103f6610bbb565b6040805192835260208301919091520161024e565b61025f60ff81565b610325610c3e565b610343610429366004611f44565b610c4a565b610305600281565b610325610daf565b600854610325565b61037e600181565b61023f6103e881565b610325610dd1565b610305610de9565b610343610475366004611f44565b610df6565b61048d610488366004611ef3565b610e91565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff16606082015260800161024e565b60008060008060006104dc60005460ff600160a01b9091041690565b156105025760405162461bcd60e51b81526004016104f990611f61565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190612030565b608083015191975091935090915061060c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104f9565b600061061e8c8b848660000151611739565b9050600061062e8d8d8d8d6108f1565b905060009850600097508160ff168161ffff16106107e2576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906120f4565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107179291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061210d565b63ffffffff161561076c57600398506107dc565b8b6001600160a01b03168d6001600160a01b0316141580156107ae575061079560036012612149565b6107a090600a612250565b6107ab90600a61225f565b81105b156107bc57600598506107dc565b8b3b151580156107d257506107d08c611919565b155b156107dc57600698505b506107e7565b600297505b60ff88166108e25760006107fe856000015161198d565b9097509050600261ffff8816111561081557600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b815260040161086591906001600160401b0391909116815260200190565b602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061227e565b95508661ffff168661ffff1610156108db57846040015161ffff168161ffff166108d09190612299565b9950600098506108e0565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff161561091c5760405162461bcd60e51b81526004016104f990611f61565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190612030565b9250925092508060ff1660016109ae5760146109b1565b600a5b60ff16111580156109c6575060d060ff821611155b610a125760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104f9565b811580610a2157506001821515145b610a2a57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610ab55760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104f9565b80516020820120610ac581611a26565b610ad1906101006122c5565b9a9950505050505050505050565b610aeb60036012612149565b610af690600a612250565b81565b6000546001600160a01b03163314610b235760405162461bcd60e51b81526004016104f9906122e8565b610b2b611a99565b565b6000546001600160a01b03163314610b575760405162461bcd60e51b81526004016104f9906122e8565b600054600160a01b900460ff1615610b815760405162461bcd60e51b81526004016104f990611f61565b610b2b611b1d565b6000546001600160a01b03163314610bb35760405162461bcd60e51b81526004016104f9906122e8565b610b2b6116b7565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b91906120f4565b600854610c38919061231d565b90509091565b610af66012600a612250565b6000546001600160a01b03163314610c745760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b0381161580610d0757506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc9190612335565b6001600160a01b0316145b610d8d5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104f9565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610dbb60036012612149565b610dc690600a612250565b610af690600a61225f565b610ddd6012600a612250565b610af6906103e861225f565b610af66199686007612352565b6000546001600160a01b03163314610e205760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b038116610e855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f9565b610e8e81611b4d565b50565b600080600080610eab60005460ff600160a01b9091041690565b15610ec85760405162461bcd60e51b81526004016104f990611f61565b6000610ed6898989896104c0565b9398509196509450909250905060ff84166116ab5760008563ffffffff1611610f395760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104f9565b610f476107d06103e8611b9d565b8563ffffffff161115610f9c5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104f9565b6000610fc8610fad60036012612149565b610fb890600a612250565b63ffffffff8089169190611b9d16565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103c9190612378565b9050886001600160a01b03168a6001600160a01b0316146111e9576000611071606461106b8560ff8616611b9d565b90611bb2565b9050600061107f8483611bbe565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612393565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111709190612393565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111da9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506112c1565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612393565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546112ce9083611bca565b600855600261ffff85161061131e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b8261ffff168461ffff161061136e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b83611378816123ae565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b505050508261ffff168461ffff16106114ab5760078054600160a01b90046001600160401b0316906014611424836123d0565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156116a857600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561153257600080fd5b505af1925050508015611543575060015b6116a65761154f6123ed565b806308c379a014156116035750611564612409565b8061156f5750611605565b600980546001600160401b0316906000611588836123d0565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e836040516115f593929190612492565b60405180910390a1506116a6565b505b600980546801000000000000000090046001600160401b031690600861162a836123d0565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156116e15760405162461bcd60e51b81526004016104f990611f61565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861171c3390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906120f4565b905060006117c9848784611bd6565b905060006117d683611ca3565b905060ff8616600a118015906117f0575060d060ff871611155b6118525760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104f9565b600061185e8284612507565b90508060ff168760ff16101561187557600061187f565b61187f8188612149565b9450600a60ff8616101561189257600a94505b60ff8516600a118015906118aa575060d060ff861611155b61190d5760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104f9565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611979575060408051601f3d908101601f1916820190925261197691810190612393565b60015b6119865750600092915050565b9392505050565b600080826202222260ec82901c14156119af57506101f4936107d09350915050565b61222260f082901c14156119cb575060c8936101f49350915050565b61022260f482901c14156119e55750606493849350915050565b602260fe82901c14156119ff575060329360149350915050565b600260fc82901c1415611a19575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611a925760006001611a4b838561252c565b61ffff16901c905060006001611a62836002612552565b611a6c9190612562565b9050808611611a7d57819250611a8b565b611a8882600161252c565b93505b5050611a2d565b5092915050565b600054600160a01b900460ff16611ae95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104f9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361171c565b6000546001600160a01b03163314611b475760405162461bcd60e51b81526004016104f9906122e8565b610b2b60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611ba9828461225f565b90505b92915050565b6000611ba9828461258f565b6000611ba98284612562565b6000611ba9828461231d565b6000836001600160a01b03841680821883611bf082611e43565b905061ffff8116611c045750610100611c12565b80611c0e816125a3565b9150505b6000611c2a611c236012600a612250565b8890611bb2565b9050600060018210611c7e5760148361ffff1610611c4a5750601e611c96565b600a8361ffff1610611c7357611c61600a84612149565b611c6c906014612507565b9050611c96565b611c6c8360026125c1565b600a8361ffff161115611c935750600a611c96565b50815b9998505050505050505050565b600080611cbc611cb56012600a612250565b8490611bb2565b90506000611cf0611ccf60036012612149565b611cda90600a612250565b61106b611ce96012600a612250565b8790611ebd565b9050600060018310611da6576103e88310611d0d5750601e611e3b565b6101f48310611d1e5750601c611e3b565b60c88310611d2e5750601a611e3b565b60648310611d3e57506018611e3b565b60328310611d4e57506016611e3b565b60148310611d5e57506014611e3b565b600a8310611d6e57506012611e3b565b60058310611d7e57506010611e3b565b60038310611d8e5750600e611e3b565b60028310611d9e5750600c611e3b565b50600a611e3b565b6101f48210611db757506009611e3b565b60c88210611dc757506008611e3b565b60648210611dd757506007611e3b565b60328210611de757506006611e3b565b60148210611df757506005611e3b565b600a8210611e0757506004611e3b565b60058210611e1757506003611e3b565b60028210611e2757506002611e3b565b60018210611e3757506001611e3b565b5060005b949350505050565b600081611e5257506000919050565b60016101005b8061ffff168261ffff161015611a925760006001611e76838561252c565b61ffff16901c905060006001611e8d836002612552565b611e979190612562565b9050858116611eb257611eab82600161252c565b9350611eb6565b8192505b5050611e58565b6000611ba982846125e2565b6001600160401b0381168114610e8e57600080fd5b6001600160a01b0381168114610e8e57600080fd5b60008060008060808587031215611f0957600080fd5b8435611f1481611ec9565b93506020850135611f2481611ede565b92506040850135611f3481611ede565b9396929550929360600135925050565b600060208284031215611f5657600080fd5b813561198681611ede565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611fb857634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611ff157634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff8116811461200a57600080fd5b919050565b805160ff8116811461200a57600080fd5b8051801515811461200a57600080fd5b600080600083850361012081121561204757600080fd5b60e081121561205557600080fd5b5060405161206281611f8b565b84518152602085015161207481611ec9565b602082015261208560408601611ff8565b60408201526120966060860161200f565b60608201526120a760808601612020565b60808201526120b860a0860161200f565b60a08201526120c960c0860161200f565b60c082015292506120dc60e08501612020565b91506120eb610100850161200f565b90509250925092565b60006020828403121561210657600080fd5b5051919050565b60006020828403121561211f57600080fd5b815163ffffffff8116811461198657600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561216357612163612133565b90039392505050565b600181815b808511156121a757816000190482111561218d5761218d612133565b8085161561219a57918102915b93841c9390800290612171565b509250929050565b6000826121be57506001611bac565b816121cb57506000611bac565b81600181146121e157600281146121eb57612207565b6001915050611bac565b60ff8411156121fc576121fc612133565b50506001821b611bac565b5060208310610133831016604e8410600b841016171561222a575081810a611bac565b612234838361216c565b806000190482111561224857612248612133565b029392505050565b6000611ba960ff8416836121af565b600081600019048311821515161561227957612279612133565b500290565b60006020828403121561229057600080fd5b611ba982611ff8565b600063ffffffff808316818516818304811182151516156122bc576122bc612133565b02949350505050565b600061ffff838116908316818110156122e0576122e0612133565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561233057612330612133565b500190565b60006020828403121561234757600080fd5b815161198681611ede565b60006001600160401b03808316818516818304811182151516156122bc576122bc612133565b60006020828403121561238a57600080fd5b611ba98261200f565b6000602082840312156123a557600080fd5b611ba982612020565b600061ffff808316818114156123c6576123c6612133565b6001019392505050565b60006001600160401b03808316818114156123c6576123c6612133565b600060033d11156124065760046000803e5060005160e01c5b90565b600060443d10156124175790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561244657505050505090565b828501915081518181111561245e5750505050505090565b843d87010160208285010111156124785750505050505090565b61248760208286010187611fbe565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b818110156124dd578581018301518582016080015282016124c1565b818111156124ef576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561252457612524612133565b019392505050565b600061ffff80831681851680830382111561254957612549612133565b01949350505050565b6000611ba961ffff8416836121af565b60008282101561257457612574612133565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261259e5761259e612579565b500490565b600061ffff8216806125b7576125b7612133565b6000190192915050565b600060ff821660ff84168160ff048111821515161561224857612248612133565b6000826125f1576125f1612579565b50069056fea2646970667358221220fa5afe0195ca1f3a32a2019fffcf00c2e32332ee3e7e38f83041e121b4555dc964736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":5700,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":5702,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":5704,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"adminAddr","offset":0,"slot":"3","type":"t_address"},{"astId":5706,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"marketingAddr","offset":0,"slot":"4","type":"t_address"},{"astId":5709,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"token","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":5712,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2689"},{"astId":5715,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"admin","offset":0,"slot":"7","type":"t_contract(ILuminaAdmin)2509"},{"astId":5717,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedChallenges","offset":20,"slot":"7","type":"t_uint64"},{"astId":5719,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedTokens","offset":0,"slot":"8","type":"t_uint256"},{"astId":5721,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallSuccessCnt","offset":0,"slot":"9","type":"t_uint64"},{"astId":5723,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallFailedCnt","offset":8,"slot":"9","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(ILuminaAdmin)2509":{"encoding":"inplace","label":"contract ILuminaAdmin","numberOfBytes":"20"},"t_contract(ILuminaRecords)2689":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},437:function(e){e.exports=JSON.parse('{"address":"0xB068856187e50b4077b56EF21EA3e802f3eDF9D4","abi":[{"inputs":[{"internalType":"address","name":"erc20Addr_","type":"address"},{"internalType":"address","name":"progressingAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"availableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"erc20Addr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"notAvailableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"progressingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"withdrawnBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x0d36639959e74a571ea9d81ad5a14d69031cfa5720a96e042ecadd9528afe627","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xB068856187e50b4077b56EF21EA3e802f3eDF9D4","transactionIndex":0,"gasUsed":"1577552","logsBloom":"0xblockHash":"0x0d08c90ef62061f35c2a79035bce2b23a37824f9ce658b634188982a1662bd44","transactionHash":"0x0d36639959e74a571ea9d81ad5a14d69031cfa5720a96e042ecadd9528afe627","logs":[{"transactionIndex":0,"blockNumber":24634519,"transactionHash":"0x0d36639959e74a571ea9d81ad5a14d69031cfa5720a96e042ecadd9528afe627","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000a823416c7d2d80000000000000000000000000000000000000000000000000053c2b509bd33f7c0000000000000000000000000000000000000000000006477a74868f24e1d5ae0000000000000000000000000000000000000000000000000494080f2f5611fc0000000000000000000000000000000000000000000006477b1ca9d0915f032e","logIndex":0,"blockHash":"0x0d08c90ef62061f35c2a79035bce2b23a37824f9ce658b634188982a1662bd44"}],"blockNumber":24634519,"cumulativeGasUsed":"1577552","status":1,"byzantium":true},"args":["0x384338c8f3F7beA28Befecf51d22565a57cE421C","0xC89A12f2d352b71d505Ce19719A20fDB3569A37b"],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"erc20Addr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"progressingAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"availableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"deposit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"erc20Addr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"notAvailableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"progressingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalLockedBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"withdrawAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"withdrawnBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/ProgressContractLocker.sol\\":\\"ProgressContractLocker\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressContractLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./ProgressLocker.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\ncontract ProgressContractLocker is ProgressLocker {\\\\n    address public progressingAddr;\\\\n    address public erc20Addr;\\\\n\\\\n    constructor(address erc20Addr_, address progressingAddr_)\\\\n        ProgressLocker(Utils.concat(\\\\\\"Locked \\\\\\", ERC20(erc20Addr_).name()), Utils.concat(\\\\\\"L\\\\\\", ERC20(erc20Addr_).symbol()), ERC20(erc20Addr_), Progressing(progressingAddr_)) {\\\\n        erc20Addr = erc20Addr_;\\\\n        progressingAddr = progressingAddr_;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2388f8f4656b942df92c307747b573a535c572ea88f646a9115660d348b77366\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\n\\\\nabstract contract ProgressLocker is ERC20 {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private erc20;\\\\n\\\\n    // Link to contract or object with progressing indicator\\\\n    Progressing private progressing;\\\\n\\\\n    // Mapping address to adjustment\\\\n    // Adjustment basically relects the amoutn withdrawn form the account\\\\n    // but it gets more compicated opnce you start tranferring locked tokens to other accounts\\\\n    //\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    //\\\\n    mapping (address => uint256) private _adjustment;\\\\n\\\\n    // True amount withdrawn from each account\\\\n    mapping (address => uint256) private _withdrawn;\\\\n\\\\n    constructor(string memory name_, string memory symbol_, IERC20 erc20_, Progressing progressing_)\\\\n        ERC20(name_, symbol_)\\\\n    {\\\\n        erc20 = erc20_;\\\\n        progressing = progressing_;\\\\n\\\\n        // Just check if all is good\\\\n        progressing.getProgress();\\\\n    }\\\\n\\\\n    function totalLockedBalance() public view returns (uint256) {\\\\n        uint256 total = erc20.balanceOf(address(this));\\\\n        return total;\\\\n    }\\\\n\\\\n    function deposit(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        address recipient = address(this);\\\\n        erc20.transferFrom(sender, recipient, amount);\\\\n        _mint(sender, amount);\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        (progress, progressMax) = progressing.getProgress();\\\\n        if(progress > 0) {\\\\n            require(progress < progressMax, \\\\\\"ProgressLocker: progress is 100%, it does not make any sense to deposit anymore\\\\\\");\\\\n            uint256 aamount = depositAdjustment(amount, progress, progressMax, decimals());\\\\n            _adjustment[sender] = _adjustment[sender].add(aamount);\\\\n        }\\\\n    }\\\\n\\\\n    // (amount + adj) * progress / progressMax == adj, therefore\\\\n    // adj = (amount * progress/progressMax) / (1 - progress/progressMax)\\\\n    function depositAdjustment(uint256 amount, uint256 progress, uint256 progressMax, uint8 decimals) private pure returns (uint256) {\\\\n        uint256 a = amount.mul(progress).div(progressMax);\\\\n        uint256 m = 10 ** decimals;\\\\n        uint256 p = m.mul(progress).div(progressMax);\\\\n        uint256 b = m.sub(p);\\\\n        uint256 adj = a.mul(m).div(b);\\\\n        return adj;\\\\n    }\\\\n\\\\n    function withdraw(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        uint256 available = availableBalanceOf(sender);\\\\n        require(amount <= available, \\\\\\"ProgressLocker: Withdrawal exceeds the available amount\\\\\\");\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    function withdrawAll() public {\\\\n        address sender = msg.sender;\\\\n        uint256 amount = availableBalanceOf(sender);\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    function availableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 balance = balanceOf(account);\\\\n        // Let\'s call progressing directly so we can test returned values\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        if(progress == 0) {\\\\n            return 0;\\\\n        }\\\\n        if(progress >= progressMax) {\\\\n            return balance;\\\\n        }\\\\n        uint256 adjustment = adjustmentBalanceOf(account);\\\\n        uint256 totalWithdraw = balance.add(adjustment).mul(progress).div(progressMax, \\\\\\"ProgressLocker: zero progressMax\\\\\\");\\\\n        if(totalWithdraw > adjustment) {\\\\n            return totalWithdraw.sub(adjustment);\\\\n        }\\\\n        return 0;\\\\n    }\\\\n\\\\n    function notAvailableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 total = balanceOf(account);\\\\n        uint256 available = availableBalanceOf(account);\\\\n        return total.sub(available);\\\\n    }\\\\n\\\\n    function withdrawnBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 withdrawn = _withdrawn[account];\\\\n        return withdrawn;\\\\n    }\\\\n\\\\n    function adjustmentBalanceOf(address account) private view returns (uint256) {\\\\n        uint256 adjustment = _adjustment[account];\\\\n        return adjustment;\\\\n    }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        uint256 balance = balanceOf(sender);\\\\n        super._transfer(sender, recipient, amount);\\\\n        if(amount > 0) {\\\\n            uint256 adjustment = adjustmentBalanceOf(sender);\\\\n            uint256 aamount = adjustment.mul(amount).div(balance, \\\\\\"ProgressLocker: zero balance\\\\\\");\\\\n            _adjustment[sender] = adjustment.sub(aamount);\\\\n            _adjustment[recipient] = _adjustment[recipient].add(aamount);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb0cb0afeebeb198b562830bf8886edf9ae9bc739a63900ee04f91400108347ae\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162001e9338038062001e93833981016040819052620000349162000461565b620000d26040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004af565b6200022e60201b62000c361760201c565b6200012f604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014b9291906200039e565b508051620001619060049060208401906200039e565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f191906200058b565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200065292505050565b8051825160609184918491600091620002489190620005c6565b6001600160401b0381111562000262576200026262000499565b6040519080825280601f01601f1916602001820160405280156200028d576020820181803683370190505b509050806000805b85518110156200031157858181518110620002b457620002b4620005e1565b01602001516001600160f81b0319168383620002d081620005f7565b945081518110620002e557620002e5620005e1565b60200101906001600160f81b031916908160001a905350806200030881620005f7565b91505062000295565b5060005b84518110156200039157848181518110620003345762000334620005e1565b01602001516001600160f81b03191683836200035081620005f7565b945081518110620003655762000365620005e1565b60200101906001600160f81b031916908160001a905350806200038881620005f7565b91505062000315565b5090979650505050505050565b828054620003ac9062000615565b90600052602060002090601f016020900481019282620003d057600085556200041b565b82601f10620003eb57805160ff19168380011785556200041b565b828001600101855582156200041b579182015b828111156200041b578251825591602001919060010190620003fe565b50620004299291506200042d565b5090565b5b808211156200042957600081556001016200042e565b80516001600160a01b03811681146200045c57600080fd5b919050565b600080604083850312156200047557600080fd5b620004808362000444565b9150620004906020840162000444565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004c357600080fd5b82516001600160401b0380821115620004db57600080fd5b818501915085601f830112620004f057600080fd5b81518181111562000505576200050562000499565b604051601f8201601f19908116603f0116810190838211818310171562000530576200053062000499565b8160405282815288868487010111156200054957600080fd5b600093505b828410156200056d57848401860151818501870152928501926200054e565b828411156200057f5760008684830101525b98975050505050505050565b600080604083850312156200059f57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005dc57620005dc620005b0565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200060e576200060e620005b0565b5060010190565b600181811c908216806200062a57607f821691505b602082108114156200064c57634e487b7160e01b600052602260045260246000fd5b50919050565b61183180620006626000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b604051610146919061144d565b60405180910390f35b61016261015d3660046114be565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b6101626101923660046114e8565b6103b7565b6101766101a5366004611524565b610466565b6101766105bf565b6101c56101c036600461153f565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f3660046114be565b6107a8565b610176610222366004611524565b6107e4565b610176610235366004611524565b6001600160a01b031660009081526020819052604090205490565b61017661025e366004611524565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b6101626102973660046114be565b610936565b6101626102aa3660046114be565b6109cf565b6101c56102bd36600461153f565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611558565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d9061158b565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061158b565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610d89565b5060015b92915050565b60006103c4848484610eae565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610d89565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906115c6565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610f8390919063ffffffff16565b90610f96565b9190610fa2565b9050818111156105b2576105a78183610fdc565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b191906115ea565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610f83565b6001600160a01b0385166000908152600860205260409020556107298486610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611603565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df90869061163b565b610d89565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610fdc565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610f83565b6001600160a01b0385166000908152600860205260409020556108a98484610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611603565b5050505050565b60606004805461031d9061158b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610d89565b5060019392505050565b60006103ad338484610eae565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611603565b50610a6a828461112e565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906115c6565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4891906115c6565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef868484601261120d565b6001600160a01b038616600090815260076020526040902054909150610c159082610f83565b6001600160a01b038616600090815260076020526040902055505050505050565b8051825160609184918491600091610c4e919061163b565b67ffffffffffffffff811115610c6657610c66611653565b6040519080825280601f01601f191660200182016040528015610c90576020820181803683370190505b509050806000805b8551811015610d0857858181518110610cb357610cb3611669565b01602001516001600160f81b0319168383610ccd8161167f565b945081518110610cdf57610cdf611669565b60200101906001600160f81b031916908160001a90535080610d008161167f565b915050610c98565b5060005b8451811015610d7c57848181518110610d2757610d27611669565b01602001516001600160f81b0319168383610d418161167f565b945081518110610d5357610d53611669565b60200101906001600160f81b031916908160001a90535080610d748161167f565b915050610d0c565b5090979650505050505050565b6001600160a01b038316610deb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610e4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610ed2848484611273565b8115610f7d576001600160a01b03841660009081526007602052604081205490506000610f42836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610f9690919063ffffffff16565b9050610f4e8282610fdc565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610f83565b50505050565b6000610f8f828461163b565b9392505050565b6000610f8f828461169a565b60008183610fc35760405162461bcd60e51b8152600401610445919061144d565b50828481610fd357610fd36116b9565b04949350505050565b6000610f8f82846116cf565b6001600160a01b0382166110485760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b038216600090815260208190526040902054818110156110bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b03831660009081526020819052604081208383039055600280548492906110eb9084906116cf565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ea1565b6001600160a01b0382166111845760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b8060026000828254611196919061163b565b90915550506001600160a01b038216600090815260208190526040812080548392906111c390849061163b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806112248461121e8888610f96565b90611441565b9050600061123384600a6117ca565b905060006112458661121e848a610f96565b905060006112538383610fdc565b905060006112658261121e8787610f96565b9a9950505050505050505050565b6001600160a01b0383166112d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166113395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b038316600090815260208190526040902054818110156113b15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113e890849061163b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161143491815260200190565b60405180910390a3610f7d565b6000610f8f82846117d9565b600060208083528351808285015260005b8181101561147a5785810183015185820160400152820161145e565b8181111561148c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146114b957600080fd5b919050565b600080604083850312156114d157600080fd5b6114da836114a2565b946020939093013593505050565b6000806000606084860312156114fd57600080fd5b611506846114a2565b9250611514602085016114a2565b9150604084013590509250925092565b60006020828403121561153657600080fd5b610f8f826114a2565b60006020828403121561155157600080fd5b5035919050565b6000806040838503121561156b57600080fd5b611574836114a2565b9150611582602084016114a2565b90509250929050565b600181811c9082168061159f57607f821691505b602082108114156115c057634e487b7160e01b600052602260045260246000fd5b50919050565b600080604083850312156115d957600080fd5b505080516020909101519092909150565b6000602082840312156115fc57600080fd5b5051919050565b60006020828403121561161557600080fd5b81518015158114610f8f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561164e5761164e611625565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561169357611693611625565b5060010190565b60008160001904831182151516156116b4576116b4611625565b500290565b634e487b7160e01b600052601260045260246000fd5b6000828210156116e1576116e1611625565b500390565b600181815b8085111561172157816000190482111561170757611707611625565b8085161561171457918102915b93841c93908002906116eb565b509250929050565b600082611738575060016103b1565b81611745575060006103b1565b816001811461175b576002811461176557611781565b60019150506103b1565b60ff84111561177657611776611625565b50506001821b6103b1565b5060208310610133831016604e8410600b84101617156117a4575081810a6103b1565b6117ae83836116e6565b80600019048211156117c2576117c2611625565b029392505050565b6000610f8f60ff841683611729565b6000826117f657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b73d4d7bf08bbb87de03a90044f68daf352fc2733aa3026cb0d16719a86d2d1b64736f6c634300080b0033","deployedBytecode":"","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":7006,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":7009,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressing","offset":0,"slot":"6","type":"t_contract(Progressing)7532"},{"astId":7013,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_adjustment","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":7017,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_withdrawn","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":6947,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressingAddr","offset":0,"slot":"9","type":"t_address"},{"astId":6949,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20Addr","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(Progressing)7532":{"encoding":"inplace","label":"contract Progressing","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},438:function(e){e.exports=JSON.parse('{"address":"0xD4288F8A9233fafeeead51a2D8c73A26ec62C191","abi":[{"inputs":[{"internalType":"address","name":"erc20Addr_","type":"address"},{"internalType":"address","name":"progressingAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"availableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"erc20Addr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"notAvailableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"progressingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"withdrawnBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x9c055a9a3b737d1bdae8817b97dc2f72302444de82376c87931c9302bec5315b","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xD4288F8A9233fafeeead51a2D8c73A26ec62C191","transactionIndex":0,"gasUsed":"1577530","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x3e0fa34c5dcac7c4dab4fa52223748a88916e1f2c3cf40435acb1b884d40bb5f","transactionHash":"0x9c055a9a3b737d1bdae8817b97dc2f72302444de82376c87931c9302bec5315b","logs":[],"blockNumber":237,"cumulativeGasUsed":"1577530","status":1,"byzantium":true},"args":["0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588","0x29999C962Ef226b65518406754A8fF70A007c712"],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"erc20Addr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"progressingAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"availableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"deposit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"erc20Addr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"notAvailableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"progressingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalLockedBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"withdrawAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"withdrawnBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/ProgressContractLocker.sol\\":\\"ProgressContractLocker\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressContractLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./ProgressLocker.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\ncontract ProgressContractLocker is ProgressLocker {\\\\n    address public progressingAddr;\\\\n    address public erc20Addr;\\\\n\\\\n    constructor(address erc20Addr_, address progressingAddr_)\\\\n        ProgressLocker(Utils.concat(\\\\\\"Locked \\\\\\", ERC20(erc20Addr_).name()), Utils.concat(\\\\\\"L\\\\\\", ERC20(erc20Addr_).symbol()), ERC20(erc20Addr_), Progressing(progressingAddr_)) {\\\\n        erc20Addr = erc20Addr_;\\\\n        progressingAddr = progressingAddr_;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2388f8f4656b942df92c307747b573a535c572ea88f646a9115660d348b77366\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\n\\\\nabstract contract ProgressLocker is ERC20 {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private erc20;\\\\n\\\\n    // Link to contract or object with progressing indicator\\\\n    Progressing private progressing;\\\\n\\\\n    // Mapping address to adjustment\\\\n    // Adjustment basically relects the amoutn withdrawn form the account\\\\n    // but it gets more compicated opnce you start tranferring locked tokens to other accounts\\\\n    //\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    //\\\\n    mapping (address => uint256) private _adjustment;\\\\n\\\\n    // True amount withdrawn from each account\\\\n    mapping (address => uint256) private _withdrawn;\\\\n\\\\n    constructor(string memory name_, string memory symbol_, IERC20 erc20_, Progressing progressing_)\\\\n        ERC20(name_, symbol_)\\\\n    {\\\\n        erc20 = erc20_;\\\\n        progressing = progressing_;\\\\n\\\\n        // Just check if all is good\\\\n        progressing.getProgress();\\\\n    }\\\\n\\\\n    function totalLockedBalance() public view returns (uint256) {\\\\n        uint256 total = erc20.balanceOf(address(this));\\\\n        return total;\\\\n    }\\\\n\\\\n    function deposit(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        address recipient = address(this);\\\\n        erc20.transferFrom(sender, recipient, amount);\\\\n        _mint(sender, amount);\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        (progress, progressMax) = progressing.getProgress();\\\\n        if(progress > 0) {\\\\n            require(progress < progressMax, \\\\\\"ProgressLocker: progress is 100%, it does not make any sense to deposit anymore\\\\\\");\\\\n            uint256 aamount = depositAdjustment(amount, progress, progressMax, decimals());\\\\n            _adjustment[sender] = _adjustment[sender].add(aamount);\\\\n        }\\\\n    }\\\\n\\\\n    // (amount + adj) * progress / progressMax == adj, therefore\\\\n    // adj = (amount * progress/progressMax) / (1 - progress/progressMax)\\\\n    function depositAdjustment(uint256 amount, uint256 progress, uint256 progressMax, uint8 decimals) private pure returns (uint256) {\\\\n        uint256 a = amount.mul(progress).div(progressMax);\\\\n        uint256 m = 10 ** decimals;\\\\n        uint256 p = m.mul(progress).div(progressMax);\\\\n        uint256 b = m.sub(p);\\\\n        uint256 adj = a.mul(m).div(b);\\\\n        return adj;\\\\n    }\\\\n\\\\n    function withdraw(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        uint256 available = availableBalanceOf(sender);\\\\n        require(amount <= available, \\\\\\"ProgressLocker: Withdrawal exceeds the available amount\\\\\\");\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    function withdrawAll() public {\\\\n        address sender = msg.sender;\\\\n        uint256 amount = availableBalanceOf(sender);\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    function availableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 balance = balanceOf(account);\\\\n        // Let\'s call progressing directly so we can test returned values\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        if(progress == 0) {\\\\n            return 0;\\\\n        }\\\\n        if(progress >= progressMax) {\\\\n            return balance;\\\\n        }\\\\n        uint256 adjustment = adjustmentBalanceOf(account);\\\\n        uint256 totalWithdraw = balance.add(adjustment).mul(progress).div(progressMax, \\\\\\"ProgressLocker: zero progressMax\\\\\\");\\\\n        if(totalWithdraw > adjustment) {\\\\n            return totalWithdraw.sub(adjustment);\\\\n        }\\\\n        return 0;\\\\n    }\\\\n\\\\n    function notAvailableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 total = balanceOf(account);\\\\n        uint256 available = availableBalanceOf(account);\\\\n        return total.sub(available);\\\\n    }\\\\n\\\\n    function withdrawnBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 withdrawn = _withdrawn[account];\\\\n        return withdrawn;\\\\n    }\\\\n\\\\n    function adjustmentBalanceOf(address account) private view returns (uint256) {\\\\n        uint256 adjustment = _adjustment[account];\\\\n        return adjustment;\\\\n    }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        uint256 balance = balanceOf(sender);\\\\n        super._transfer(sender, recipient, amount);\\\\n        if(amount > 0) {\\\\n            uint256 adjustment = adjustmentBalanceOf(sender);\\\\n            uint256 aamount = adjustment.mul(amount).div(balance, \\\\\\"ProgressLocker: zero balance\\\\\\");\\\\n            _adjustment[sender] = adjustment.sub(aamount);\\\\n            _adjustment[recipient] = _adjustment[recipient].add(aamount);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb0cb0afeebeb198b562830bf8886edf9ae9bc739a63900ee04f91400108347ae\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa6241497c39fb46dc31d21542f2f403c214dda868de0c408351062d437a30c0\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162001e9338038062001e93833981016040819052620000349162000461565b620000d26040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004af565b6200022e60201b62000c361760201c565b6200012f604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014b9291906200039e565b508051620001619060049060208401906200039e565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f191906200058b565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200065292505050565b8051825160609184918491600091620002489190620005c6565b6001600160401b0381111562000262576200026262000499565b6040519080825280601f01601f1916602001820160405280156200028d576020820181803683370190505b509050806000805b85518110156200031157858181518110620002b457620002b4620005e1565b01602001516001600160f81b0319168383620002d081620005f7565b945081518110620002e557620002e5620005e1565b60200101906001600160f81b031916908160001a905350806200030881620005f7565b91505062000295565b5060005b84518110156200039157848181518110620003345762000334620005e1565b01602001516001600160f81b03191683836200035081620005f7565b945081518110620003655762000365620005e1565b60200101906001600160f81b031916908160001a905350806200038881620005f7565b91505062000315565b5090979650505050505050565b828054620003ac9062000615565b90600052602060002090601f016020900481019282620003d057600085556200041b565b82601f10620003eb57805160ff19168380011785556200041b565b828001600101855582156200041b579182015b828111156200041b578251825591602001919060010190620003fe565b50620004299291506200042d565b5090565b5b808211156200042957600081556001016200042e565b80516001600160a01b03811681146200045c57600080fd5b919050565b600080604083850312156200047557600080fd5b620004808362000444565b9150620004906020840162000444565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004c357600080fd5b82516001600160401b0380821115620004db57600080fd5b818501915085601f830112620004f057600080fd5b81518181111562000505576200050562000499565b604051601f8201601f19908116603f0116810190838211818310171562000530576200053062000499565b8160405282815288868487010111156200054957600080fd5b600093505b828410156200056d57848401860151818501870152928501926200054e565b828411156200057f5760008684830101525b98975050505050505050565b600080604083850312156200059f57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005dc57620005dc620005b0565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200060e576200060e620005b0565b5060010190565b600181811c908216806200062a57607f821691505b602082108114156200064c57634e487b7160e01b600052602260045260246000fd5b50919050565b61183180620006626000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b604051610146919061144d565b60405180910390f35b61016261015d3660046114be565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b6101626101923660046114e8565b6103b7565b6101766101a5366004611524565b610466565b6101766105bf565b6101c56101c036600461153f565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f3660046114be565b6107a8565b610176610222366004611524565b6107e4565b610176610235366004611524565b6001600160a01b031660009081526020819052604090205490565b61017661025e366004611524565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b6101626102973660046114be565b610936565b6101626102aa3660046114be565b6109cf565b6101c56102bd36600461153f565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611558565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d9061158b565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061158b565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610d89565b5060015b92915050565b60006103c4848484610eae565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610d89565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906115c6565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610f8390919063ffffffff16565b90610f96565b9190610fa2565b9050818111156105b2576105a78183610fdc565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b191906115ea565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610f83565b6001600160a01b0385166000908152600860205260409020556107298486610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611603565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df90869061163b565b610d89565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610fdc565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610f83565b6001600160a01b0385166000908152600860205260409020556108a98484610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611603565b5050505050565b60606004805461031d9061158b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610d89565b5060019392505050565b60006103ad338484610eae565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611603565b50610a6a828461112e565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906115c6565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4891906115c6565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef868484601261120d565b6001600160a01b038616600090815260076020526040902054909150610c159082610f83565b6001600160a01b038616600090815260076020526040902055505050505050565b8051825160609184918491600091610c4e919061163b565b67ffffffffffffffff811115610c6657610c66611653565b6040519080825280601f01601f191660200182016040528015610c90576020820181803683370190505b509050806000805b8551811015610d0857858181518110610cb357610cb3611669565b01602001516001600160f81b0319168383610ccd8161167f565b945081518110610cdf57610cdf611669565b60200101906001600160f81b031916908160001a90535080610d008161167f565b915050610c98565b5060005b8451811015610d7c57848181518110610d2757610d27611669565b01602001516001600160f81b0319168383610d418161167f565b945081518110610d5357610d53611669565b60200101906001600160f81b031916908160001a90535080610d748161167f565b915050610d0c565b5090979650505050505050565b6001600160a01b038316610deb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610e4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610ed2848484611273565b8115610f7d576001600160a01b03841660009081526007602052604081205490506000610f42836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610f9690919063ffffffff16565b9050610f4e8282610fdc565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610f83565b50505050565b6000610f8f828461163b565b9392505050565b6000610f8f828461169a565b60008183610fc35760405162461bcd60e51b8152600401610445919061144d565b50828481610fd357610fd36116b9565b04949350505050565b6000610f8f82846116cf565b6001600160a01b0382166110485760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b038216600090815260208190526040902054818110156110bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b03831660009081526020819052604081208383039055600280548492906110eb9084906116cf565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ea1565b6001600160a01b0382166111845760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b8060026000828254611196919061163b565b90915550506001600160a01b038216600090815260208190526040812080548392906111c390849061163b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806112248461121e8888610f96565b90611441565b9050600061123384600a6117ca565b905060006112458661121e848a610f96565b905060006112538383610fdc565b905060006112658261121e8787610f96565b9a9950505050505050505050565b6001600160a01b0383166112d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166113395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b038316600090815260208190526040902054818110156113b15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113e890849061163b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161143491815260200190565b60405180910390a3610f7d565b6000610f8f82846117d9565b600060208083528351808285015260005b8181101561147a5785810183015185820160400152820161145e565b8181111561148c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146114b957600080fd5b919050565b600080604083850312156114d157600080fd5b6114da836114a2565b946020939093013593505050565b6000806000606084860312156114fd57600080fd5b611506846114a2565b9250611514602085016114a2565b9150604084013590509250925092565b60006020828403121561153657600080fd5b610f8f826114a2565b60006020828403121561155157600080fd5b5035919050565b6000806040838503121561156b57600080fd5b611574836114a2565b9150611582602084016114a2565b90509250929050565b600181811c9082168061159f57607f821691505b602082108114156115c057634e487b7160e01b600052602260045260246000fd5b50919050565b600080604083850312156115d957600080fd5b505080516020909101519092909150565b6000602082840312156115fc57600080fd5b5051919050565b60006020828403121561161557600080fd5b81518015158114610f8f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561164e5761164e611625565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561169357611693611625565b5060010190565b60008160001904831182151516156116b4576116b4611625565b500290565b634e487b7160e01b600052601260045260246000fd5b6000828210156116e1576116e1611625565b500390565b600181815b8085111561172157816000190482111561170757611707611625565b8085161561171457918102915b93841c93908002906116eb565b509250929050565b600082611738575060016103b1565b81611745575060006103b1565b816001811461175b576002811461176557611781565b60019150506103b1565b60ff84111561177657611776611625565b50506001821b6103b1565b5060208310610133831016604e8410600b84101617156117a4575081810a6103b1565b6117ae83836116e6565b80600019048211156117c2576117c2611625565b029392505050565b6000610f8f60ff841683611729565b6000826117f657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b73d4d7bf08bbb87de03a90044f68daf352fc2733aa3026cb0d16719a86d2d1b64736f6c634300080b0033","deployedBytecode":"","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":6986,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":6989,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressing","offset":0,"slot":"6","type":"t_contract(Progressing)7512"},{"astId":6993,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_adjustment","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":6997,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_withdrawn","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":6927,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressingAddr","offset":0,"slot":"9","type":"t_address"},{"astId":6929,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20Addr","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(Progressing)7512":{"encoding":"inplace","label":"contract Progressing","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},439:function(e){e.exports=JSON.parse('{"address":"0x829DDe6EdD8F22Fce2270361b1BD44B2a3be29c9","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"CampaignClaimFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"address","name":"tokenAddr","type":"address"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"TokenCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MAX_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"_claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"}],"name":"addBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"addCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"getCampaign","outputs":[{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"},{"internalType":"uint8","name":"campaignId","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCampaigns","outputs":[{"internalType":"address[]","name":"campaigns","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLuminaFund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"address","name":"referrer","type":"address"}],"name":"referral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"startCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"stopCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0xc4652db4171ac84bac9002fbf136d7ea09f19e446e3b92607daaf920fb63add8","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x829DDe6EdD8F22Fce2270361b1BD44B2a3be29c9","transactionIndex":0,"gasUsed":"2330992","logsBloom":"0xblockHash":"0xd266afa70b6375971ba25e86a654eafdd471bf2f9aa8450c393b469fff6c34ad","transactionHash":"0xc4652db4171ac84bac9002fbf136d7ea09f19e446e3b92607daaf920fb63add8","logs":[{"transactionIndex":0,"blockNumber":24634522,"transactionHash":"0xc4652db4171ac84bac9002fbf136d7ea09f19e446e3b92607daaf920fb63add8","address":"0x829DDe6EdD8F22Fce2270361b1BD44B2a3be29c9","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":0,"blockHash":"0xd266afa70b6375971ba25e86a654eafdd471bf2f9aa8450c393b469fff6c34ad"},{"transactionIndex":0,"blockNumber":24634522,"transactionHash":"0xc4652db4171ac84bac9002fbf136d7ea09f19e446e3b92607daaf920fb63add8","address":"0x829DDe6EdD8F22Fce2270361b1BD44B2a3be29c9","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":1,"blockHash":"0xd266afa70b6375971ba25e86a654eafdd471bf2f9aa8450c393b469fff6c34ad"},{"transactionIndex":0,"blockNumber":24634522,"transactionHash":"0xc4652db4171ac84bac9002fbf136d7ea09f19e446e3b92607daaf920fb63add8","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000f870bf06eab4800000000000000000000000000000000000000000000000000494080f2e957f7c0000000000000000000000000000000000000000000006477b7382a9334745be000000000000000000000000000000000000000000000000039b975027aacafc0000000000000000000000000000000000000000000006477c6bf3683a31fa3e","logIndex":2,"blockHash":"0xd266afa70b6375971ba25e86a654eafdd471bf2f9aa8450c393b469fff6c34ad"}],"blockNumber":24634522,"cumulativeGasUsed":"2330992","status":1,"byzantium":true},"args":["0x384338c8f3F7beA28Befecf51d22565a57cE421C"],"solcInputHash":"fb73d24372fac2edc25204e035cd29df","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"CampaignClaimFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"TokenCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MAX_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"_claim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"addBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCampaign\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"campaignId\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getCampaigns\\",\\"outputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"campaigns\\",\\"type\\":\\"address[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"isLuminaFund\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"referrer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"referral\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"startCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"stopCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaMarketing.sol\\":\\"LuminaMarketing\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaCampaign.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaCampaign {\\\\n\\\\n    function _hasReferral(address user) external view returns (bool); // onlyMarketing\\\\n    function _referral(address referrer, address sender, uint256 tokenBudget, uint256 ethBudget) external returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc, uint256 tokenBudget, uint256 ethBudget) external returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52b2c386db7350d7c31a107d6b04ea93d89e5844d156a0cd576eb182022e6cfa\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaCampaign.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\n\\\\ncontract LuminaMarketing is ILuminaMarketing, ILuminaFund, Parameters, Ownable, Pausable, OnlyTrustee {\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n\\\\n    struct CampaignRecord {\\\\n        uint256 tokenBudget;\\\\n        uint256 ethBudget;\\\\n        uint8 campaignId;\\\\n        bool valid;\\\\n        bool active;\\\\n    }\\\\n\\\\n    // Unallocated Budgets\\\\n    uint256 private _totalTokenBudget;\\\\n    uint256 private _totalEthBudget;\\\\n\\\\n    // Campaigns\\\\n    address[] private _campaigns;\\\\n    mapping (address => CampaignRecord) private _campaignsMap;\\\\n\\\\n    // Events\\\\n    event CampaignClaimFailed(address campaignAddr, uint64 blockNumber, string message);\\\\n    event TokenCallFailed(address campaignAddr, address tokenAddr, string message);\\\\n\\\\n    constructor(address tokenAddr_) {\\\\n        pause();\\\\n        tokenAddr = tokenAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function owner() public view virtual override(ILuminaMarketing, Ownable) returns (address) {\\\\n        return super.owner();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function isLuminaFund() public pure returns (bool) {\\\\n        return true;\\\\n    }\\\\n\\\\n    function getCampaigns() public view returns (address[] memory campaigns) {\\\\n        campaigns = _campaigns;\\\\n    }\\\\n\\\\n    // This contract can receive eth\\\\n    receive() external payable {}\\\\n\\\\n    function getCampaign(address campaignAddr) public view returns (uint256 tokenBudget, uint256 ethBudget, uint8 campaignId, bool valid, bool active) {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        tokenBudget = cr.tokenBudget;\\\\n        ethBudget = cr.ethBudget;\\\\n        campaignId = cr.campaignId;\\\\n        valid = cr.valid;\\\\n        active = cr.active;\\\\n    }\\\\n\\\\n    function addCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(!cr.valid, \\\\\\"The campaign with this contract address already exists\\\\\\");\\\\n        require(_campaigns.length < 256, \\\\\\"No more campaigns are allowed\\\\\\");\\\\n        cr.valid = true;\\\\n        cr.campaignId = uint8(_campaigns.length);\\\\n        _campaigns.push(campaignAddr);\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n    }\\\\n\\\\n    function removeCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        removeBudget(campaignAddr);\\\\n        address movingAddr = _campaigns[_campaigns.length-1];\\\\n        require(_campaignsMap[movingAddr].valid, \\\\\\"Incosistent campaign data\\\\\\");\\\\n        _campaignsMap[movingAddr].campaignId = cr.campaignId;\\\\n        _campaigns[cr.campaignId] = movingAddr;\\\\n        _campaigns.pop();\\\\n        cr.valid = false;\\\\n        delete _campaignsMap[campaignAddr];\\\\n    }\\\\n\\\\n    function addBudget(address campaignAddr, uint256 tokenBudget, uint256 ethBudget) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(token.balanceOf(address(this)) >= _totalTokenBudget + tokenBudget, \\\\\\"Insufficient token balance\\\\\\");\\\\n        require(address(this).balance >= _totalEthBudget + ethBudget, \\\\\\"Insufficient eth balance\\\\\\");\\\\n        _totalTokenBudget += tokenBudget;\\\\n        _totalEthBudget += ethBudget;\\\\n        cr.tokenBudget += tokenBudget;\\\\n        cr.ethBudget += ethBudget;\\\\n    }\\\\n\\\\n    function removeBudget(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(_totalTokenBudget >= cr.tokenBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        require(_totalEthBudget >= cr.ethBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        _totalTokenBudget -= cr.tokenBudget;\\\\n        _totalEthBudget -= cr.ethBudget;\\\\n        cr.tokenBudget = 0;\\\\n        cr.ethBudget = 0;\\\\n    }\\\\n\\\\n    function startCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = true;\\\\n    }\\\\n\\\\n    function stopCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = false;\\\\n    }\\\\n\\\\n    function hasReferral(address campaignAddr) external view returns (bool) {\\\\n        require(!paused(), \\\\\\"The marketing contract is paused\\\\\\");\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(cr.active, \\\\\\"The campaign is not active\\\\\\");\\\\n        ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n        return luminaCampaign._hasReferral(msg.sender);\\\\n    }\\\\n\\\\n    function referral(address campaignAddr, address referrer) external {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        if(cr.active) {\\\\n            ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n            (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) = luminaCampaign._referral(referrer, msg.sender, cr.tokenBudget, cr.ethBudget);\\\\n            _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n        }\\\\n    }\\\\n\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external onlyTrustee {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        for(uint32 i = 0; i < _campaigns.length; i++) {\\\\n            address campaignAddr = _campaigns[i];\\\\n            CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n            require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n            require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n            if(cr.active) {\\\\n                ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n                try luminaCampaign._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc, cr.tokenBudget, cr.ethBudget)\\\\n                returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n                    _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n                } catch Error(string memory message) {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, message);\\\\n                } catch {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _payCommisions(address campaignAddr, CampaignRecord storage cr, address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) private {\\\\n        for(uint j = 0; j < recipients.length; j++) {\\\\n            address payable recipient = recipients[j];\\\\n            if(recipient != address(0)) {\\\\n                if(j < tokenCommisions.length) {\\\\n                    uint256 tokenCommision = tokenCommisions[j];\\\\n                    if(tokenCommision > 0 && cr.tokenBudget >= tokenCommision) {\\\\n                        try token.transfer(recipient, tokenCommision) {\\\\n                            cr.tokenBudget -= tokenCommision;\\\\n                            _totalTokenBudget -= tokenCommision;\\\\n                        } catch Error(string memory message) {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, message);\\\\n                        } catch {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, \\\\\\"\\\\\\");\\\\n                        }\\\\n                    }\\\\n                }\\\\n                if(j < ethCommisions.length) {\\\\n                    uint256 ethCommision = ethCommisions[j];\\\\n                    if(ethCommision > 0 && cr.ethBudget >= ethCommision && address(this).balance >= ethCommision) {\\\\n                        recipient.transfer(ethCommision);\\\\n                        cr.ethBudget -= ethCommision;\\\\n                        _totalEthBudget -= ethCommision;\\\\n                    }\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa77a95de5989765fb9c010a1a3c377d504635e06b38d89fd00ead3c31cfa7990\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI or at most 10,000 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MAX_RECIPIENT_BALANCE = 10*1000*1000*REWARD_UNIT; // 10,000 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 2 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe41080651c009b319e6c2a8d03d55fdb6063a1afdb73a2310453a00fd63638bf\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620029e1380380620029e1833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001b0b1760201c565b565b60006200017d6200023160201b62001bb01760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61275f80620002826000396000f3fe60806040526004361061026b5760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106cf578063e4663a5b146106ef578063e81ec6121461070f578063ec2165d314610724578063f2fde38b14610739578063f883fcaa146105a757600080fd5b8063b91268e8146103f0578063c28bd11c146105a7578063c28cedf314610690578063c6088d97146106a5578063df71f990146106bb57600080fd5b80639d941362116101085780639d94136214610572578063a21577671461060f578063a5c9cd8214610624578063a6b0363314610639578063ac9c4fd31461065b578063b313bd621461067b57600080fd5b8063777b0c21146105875780637fb01232146105a757806382e51bd0146105bc5780638456cb59146105dc5780638da5cb5b146105f157600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb1461046e5780635fbe4d1d146104995780636bb987fe146104b9578063715018a6146104cf578063731301cf146104e457806373d6aafa1461057257600080fd5b80633e6e387c146104055780633f4ba83a1461041a578063479e92c81461042f578063504b3662146104445780635b7f415c1461045957600080fd5b80631c505d1d1161022f5780631c505d1d146103425780631df5567914610362578063270d8e0e146103825780632713b960146103a257806330db4fa0146103c25780633a3a7c53146103f057600080fd5b806306e38632146102775780630bf43309146102a45780630d423bd4146102cb57806314270b65146102ee57806318f053da1461032057600080fd5b3661027257005b600080fd5b34801561028357600080fd5b5061028c600581565b60405161ffff90911681526020015b60405180910390f35b3480156102b057600080fd5b506102b960d081565b60405160ff909116815260200161029b565b3480156102d757600080fd5b506102e0610759565b60405190815260200161029b565b3480156102fa57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161029b565b34801561032c57600080fd5b5061034061033b366004611fa0565b610780565b005b34801561034e57600080fd5b5061034061035d366004611fc4565b61092e565b34801561036e57600080fd5b5061034061037d366004611fa0565b610aa4565b34801561038e57600080fd5b5061034061039d366004611ffd565b610bd1565b3480156103ae57600080fd5b506103406103bd366004612032565b610e24565b3480156103ce57600080fd5b506103d760c881565b60405167ffffffffffffffff909116815260200161029b565b3480156103fc57600080fd5b506102e061114a565b34801561041157600080fd5b5061028c600281565b34801561042657600080fd5b50610340611161565b34801561043b57600080fd5b506102b9600a81565b34801561045057600080fd5b506102b9606481565b34801561046557600080fd5b506102b9601281565b34801561047a57600080fd5b50600054600160a01b900460ff165b604051901515815260200161029b565b3480156104a557600080fd5b50600354610308906001600160a01b031681565b3480156104c557600080fd5b506103d761996881565b3480156104db57600080fd5b50610340611195565b3480156104f057600080fd5b506105406104ff366004611fa0565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a00161029b565b34801561057e57600080fd5b5061028c600a81565b34801561059357600080fd5b506103406105a2366004611fa0565b611214565b3480156105b357600080fd5b506102b9600281565b3480156105c857600080fd5b506103406105d7366004611fa0565b6112e7565b3480156105e857600080fd5b506103406113bf565b3480156105fd57600080fd5b506000546001600160a01b0316610308565b34801561061b57600080fd5b506102b960ff81565b34801561063057600080fd5b506102e06113f1565b34801561064557600080fd5b5061064e6113fd565b60405161029b91906120bf565b34801561066757600080fd5b50610340610676366004611fa0565b61145f565b34801561068757600080fd5b506103d7600281565b34801561069c57600080fd5b50610489600181565b3480156106b157600080fd5b5061028c6103e881565b3480156106c757600080fd5b506001610489565b3480156106db57600080fd5b506104896106ea366004611fa0565b61162d565b3480156106fb57600080fd5b5061034061070a366004611fa0565b6117ed565b34801561071b57600080fd5b506102e0611a4b565b34801561073057600080fd5b506103d7611a63565b34801561074557600080fd5b50610340610754366004611fa0565b611a70565b61076560036012612122565b61077090600a61222b565b61077d906298968061223a565b81565b6000546001600160a01b031633146107b35760405162461bcd60e51b81526004016107aa90612259565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107f45760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff1690811061081a5761081a6122c5565b6000918252602090912001546001600160a01b03161461084c5760405162461bcd60e51b81526004016107aa906122db565b8054600554101561089a5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b60448201526064016107aa565b806001015460065410156108eb5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b60448201526064016107aa565b8054600580546000906108ff908490612312565b909155505060018101546006805460009061091b908490612312565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610944575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109855760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0386169260ff169081106109ab576109ab6122c5565b6000918252602090912001546001600160a01b0316146109dd5760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff1615610a9f57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a879190810190612401565b925092509250610a9a8786858585611bbf565b505050505b505050565b6001546001600160a01b03163314610b245760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016107aa565b6002546001600160a01b031615610ba35760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016107aa565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bfb5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c3c5760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0387169260ff16908110610c6257610c626122c5565b6000918252602090912001546001600160a01b031614610c945760405162461bcd60e51b81526004016107aa906122db565b82600554610ca291906124f5565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f919061250d565b1015610d5d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016107aa565b81600654610d6b91906124f5565b471015610dba5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e6365000000000000000060448201526064016107aa565b8260056000828254610dcc91906124f5565b925050819055508160066000828254610de591906124f5565b9091555050805483908290600090610dfe9084906124f5565b9250508190555081816001016000828254610e1991906124f5565b909155505050505050565b6002546001600160a01b03163314610e9a5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016107aa565b600054600160a01b900460ff1615610eb157611143565b60005b60075463ffffffff8216101561114157600060078263ffffffff1681548110610edf57610edf6122c5565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610f315760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff16908110610f5757610f576122c5565b6000918252602090912001546001600160a01b031614610f895760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff161561112c57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561104b57506040513d6000823e601f3d908101601f191682016040526110489190810190612401565b60015b61111957611057612526565b806308c379a014156110b8575061106c612542565b8061107757506110ba565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b836040516110aa93929190612619565b60405180910390a15061112a565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a161112a565b6111268686858585611bbf565b5050505b505b5050808061113990612656565b915050610eb4565b505b5050505050565b61115660036012612122565b61077d90600a61222b565b6000546001600160a01b0316331461118b5760405162461bcd60e51b81526004016107aa90612259565b611193611e87565b565b6000546001600160a01b031633146111bf5760405162461bcd60e51b81526004016107aa90612259565b600054600160a01b900460ff161561120c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107aa565b611193611f0b565b6000546001600160a01b0316331461123e5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661127f5760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff169081106112a5576112a56122c5565b6000918252602090912001546001600160a01b0316146112d75760405162461bcd60e51b81526004016107aa906122db565b600201805462ff00001916905550565b6000546001600160a01b031633146113115760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113525760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff16908110611378576113786122c5565b6000918252602090912001546001600160a01b0316146113aa5760405162461bcd60e51b81526004016107aa906122db565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113e95760405162461bcd60e51b81526004016107aa90612259565b611193611b0b565b61077d6012600a61222b565b6060600780548060200260200160405190810160405280929190818152602001828054801561145557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611437575b5050505050905090565b6000546001600160a01b031633146114895760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff161561151a5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b60648201526084016107aa565b6007546101001161156d5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f77656400000060448201526064016107aa565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115f7576115f76122c5565b6000918252602090912001546001600160a01b0316146116295760405162461bcd60e51b81526004016107aa906122db565b5050565b60008054600160a01b900460ff16156116885760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e74726163742069732070617573656460448201526064016107aa565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116c95760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0386169260ff169081106116ef576116ef6122c5565b6000918252602090912001546001600160a01b0316146117215760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff1661177b5760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f742061637469766500000000000060448201526064016107aa565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e5919061267a565b949350505050565b6000546001600160a01b031633146118175760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166118585760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff1690811061187e5761187e6122c5565b6000918252602090912001546001600160a01b0316146118b05760405162461bcd60e51b81526004016107aa906122db565b6118b982610780565b60078054600091906118cd90600190612312565b815481106118dd576118dd6122c5565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff6101009091041661195d5760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e20646174610000000000000060448201526064016107aa565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff9384161790555460078054849391929091169081106119a8576119a86122c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119e7576119e761269c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a576012600a61222b565b61077d906103e861223a565b61077d619968600e6126b2565b6000546001600160a01b03163314611a9a5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b038116611aff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107aa565b611b0881611f3b565b50565b600054600160a01b900460ff1615611b585760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107aa565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b933390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b8351811015611141576000848281518110611bdf57611bdf6122c5565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e74578351821015611dbc576000848381518110611c2057611c206122c5565b60200260200101519050600081118015611c3b575086548111155b15611dba576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611cb1575060408051601f3d908101601f19168201909252611cae9181019061267a565b60015b611d8657611cbd612526565b806308c379a01415611d2a5750611cd2612542565b80611cdd5750611d2c565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d1c918c916001600160a01b03169085906126e2565b60405180910390a150611dba565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611dba565b5080876000016000828254611d9b9190612312565b925050819055508060056000828254611db49190612312565b90915550505b505b8251821015611e74576000838381518110611dd957611dd96122c5565b60200260200101519050600081118015611df7575080876001015410155b8015611e035750804710155b15611e72576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e3e573d6000803e3d6000fd5b5080876001016000828254611e539190612312565b925050819055508060066000828254611e6c9190612312565b90915550505b505b5080611e7f8161270e565b915050611bc2565b600054600160a01b900460ff16611ed75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107aa565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b93565b6000546001600160a01b03163314611f355760405162461bcd60e51b81526004016107aa90612259565b61119360005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611b0857600080fd5b600060208284031215611fb257600080fd5b8135611fbd81611f8b565b9392505050565b60008060408385031215611fd757600080fd5b8235611fe281611f8b565b91506020830135611ff281611f8b565b809150509250929050565b60008060006060848603121561201257600080fd5b833561201d81611f8b565b95602085013595506040909401359392505050565b600080600080600060a0868803121561204a57600080fd5b853567ffffffffffffffff8116811461206257600080fd5b9450602086013561207281611f8b565b9350604086013561208281611f8b565b9250606086013563ffffffff8116811461209b57600080fd5b9150608086013560ff811681146120b157600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156121005783516001600160a01b0316835292840192918401916001016120db565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561213c5761213c61210c565b90039392505050565b600181815b808511156121805781600019048211156121665761216661210c565b8085161561217357918102915b93841c939080029061214a565b509250929050565b60008261219757506001612225565b816121a457506000612225565b81600181146121ba57600281146121c4576121e0565b6001915050612225565b60ff8411156121d5576121d561210c565b50506001821b612225565b5060208310610133831016604e8410600b8410161715612203575081810a612225565b61220d8383612145565b80600019048211156122215761222161210c565b0290505b92915050565b6000611fbd60ff841683612188565b60008160001904831182151516156122545761225461210c565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b6000828210156123245761232461210c565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561236557612365612329565b6040525050565b600067ffffffffffffffff82111561238657612386612329565b5060051b60200190565b600082601f8301126123a157600080fd5b815160206123ae8261236c565b6040516123bb828261233f565b83815260059390931b85018201928281019150868411156123db57600080fd5b8286015b848110156123f657805183529183019183016123df565b509695505050505050565b60008060006060848603121561241657600080fd5b835167ffffffffffffffff8082111561242e57600080fd5b818601915086601f83011261244257600080fd5b8151602061244f8261236c565b60405161245c828261233f565b83815260059390931b850182019282810191508a84111561247c57600080fd5b948201945b838610156124a357855161249481611f8b565b82529482019490820190612481565b918901519197509093505050808211156124bc57600080fd5b6124c887838801612390565b935060408601519150808211156124de57600080fd5b506124eb86828701612390565b9150509250925092565b600082198211156125085761250861210c565b500190565b60006020828403121561251f57600080fd5b5051919050565b600060033d111561253f5760046000803e5060005160e01c5b90565b600060443d10156125505790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561258057505050505090565b82850191508151818111156125985750505050505090565b843d87010160208285010111156125b25750505050505090565b6125c16020828601018761233f565b509095945050505050565b6000815180845260005b818110156125f2576020818501810151868301820152016125d6565b81811115612604576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061264d908301846125cc565b95945050505050565b600063ffffffff808316818114156126705761267061210c565b6001019392505050565b60006020828403121561268c57600080fd5b81518015158114611fbd57600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126d9576126d961210c565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061264d908301846125cc565b60006000198214156127225761272261210c565b506001019056fea2646970667358221220582009729fa082a0bffd3c77a114e9d6141ff41d77b2ccf9f5d521ed3c83794f64736f6c634300080b0033","deployedBytecode":"0x60806040526004361061026b5760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106cf578063e4663a5b146106ef578063e81ec6121461070f578063ec2165d314610724578063f2fde38b14610739578063f883fcaa146105a757600080fd5b8063b91268e8146103f0578063c28bd11c146105a7578063c28cedf314610690578063c6088d97146106a5578063df71f990146106bb57600080fd5b80639d941362116101085780639d94136214610572578063a21577671461060f578063a5c9cd8214610624578063a6b0363314610639578063ac9c4fd31461065b578063b313bd621461067b57600080fd5b8063777b0c21146105875780637fb01232146105a757806382e51bd0146105bc5780638456cb59146105dc5780638da5cb5b146105f157600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb1461046e5780635fbe4d1d146104995780636bb987fe146104b9578063715018a6146104cf578063731301cf146104e457806373d6aafa1461057257600080fd5b80633e6e387c146104055780633f4ba83a1461041a578063479e92c81461042f578063504b3662146104445780635b7f415c1461045957600080fd5b80631c505d1d1161022f5780631c505d1d146103425780631df5567914610362578063270d8e0e146103825780632713b960146103a257806330db4fa0146103c25780633a3a7c53146103f057600080fd5b806306e38632146102775780630bf43309146102a45780630d423bd4146102cb57806314270b65146102ee57806318f053da1461032057600080fd5b3661027257005b600080fd5b34801561028357600080fd5b5061028c600581565b60405161ffff90911681526020015b60405180910390f35b3480156102b057600080fd5b506102b960d081565b60405160ff909116815260200161029b565b3480156102d757600080fd5b506102e0610759565b60405190815260200161029b565b3480156102fa57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161029b565b34801561032c57600080fd5b5061034061033b366004611fa0565b610780565b005b34801561034e57600080fd5b5061034061035d366004611fc4565b61092e565b34801561036e57600080fd5b5061034061037d366004611fa0565b610aa4565b34801561038e57600080fd5b5061034061039d366004611ffd565b610bd1565b3480156103ae57600080fd5b506103406103bd366004612032565b610e24565b3480156103ce57600080fd5b506103d760c881565b60405167ffffffffffffffff909116815260200161029b565b3480156103fc57600080fd5b506102e061114a565b34801561041157600080fd5b5061028c600281565b34801561042657600080fd5b50610340611161565b34801561043b57600080fd5b506102b9600a81565b34801561045057600080fd5b506102b9606481565b34801561046557600080fd5b506102b9601281565b34801561047a57600080fd5b50600054600160a01b900460ff165b604051901515815260200161029b565b3480156104a557600080fd5b50600354610308906001600160a01b031681565b3480156104c557600080fd5b506103d761996881565b3480156104db57600080fd5b50610340611195565b3480156104f057600080fd5b506105406104ff366004611fa0565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a00161029b565b34801561057e57600080fd5b5061028c600a81565b34801561059357600080fd5b506103406105a2366004611fa0565b611214565b3480156105b357600080fd5b506102b9600281565b3480156105c857600080fd5b506103406105d7366004611fa0565b6112e7565b3480156105e857600080fd5b506103406113bf565b3480156105fd57600080fd5b506000546001600160a01b0316610308565b34801561061b57600080fd5b506102b960ff81565b34801561063057600080fd5b506102e06113f1565b34801561064557600080fd5b5061064e6113fd565b60405161029b91906120bf565b34801561066757600080fd5b50610340610676366004611fa0565b61145f565b34801561068757600080fd5b506103d7600281565b34801561069c57600080fd5b50610489600181565b3480156106b157600080fd5b5061028c6103e881565b3480156106c757600080fd5b506001610489565b3480156106db57600080fd5b506104896106ea366004611fa0565b61162d565b3480156106fb57600080fd5b5061034061070a366004611fa0565b6117ed565b34801561071b57600080fd5b506102e0611a4b565b34801561073057600080fd5b506103d7611a63565b34801561074557600080fd5b50610340610754366004611fa0565b611a70565b61076560036012612122565b61077090600a61222b565b61077d906298968061223a565b81565b6000546001600160a01b031633146107b35760405162461bcd60e51b81526004016107aa90612259565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107f45760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff1690811061081a5761081a6122c5565b6000918252602090912001546001600160a01b03161461084c5760405162461bcd60e51b81526004016107aa906122db565b8054600554101561089a5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b60448201526064016107aa565b806001015460065410156108eb5760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b60448201526064016107aa565b8054600580546000906108ff908490612312565b909155505060018101546006805460009061091b908490612312565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610944575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109855760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0386169260ff169081106109ab576109ab6122c5565b6000918252602090912001546001600160a01b0316146109dd5760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff1615610a9f57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a879190810190612401565b925092509250610a9a8786858585611bbf565b505050505b505050565b6001546001600160a01b03163314610b245760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016107aa565b6002546001600160a01b031615610ba35760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016107aa565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bfb5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c3c5760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0387169260ff16908110610c6257610c626122c5565b6000918252602090912001546001600160a01b031614610c945760405162461bcd60e51b81526004016107aa906122db565b82600554610ca291906124f5565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f919061250d565b1015610d5d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016107aa565b81600654610d6b91906124f5565b471015610dba5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e6365000000000000000060448201526064016107aa565b8260056000828254610dcc91906124f5565b925050819055508160066000828254610de591906124f5565b9091555050805483908290600090610dfe9084906124f5565b9250508190555081816001016000828254610e1991906124f5565b909155505050505050565b6002546001600160a01b03163314610e9a5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016107aa565b600054600160a01b900460ff1615610eb157611143565b60005b60075463ffffffff8216101561114157600060078263ffffffff1681548110610edf57610edf6122c5565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610f315760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff16908110610f5757610f576122c5565b6000918252602090912001546001600160a01b031614610f895760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff161561112c57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561104b57506040513d6000823e601f3d908101601f191682016040526110489190810190612401565b60015b61111957611057612526565b806308c379a014156110b8575061106c612542565b8061107757506110ba565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b836040516110aa93929190612619565b60405180910390a15061112a565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a161112a565b6111268686858585611bbf565b5050505b505b5050808061113990612656565b915050610eb4565b505b5050505050565b61115660036012612122565b61077d90600a61222b565b6000546001600160a01b0316331461118b5760405162461bcd60e51b81526004016107aa90612259565b611193611e87565b565b6000546001600160a01b031633146111bf5760405162461bcd60e51b81526004016107aa90612259565b600054600160a01b900460ff161561120c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107aa565b611193611f0b565b6000546001600160a01b0316331461123e5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661127f5760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff169081106112a5576112a56122c5565b6000918252602090912001546001600160a01b0316146112d75760405162461bcd60e51b81526004016107aa906122db565b600201805462ff00001916905550565b6000546001600160a01b031633146113115760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113525760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff16908110611378576113786122c5565b6000918252602090912001546001600160a01b0316146113aa5760405162461bcd60e51b81526004016107aa906122db565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113e95760405162461bcd60e51b81526004016107aa90612259565b611193611b0b565b61077d6012600a61222b565b6060600780548060200260200160405190810160405280929190818152602001828054801561145557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611437575b5050505050905090565b6000546001600160a01b031633146114895760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff161561151a5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b60648201526084016107aa565b6007546101001161156d5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f77656400000060448201526064016107aa565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115f7576115f76122c5565b6000918252602090912001546001600160a01b0316146116295760405162461bcd60e51b81526004016107aa906122db565b5050565b60008054600160a01b900460ff16156116885760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e74726163742069732070617573656460448201526064016107aa565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116c95760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0386169260ff169081106116ef576116ef6122c5565b6000918252602090912001546001600160a01b0316146117215760405162461bcd60e51b81526004016107aa906122db565b600281015462010000900460ff1661177b5760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f742061637469766500000000000060448201526064016107aa565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e5919061267a565b949350505050565b6000546001600160a01b031633146118175760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166118585760405162461bcd60e51b81526004016107aa9061228e565b6002810154600780546001600160a01b0385169260ff1690811061187e5761187e6122c5565b6000918252602090912001546001600160a01b0316146118b05760405162461bcd60e51b81526004016107aa906122db565b6118b982610780565b60078054600091906118cd90600190612312565b815481106118dd576118dd6122c5565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff6101009091041661195d5760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e20646174610000000000000060448201526064016107aa565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff9384161790555460078054849391929091169081106119a8576119a86122c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119e7576119e761269c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a576012600a61222b565b61077d906103e861223a565b61077d619968600e6126b2565b6000546001600160a01b03163314611a9a5760405162461bcd60e51b81526004016107aa90612259565b6001600160a01b038116611aff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107aa565b611b0881611f3b565b50565b600054600160a01b900460ff1615611b585760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107aa565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b933390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b8351811015611141576000848281518110611bdf57611bdf6122c5565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e74578351821015611dbc576000848381518110611c2057611c206122c5565b60200260200101519050600081118015611c3b575086548111155b15611dba576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611cb1575060408051601f3d908101601f19168201909252611cae9181019061267a565b60015b611d8657611cbd612526565b806308c379a01415611d2a5750611cd2612542565b80611cdd5750611d2c565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d1c918c916001600160a01b03169085906126e2565b60405180910390a150611dba565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611dba565b5080876000016000828254611d9b9190612312565b925050819055508060056000828254611db49190612312565b90915550505b505b8251821015611e74576000838381518110611dd957611dd96122c5565b60200260200101519050600081118015611df7575080876001015410155b8015611e035750804710155b15611e72576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e3e573d6000803e3d6000fd5b5080876001016000828254611e539190612312565b925050819055508060066000828254611e6c9190612312565b90915550505b505b5080611e7f8161270e565b915050611bc2565b600054600160a01b900460ff16611ed75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107aa565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b93565b6000546001600160a01b03163314611f355760405162461bcd60e51b81526004016107aa90612259565b61119360005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611b0857600080fd5b600060208284031215611fb257600080fd5b8135611fbd81611f8b565b9392505050565b60008060408385031215611fd757600080fd5b8235611fe281611f8b565b91506020830135611ff281611f8b565b809150509250929050565b60008060006060848603121561201257600080fd5b833561201d81611f8b565b95602085013595506040909401359392505050565b600080600080600060a0868803121561204a57600080fd5b853567ffffffffffffffff8116811461206257600080fd5b9450602086013561207281611f8b565b9350604086013561208281611f8b565b9250606086013563ffffffff8116811461209b57600080fd5b9150608086013560ff811681146120b157600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156121005783516001600160a01b0316835292840192918401916001016120db565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561213c5761213c61210c565b90039392505050565b600181815b808511156121805781600019048211156121665761216661210c565b8085161561217357918102915b93841c939080029061214a565b509250929050565b60008261219757506001612225565b816121a457506000612225565b81600181146121ba57600281146121c4576121e0565b6001915050612225565b60ff8411156121d5576121d561210c565b50506001821b612225565b5060208310610133831016604e8410600b8410161715612203575081810a612225565b61220d8383612145565b80600019048211156122215761222161210c565b0290505b92915050565b6000611fbd60ff841683612188565b60008160001904831182151516156122545761225461210c565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b6000828210156123245761232461210c565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561236557612365612329565b6040525050565b600067ffffffffffffffff82111561238657612386612329565b5060051b60200190565b600082601f8301126123a157600080fd5b815160206123ae8261236c565b6040516123bb828261233f565b83815260059390931b85018201928281019150868411156123db57600080fd5b8286015b848110156123f657805183529183019183016123df565b509695505050505050565b60008060006060848603121561241657600080fd5b835167ffffffffffffffff8082111561242e57600080fd5b818601915086601f83011261244257600080fd5b8151602061244f8261236c565b60405161245c828261233f565b83815260059390931b850182019282810191508a84111561247c57600080fd5b948201945b838610156124a357855161249481611f8b565b82529482019490820190612481565b918901519197509093505050808211156124bc57600080fd5b6124c887838801612390565b935060408601519150808211156124de57600080fd5b506124eb86828701612390565b9150509250925092565b600082198211156125085761250861210c565b500190565b60006020828403121561251f57600080fd5b5051919050565b600060033d111561253f5760046000803e5060005160e01c5b90565b600060443d10156125505790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561258057505050505090565b82850191508151818111156125985750505050505090565b843d87010160208285010111156125b25750505050505090565b6125c16020828601018761233f565b509095945050505050565b6000815180845260005b818110156125f2576020818501810151868301820152016125d6565b81811115612604576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061264d908301846125cc565b95945050505050565b600063ffffffff808316818114156126705761267061210c565b6001019392505050565b60006020828403121561268c57600080fd5b81518015158114611fbd57600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126d9576126d961210c565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061264d908301846125cc565b60006000198214156127225761272261210c565b506001019056fea2646970667358221220582009729fa082a0bffd3c77a114e9d6141ff41d77b2ccf9f5d521ed3c83794f64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":6762,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_creatorAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6764,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_trusteeAddr","offset":0,"slot":"2","type":"t_address"},{"astId":3783,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenAddr","offset":0,"slot":"3","type":"t_address"},{"astId":3786,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"token","offset":0,"slot":"4","type":"t_contract(IERC20)820"},{"astId":3799,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalTokenBudget","offset":0,"slot":"5","type":"t_uint256"},{"astId":3801,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalEthBudget","offset":0,"slot":"6","type":"t_uint256"},{"astId":3804,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaigns","offset":0,"slot":"7","type":"t_array(t_address)dyn_storage"},{"astId":3809,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaignsMap","offset":0,"slot":"8","type":"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaMarketing.CampaignRecord)","numberOfBytes":"32","value":"t_struct(CampaignRecord)3797_storage"},"t_struct(CampaignRecord)3797_storage":{"encoding":"inplace","label":"struct LuminaMarketing.CampaignRecord","members":[{"astId":3788,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenBudget","offset":0,"slot":"0","type":"t_uint256"},{"astId":3790,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"ethBudget","offset":0,"slot":"1","type":"t_uint256"},{"astId":3792,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"campaignId","offset":0,"slot":"2","type":"t_uint8"},{"astId":3794,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"valid","offset":1,"slot":"2","type":"t_bool"},{"astId":3796,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"active","offset":2,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},440:function(e){e.exports=JSON.parse('{"address":"0x45F3a7b1C9269F93D390e6Af9d7D0CF754240A66","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"CampaignClaimFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"address","name":"tokenAddr","type":"address"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"TokenCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC_INTERVAL","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_DAY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REGISTERED_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"_claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"}],"name":"addBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"addCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"getCampaign","outputs":[{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"},{"internalType":"uint8","name":"campaignId","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCampaigns","outputs":[{"internalType":"address[]","name":"campaigns","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLuminaFund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"address","name":"referrer","type":"address"}],"name":"referral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"startCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"stopCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x28e154ed832cee9ca553881d405c23279555c101462dfd2f2a52e3be6ab432a4","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x45F3a7b1C9269F93D390e6Af9d7D0CF754240A66","transactionIndex":0,"gasUsed":"2328196","logsBloom":"0xblockHash":"0x7123fe41dd313c6c470593513240078f8fe15069086745c09704d5a7d2b844c4","transactionHash":"0x28e154ed832cee9ca553881d405c23279555c101462dfd2f2a52e3be6ab432a4","logs":[{"transactionIndex":0,"blockNumber":238,"transactionHash":"0x28e154ed832cee9ca553881d405c23279555c101462dfd2f2a52e3be6ab432a4","address":"0x45F3a7b1C9269F93D390e6Af9d7D0CF754240A66","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":0,"blockHash":"0x7123fe41dd313c6c470593513240078f8fe15069086745c09704d5a7d2b844c4"},{"transactionIndex":0,"blockNumber":238,"transactionHash":"0x28e154ed832cee9ca553881d405c23279555c101462dfd2f2a52e3be6ab432a4","address":"0x45F3a7b1C9269F93D390e6Af9d7D0CF754240A66","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":1,"blockHash":"0x7123fe41dd313c6c470593513240078f8fe15069086745c09704d5a7d2b844c4"}],"blockNumber":238,"cumulativeGasUsed":"2328196","status":1,"byzantium":true},"args":["0x5a60Ca2bf2217869e83D3CE99adDcd7C3c8c8588"],"solcInputHash":"4d0372737792883279aec38c33484e5e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"CampaignClaimFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"TokenCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_DAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_REGISTERED_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"_claim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"addBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCampaign\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"campaignId\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getCampaigns\\",\\"outputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"campaigns\\",\\"type\\":\\"address[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"isLuminaFund\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"referrer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"referral\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"startCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"stopCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaMarketing.sol\\":\\"LuminaMarketing\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaCampaign.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaCampaign {\\\\n\\\\n    function _hasReferral(address user) external view returns (bool); // onlyMarketing\\\\n    function _referral(address referrer, address sender, uint256 tokenBudget, uint256 ethBudget) external returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc, uint256 tokenBudget, uint256 ethBudget) external returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52b2c386db7350d7c31a107d6b04ea93d89e5844d156a0cd576eb182022e6cfa\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaFund.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaFund {\\\\n\\\\n    function isLuminaFund() external pure returns (bool);\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x87af6414e1334f170d7f19a2b108bf24e2f88faca65a15a4caa61f6b8ee44f0d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaFund.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaCampaign.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\n\\\\ncontract LuminaMarketing is ILuminaMarketing, ILuminaFund, Parameters, Ownable, Pausable, OnlyTrustee {\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n\\\\n    struct CampaignRecord {\\\\n        uint256 tokenBudget;\\\\n        uint256 ethBudget;\\\\n        uint8 campaignId;\\\\n        bool valid;\\\\n        bool active;\\\\n    }\\\\n\\\\n    // Unallocated Budgets\\\\n    uint256 private _totalTokenBudget;\\\\n    uint256 private _totalEthBudget;\\\\n\\\\n    // Campaigns\\\\n    address[] private _campaigns;\\\\n    mapping (address => CampaignRecord) private _campaignsMap;\\\\n\\\\n    // Events\\\\n    event CampaignClaimFailed(address campaignAddr, uint64 blockNumber, string message);\\\\n    event TokenCallFailed(address campaignAddr, address tokenAddr, string message);\\\\n\\\\n    constructor(address tokenAddr_) {\\\\n        pause();\\\\n        tokenAddr = tokenAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function owner() public view virtual override(ILuminaMarketing, Ownable) returns (address) {\\\\n        return super.owner();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function isLuminaFund() public pure returns (bool) {\\\\n        return true;\\\\n    }\\\\n\\\\n    function getCampaigns() public view returns (address[] memory campaigns) {\\\\n        campaigns = _campaigns;\\\\n    }\\\\n\\\\n    // This contract can receive eth\\\\n    receive() external payable {}\\\\n\\\\n    function getCampaign(address campaignAddr) public view returns (uint256 tokenBudget, uint256 ethBudget, uint8 campaignId, bool valid, bool active) {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        tokenBudget = cr.tokenBudget;\\\\n        ethBudget = cr.ethBudget;\\\\n        campaignId = cr.campaignId;\\\\n        valid = cr.valid;\\\\n        active = cr.active;\\\\n    }\\\\n\\\\n    function addCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(!cr.valid, \\\\\\"The campaign with this contract address already exists\\\\\\");\\\\n        require(_campaigns.length < 256, \\\\\\"No more campaigns are allowed\\\\\\");\\\\n        cr.valid = true;\\\\n        cr.campaignId = uint8(_campaigns.length);\\\\n        _campaigns.push(campaignAddr);\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n    }\\\\n\\\\n    function removeCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        removeBudget(campaignAddr);\\\\n        address movingAddr = _campaigns[_campaigns.length-1];\\\\n        require(_campaignsMap[movingAddr].valid, \\\\\\"Incosistent campaign data\\\\\\");\\\\n        _campaignsMap[movingAddr].campaignId = cr.campaignId;\\\\n        _campaigns[cr.campaignId] = movingAddr;\\\\n        _campaigns.pop();\\\\n        cr.valid = false;\\\\n        delete _campaignsMap[campaignAddr];\\\\n    }\\\\n\\\\n    function addBudget(address campaignAddr, uint256 tokenBudget, uint256 ethBudget) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(token.balanceOf(address(this)) >= _totalTokenBudget + tokenBudget, \\\\\\"Insufficient token balance\\\\\\");\\\\n        require(address(this).balance >= _totalEthBudget + ethBudget, \\\\\\"Insufficient eth balance\\\\\\");\\\\n        _totalTokenBudget += tokenBudget;\\\\n        _totalEthBudget += ethBudget;\\\\n        cr.tokenBudget += tokenBudget;\\\\n        cr.ethBudget += ethBudget;\\\\n    }\\\\n\\\\n    function removeBudget(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(_totalTokenBudget >= cr.tokenBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        require(_totalEthBudget >= cr.ethBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        _totalTokenBudget -= cr.tokenBudget;\\\\n        _totalEthBudget -= cr.ethBudget;\\\\n        cr.tokenBudget = 0;\\\\n        cr.ethBudget = 0;\\\\n    }\\\\n\\\\n    function startCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = true;\\\\n    }\\\\n\\\\n    function stopCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = false;\\\\n    }\\\\n\\\\n    function hasReferral(address campaignAddr) external view returns (bool) {\\\\n        require(!paused(), \\\\\\"The marketing contract is paused\\\\\\");\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(cr.active, \\\\\\"The campaign is not active\\\\\\");\\\\n        ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n        return luminaCampaign._hasReferral(msg.sender);\\\\n    }\\\\n\\\\n    function referral(address campaignAddr, address referrer) external {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        if(cr.active) {\\\\n            ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n            (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) = luminaCampaign._referral(referrer, msg.sender, cr.tokenBudget, cr.ethBudget);\\\\n            _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n        }\\\\n    }\\\\n\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external onlyTrustee {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        for(uint32 i = 0; i < _campaigns.length; i++) {\\\\n            address campaignAddr = _campaigns[i];\\\\n            CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n            require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n            require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n            if(cr.active) {\\\\n                ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n                try luminaCampaign._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc, cr.tokenBudget, cr.ethBudget)\\\\n                returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n                    _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n                } catch Error(string memory message) {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, message);\\\\n                } catch {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _payCommisions(address campaignAddr, CampaignRecord storage cr, address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) private {\\\\n        for(uint j = 0; j < recipients.length; j++) {\\\\n            address payable recipient = recipients[j];\\\\n            if(recipient != address(0)) {\\\\n                if(j < tokenCommisions.length) {\\\\n                    uint256 tokenCommision = tokenCommisions[j];\\\\n                    if(tokenCommision > 0 && cr.tokenBudget >= tokenCommision) {\\\\n                        try token.transfer(recipient, tokenCommision) {\\\\n                            cr.tokenBudget -= tokenCommision;\\\\n                            _totalTokenBudget -= tokenCommision;\\\\n                        } catch Error(string memory message) {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, message);\\\\n                        } catch {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, \\\\\\"\\\\\\");\\\\n                        }\\\\n                    }\\\\n                }\\\\n                if(j < ethCommisions.length) {\\\\n                    uint256 ethCommision = ethCommisions[j];\\\\n                    if(ethCommision > 0 && cr.ethBudget >= ethCommision && address(this).balance >= ethCommision) {\\\\n                        recipient.transfer(ethCommision);\\\\n                        cr.ethBudget -= ethCommision;\\\\n                        _totalEthBudget -= ethCommision;\\\\n                    }\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa77a95de5989765fb9c010a1a3c377d504635e06b38d89fd00ead3c31cfa7990\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_DAY = 39272; // 3600*24 / 2.2\\\\n\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.01 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = 10 * REWARD_UNIT; // 0.01 LUMI\\\\n\\\\n    uint256 public constant MAX_REGISTERED_BALANCE = 1000 * TOKEN_UNIT;\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC_INTERVAL = 1 * 7 * BLOCKS_PER_DAY;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x19515758397fdbbdde67a6f4c5f2d02f89aa369109752c5dcfec52d1adb626ac\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620029d4380380620029d4833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001afe1760201c565b565b60006200017d6200023160201b62001ba31760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61275280620002826000396000f3fe6080604052600436106102605760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106c4578063e4663a5b146106e4578063e81ec61214610704578063ec2165d314610719578063f2fde38b1461072e578063f883fcaa1461058757600080fd5b8063b91268e814610670578063c28bd11c14610587578063c28cedf314610685578063c6088d971461069a578063df71f990146106b057600080fd5b80639d941362116101085780639d94136214610552578063a2157767146105ef578063a5c9cd8214610604578063a6b0363314610619578063ac9c4fd31461063b578063b313bd621461065b57600080fd5b8063777b0c21146105675780637fb012321461058757806382e51bd01461059c5780638456cb59146105bc5780638da5cb5b146105d157600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb1461044e5780635fbe4d1d146104795780636bb987fe14610499578063715018a6146104af578063731301cf146104c457806373d6aafa1461055257600080fd5b80633e6e387c146103e55780633f4ba83a146103fa578063479e92c81461040f578063504b3662146104245780635b7f415c1461043957600080fd5b80631df55679116102245780631df5567914610334578063270d8e0e146103545780632713b9601461037457806330db4fa0146103945780633a3a7c53146103c257600080fd5b806306e386321461026c5780630bf433091461029957806314270b65146102c057806318f053da146102f25780631c505d1d1461031457600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610281600581565b60405161ffff90911681526020015b60405180910390f35b3480156102a557600080fd5b506102ae60d081565b60405160ff9091168152602001610290565b3480156102cc57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610290565b3480156102fe57600080fd5b5061031261030d366004611f93565b61074e565b005b34801561032057600080fd5b5061031261032f366004611fb7565b6108fc565b34801561034057600080fd5b5061031261034f366004611f93565b610a72565b34801561036057600080fd5b5061031261036f366004611ff0565b610b9f565b34801561038057600080fd5b5061031261038f366004612025565b610df2565b3480156103a057600080fd5b506103a960c881565b60405167ffffffffffffffff9091168152602001610290565b3480156103ce57600080fd5b506103d7611118565b604051908152602001610290565b3480156103f157600080fd5b50610281600281565b34801561040657600080fd5b50610312611132565b34801561041b57600080fd5b506102ae600a81565b34801561043057600080fd5b506102ae606481565b34801561044557600080fd5b506102ae601281565b34801561045a57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610290565b34801561048557600080fd5b506003546102da906001600160a01b031681565b3480156104a557600080fd5b506103a961996881565b3480156104bb57600080fd5b50610312611166565b3480156104d057600080fd5b506105206104df366004611f93565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a001610290565b34801561055e57600080fd5b50610281600a81565b34801561057357600080fd5b50610312610582366004611f93565b6111e5565b34801561059357600080fd5b506102ae600281565b3480156105a857600080fd5b506103126105b7366004611f93565b6112b8565b3480156105c857600080fd5b50610312611390565b3480156105dd57600080fd5b506000546001600160a01b03166102da565b3480156105fb57600080fd5b506102ae60ff81565b34801561061057600080fd5b506103d76113c2565b34801561062557600080fd5b5061062e6113ce565b60405161029091906120b2565b34801561064757600080fd5b50610312610656366004611f93565b611430565b34801561066757600080fd5b506103a9600281565b34801561067c57600080fd5b506103d76115fe565b34801561069157600080fd5b50610469600181565b3480156106a657600080fd5b506102816103e881565b3480156106bc57600080fd5b506001610469565b3480156106d057600080fd5b506104696106df366004611f93565b611620565b3480156106f057600080fd5b506103126106ff366004611f93565b6117e0565b34801561071057600080fd5b506103d7611a3e565b34801561072557600080fd5b506103a9611a56565b34801561073a57600080fd5b50610312610749366004611f93565b611a63565b6000546001600160a01b031633146107815760405162461bcd60e51b8152600401610778906120ff565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107c25760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106107e8576107e861216b565b6000918252602090912001546001600160a01b03161461081a5760405162461bcd60e51b815260040161077890612181565b805460055410156108685760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b806001015460065410156108b95760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b8054600580546000906108cd9084906121ce565b90915550506001810154600680546000906108e99084906121ce565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610912575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109535760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106109795761097961216b565b6000918252602090912001546001600160a01b0316146109ab5760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1615610a6d57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5591908101906122bd565b925092509250610a688786858585611bb2565b505050505b505050565b6001546001600160a01b03163314610af25760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610778565b6002546001600160a01b031615610b715760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610778565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bc95760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c0a5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0387169260ff16908110610c3057610c3061216b565b6000918252602090912001546001600160a01b031614610c625760405162461bcd60e51b815260040161077890612181565b82600554610c7091906123b1565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906123c9565b1015610d2b5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610778565b81600654610d3991906123b1565b471015610d885760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610778565b8260056000828254610d9a91906123b1565b925050819055508160066000828254610db391906123b1565b9091555050805483908290600090610dcc9084906123b1565b9250508190555081816001016000828254610de791906123b1565b909155505050505050565b6002546001600160a01b03163314610e685760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610778565b600054600160a01b900460ff1615610e7f57611111565b60005b60075463ffffffff8216101561110f57600060078263ffffffff1681548110610ead57610ead61216b565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610eff5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff16908110610f2557610f2561216b565b6000918252602090912001546001600160a01b031614610f575760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff16156110fa57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561101957506040513d6000823e601f3d908101601f1916820160405261101691908101906122bd565b60015b6110e7576110256123e2565b806308c379a01415611086575061103a6123fe565b806110455750611088565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b83604051611078939291906124d5565b60405180910390a1506110f8565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a16110f8565b6110f48686858585611bb2565b5050505b505b5050808061110790612512565b915050610e82565b505b5050505050565b61112460036012612536565b61112f90600a61263f565b81565b6000546001600160a01b0316331461115c5760405162461bcd60e51b8152600401610778906120ff565b611164611e7a565b565b6000546001600160a01b031633146111905760405162461bcd60e51b8152600401610778906120ff565b600054600160a01b900460ff16156111dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b611164611efe565b6000546001600160a01b0316331461120f5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112505760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106112765761127661216b565b6000918252602090912001546001600160a01b0316146112a85760405162461bcd60e51b815260040161077890612181565b600201805462ff00001916905550565b6000546001600160a01b031633146112e25760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113235760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106113495761134961216b565b6000918252602090912001546001600160a01b03161461137b5760405162461bcd60e51b815260040161077890612181565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113ba5760405162461bcd60e51b8152600401610778906120ff565b611164611afe565b61112f6012600a61263f565b6060600780548060200260200160405190810160405280929190818152602001828054801561142657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611408575b5050505050905090565b6000546001600160a01b0316331461145a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114eb5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610778565b6007546101001161153e5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610778565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115c8576115c861216b565b6000918252602090912001546001600160a01b0316146115fa5760405162461bcd60e51b815260040161077890612181565b5050565b61160a60036012612536565b61161590600a61263f565b61112f90600a61264e565b60008054600160a01b900460ff161561167b5760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610778565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116bc5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106116e2576116e261216b565b6000918252602090912001546001600160a01b0316146117145760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1661176e5760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610778565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d8919061266d565b949350505050565b6000546001600160a01b0316331461180a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661184b5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106118715761187161216b565b6000918252602090912001546001600160a01b0316146118a35760405162461bcd60e51b815260040161077890612181565b6118ac8261074e565b60078054600091906118c0906001906121ce565b815481106118d0576118d061216b565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166119505760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610778565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff93841617905554600780548493919290911690811061199b5761199b61216b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119da576119da61268f565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a4a6012600a61263f565b61112f906103e861264e565b61112f61996860076126a5565b6000546001600160a01b03163314611a8d5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b038116611af25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b611afb81611f2e565b50565b600054600160a01b900460ff1615611b4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b863390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561110f576000848281518110611bd257611bd261216b565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e67578351821015611daf576000848381518110611c1357611c1361216b565b60200260200101519050600081118015611c2e575086548111155b15611dad576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611ca4575060408051601f3d908101601f19168201909252611ca19181019061266d565b60015b611d7957611cb06123e2565b806308c379a01415611d1d5750611cc56123fe565b80611cd05750611d1f565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d0f918c916001600160a01b03169085906126d5565b60405180910390a150611dad565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611dad565b5080876000016000828254611d8e91906121ce565b925050819055508060056000828254611da791906121ce565b90915550505b505b8251821015611e67576000838381518110611dcc57611dcc61216b565b60200260200101519050600081118015611dea575080876001015410155b8015611df65750804710155b15611e65576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e31573d6000803e3d6000fd5b5080876001016000828254611e4691906121ce565b925050819055508060066000828254611e5f91906121ce565b90915550505b505b5080611e7281612701565b915050611bb5565b600054600160a01b900460ff16611eca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610778565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b86565b6000546001600160a01b03163314611f285760405162461bcd60e51b8152600401610778906120ff565b61116460005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611afb57600080fd5b600060208284031215611fa557600080fd5b8135611fb081611f7e565b9392505050565b60008060408385031215611fca57600080fd5b8235611fd581611f7e565b91506020830135611fe581611f7e565b809150509250929050565b60008060006060848603121561200557600080fd5b833561201081611f7e565b95602085013595506040909401359392505050565b600080600080600060a0868803121561203d57600080fd5b853567ffffffffffffffff8116811461205557600080fd5b9450602086013561206581611f7e565b9350604086013561207581611f7e565b9250606086013563ffffffff8116811461208e57600080fd5b9150608086013560ff811681146120a457600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120f35783516001600160a01b0316835292840192918401916001016120ce565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121e0576121e06121b8565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612221576122216121e5565b6040525050565b600067ffffffffffffffff821115612242576122426121e5565b5060051b60200190565b600082601f83011261225d57600080fd5b8151602061226a82612228565b60405161227782826121fb565b83815260059390931b850182019282810191508684111561229757600080fd5b8286015b848110156122b2578051835291830191830161229b565b509695505050505050565b6000806000606084860312156122d257600080fd5b835167ffffffffffffffff808211156122ea57600080fd5b818601915086601f8301126122fe57600080fd5b8151602061230b82612228565b60405161231882826121fb565b83815260059390931b850182019282810191508a84111561233857600080fd5b948201945b8386101561235f57855161235081611f7e565b8252948201949082019061233d565b9189015191975090935050508082111561237857600080fd5b6123848783880161224c565b9350604086015191508082111561239a57600080fd5b506123a78682870161224c565b9150509250925092565b600082198211156123c4576123c46121b8565b500190565b6000602082840312156123db57600080fd5b5051919050565b600060033d11156123fb5760046000803e5060005160e01c5b90565b600060443d101561240c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561243c57505050505090565b82850191508151818111156124545750505050505090565b843d870101602082850101111561246e5750505050505090565b61247d602082860101876121fb565b509095945050505050565b6000815180845260005b818110156124ae57602081850181015186830182015201612492565b818111156124c0576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061250990830184612488565b95945050505050565b600063ffffffff8083168181141561252c5761252c6121b8565b6001019392505050565b600060ff821660ff841680821015612550576125506121b8565b90039392505050565b600181815b8085111561259457816000190482111561257a5761257a6121b8565b8085161561258757918102915b93841c939080029061255e565b509250929050565b6000826125ab57506001612639565b816125b857506000612639565b81600181146125ce57600281146125d8576125f4565b6001915050612639565b60ff8411156125e9576125e96121b8565b50506001821b612639565b5060208310610133831016604e8410600b8410161715612617575081810a612639565b6126218383612559565b8060001904821115612635576126356121b8565b0290505b92915050565b6000611fb060ff84168361259c565b6000816000190483118215151615612668576126686121b8565b500290565b60006020828403121561267f57600080fd5b81518015158114611fb057600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126cc576126cc6121b8565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061250990830184612488565b6000600019821415612715576127156121b8565b506001019056fea26469706673582212205c98edbb1a60c16513755918de06fa0f5d2cb4e276ac68ec3d1004a7758334ff64736f6c634300080b0033","deployedBytecode":"0x6080604052600436106102605760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106c4578063e4663a5b146106e4578063e81ec61214610704578063ec2165d314610719578063f2fde38b1461072e578063f883fcaa1461058757600080fd5b8063b91268e814610670578063c28bd11c14610587578063c28cedf314610685578063c6088d971461069a578063df71f990146106b057600080fd5b80639d941362116101085780639d94136214610552578063a2157767146105ef578063a5c9cd8214610604578063a6b0363314610619578063ac9c4fd31461063b578063b313bd621461065b57600080fd5b8063777b0c21146105675780637fb012321461058757806382e51bd01461059c5780638456cb59146105bc5780638da5cb5b146105d157600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb1461044e5780635fbe4d1d146104795780636bb987fe14610499578063715018a6146104af578063731301cf146104c457806373d6aafa1461055257600080fd5b80633e6e387c146103e55780633f4ba83a146103fa578063479e92c81461040f578063504b3662146104245780635b7f415c1461043957600080fd5b80631df55679116102245780631df5567914610334578063270d8e0e146103545780632713b9601461037457806330db4fa0146103945780633a3a7c53146103c257600080fd5b806306e386321461026c5780630bf433091461029957806314270b65146102c057806318f053da146102f25780631c505d1d1461031457600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610281600581565b60405161ffff90911681526020015b60405180910390f35b3480156102a557600080fd5b506102ae60d081565b60405160ff9091168152602001610290565b3480156102cc57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610290565b3480156102fe57600080fd5b5061031261030d366004611f93565b61074e565b005b34801561032057600080fd5b5061031261032f366004611fb7565b6108fc565b34801561034057600080fd5b5061031261034f366004611f93565b610a72565b34801561036057600080fd5b5061031261036f366004611ff0565b610b9f565b34801561038057600080fd5b5061031261038f366004612025565b610df2565b3480156103a057600080fd5b506103a960c881565b60405167ffffffffffffffff9091168152602001610290565b3480156103ce57600080fd5b506103d7611118565b604051908152602001610290565b3480156103f157600080fd5b50610281600281565b34801561040657600080fd5b50610312611132565b34801561041b57600080fd5b506102ae600a81565b34801561043057600080fd5b506102ae606481565b34801561044557600080fd5b506102ae601281565b34801561045a57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610290565b34801561048557600080fd5b506003546102da906001600160a01b031681565b3480156104a557600080fd5b506103a961996881565b3480156104bb57600080fd5b50610312611166565b3480156104d057600080fd5b506105206104df366004611f93565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a001610290565b34801561055e57600080fd5b50610281600a81565b34801561057357600080fd5b50610312610582366004611f93565b6111e5565b34801561059357600080fd5b506102ae600281565b3480156105a857600080fd5b506103126105b7366004611f93565b6112b8565b3480156105c857600080fd5b50610312611390565b3480156105dd57600080fd5b506000546001600160a01b03166102da565b3480156105fb57600080fd5b506102ae60ff81565b34801561061057600080fd5b506103d76113c2565b34801561062557600080fd5b5061062e6113ce565b60405161029091906120b2565b34801561064757600080fd5b50610312610656366004611f93565b611430565b34801561066757600080fd5b506103a9600281565b34801561067c57600080fd5b506103d76115fe565b34801561069157600080fd5b50610469600181565b3480156106a657600080fd5b506102816103e881565b3480156106bc57600080fd5b506001610469565b3480156106d057600080fd5b506104696106df366004611f93565b611620565b3480156106f057600080fd5b506103126106ff366004611f93565b6117e0565b34801561071057600080fd5b506103d7611a3e565b34801561072557600080fd5b506103a9611a56565b34801561073a57600080fd5b50610312610749366004611f93565b611a63565b6000546001600160a01b031633146107815760405162461bcd60e51b8152600401610778906120ff565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107c25760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106107e8576107e861216b565b6000918252602090912001546001600160a01b03161461081a5760405162461bcd60e51b815260040161077890612181565b805460055410156108685760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b806001015460065410156108b95760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b8054600580546000906108cd9084906121ce565b90915550506001810154600680546000906108e99084906121ce565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610912575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109535760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106109795761097961216b565b6000918252602090912001546001600160a01b0316146109ab5760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1615610a6d57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5591908101906122bd565b925092509250610a688786858585611bb2565b505050505b505050565b6001546001600160a01b03163314610af25760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610778565b6002546001600160a01b031615610b715760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610778565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bc95760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c0a5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0387169260ff16908110610c3057610c3061216b565b6000918252602090912001546001600160a01b031614610c625760405162461bcd60e51b815260040161077890612181565b82600554610c7091906123b1565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906123c9565b1015610d2b5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610778565b81600654610d3991906123b1565b471015610d885760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610778565b8260056000828254610d9a91906123b1565b925050819055508160066000828254610db391906123b1565b9091555050805483908290600090610dcc9084906123b1565b9250508190555081816001016000828254610de791906123b1565b909155505050505050565b6002546001600160a01b03163314610e685760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610778565b600054600160a01b900460ff1615610e7f57611111565b60005b60075463ffffffff8216101561110f57600060078263ffffffff1681548110610ead57610ead61216b565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610eff5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff16908110610f2557610f2561216b565b6000918252602090912001546001600160a01b031614610f575760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff16156110fa57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561101957506040513d6000823e601f3d908101601f1916820160405261101691908101906122bd565b60015b6110e7576110256123e2565b806308c379a01415611086575061103a6123fe565b806110455750611088565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b83604051611078939291906124d5565b60405180910390a1506110f8565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a16110f8565b6110f48686858585611bb2565b5050505b505b5050808061110790612512565b915050610e82565b505b5050505050565b61112460036012612536565b61112f90600a61263f565b81565b6000546001600160a01b0316331461115c5760405162461bcd60e51b8152600401610778906120ff565b611164611e7a565b565b6000546001600160a01b031633146111905760405162461bcd60e51b8152600401610778906120ff565b600054600160a01b900460ff16156111dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b611164611efe565b6000546001600160a01b0316331461120f5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112505760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106112765761127661216b565b6000918252602090912001546001600160a01b0316146112a85760405162461bcd60e51b815260040161077890612181565b600201805462ff00001916905550565b6000546001600160a01b031633146112e25760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113235760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106113495761134961216b565b6000918252602090912001546001600160a01b03161461137b5760405162461bcd60e51b815260040161077890612181565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113ba5760405162461bcd60e51b8152600401610778906120ff565b611164611afe565b61112f6012600a61263f565b6060600780548060200260200160405190810160405280929190818152602001828054801561142657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611408575b5050505050905090565b6000546001600160a01b0316331461145a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114eb5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610778565b6007546101001161153e5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610778565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115c8576115c861216b565b6000918252602090912001546001600160a01b0316146115fa5760405162461bcd60e51b815260040161077890612181565b5050565b61160a60036012612536565b61161590600a61263f565b61112f90600a61264e565b60008054600160a01b900460ff161561167b5760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610778565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116bc5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106116e2576116e261216b565b6000918252602090912001546001600160a01b0316146117145760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1661176e5760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610778565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d8919061266d565b949350505050565b6000546001600160a01b0316331461180a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661184b5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106118715761187161216b565b6000918252602090912001546001600160a01b0316146118a35760405162461bcd60e51b815260040161077890612181565b6118ac8261074e565b60078054600091906118c0906001906121ce565b815481106118d0576118d061216b565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166119505760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610778565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff93841617905554600780548493919290911690811061199b5761199b61216b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119da576119da61268f565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a4a6012600a61263f565b61112f906103e861264e565b61112f61996860076126a5565b6000546001600160a01b03163314611a8d5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b038116611af25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b611afb81611f2e565b50565b600054600160a01b900460ff1615611b4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b863390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561110f576000848281518110611bd257611bd261216b565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e67578351821015611daf576000848381518110611c1357611c1361216b565b60200260200101519050600081118015611c2e575086548111155b15611dad576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611ca4575060408051601f3d908101601f19168201909252611ca19181019061266d565b60015b611d7957611cb06123e2565b806308c379a01415611d1d5750611cc56123fe565b80611cd05750611d1f565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d0f918c916001600160a01b03169085906126d5565b60405180910390a150611dad565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611dad565b5080876000016000828254611d8e91906121ce565b925050819055508060056000828254611da791906121ce565b90915550505b505b8251821015611e67576000838381518110611dcc57611dcc61216b565b60200260200101519050600081118015611dea575080876001015410155b8015611df65750804710155b15611e65576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e31573d6000803e3d6000fd5b5080876001016000828254611e4691906121ce565b925050819055508060066000828254611e5f91906121ce565b90915550505b505b5080611e7281612701565b915050611bb5565b600054600160a01b900460ff16611eca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610778565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b86565b6000546001600160a01b03163314611f285760405162461bcd60e51b8152600401610778906120ff565b61116460005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611afb57600080fd5b600060208284031215611fa557600080fd5b8135611fb081611f7e565b9392505050565b60008060408385031215611fca57600080fd5b8235611fd581611f7e565b91506020830135611fe581611f7e565b809150509250929050565b60008060006060848603121561200557600080fd5b833561201081611f7e565b95602085013595506040909401359392505050565b600080600080600060a0868803121561203d57600080fd5b853567ffffffffffffffff8116811461205557600080fd5b9450602086013561206581611f7e565b9350604086013561207581611f7e565b9250606086013563ffffffff8116811461208e57600080fd5b9150608086013560ff811681146120a457600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120f35783516001600160a01b0316835292840192918401916001016120ce565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121e0576121e06121b8565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612221576122216121e5565b6040525050565b600067ffffffffffffffff821115612242576122426121e5565b5060051b60200190565b600082601f83011261225d57600080fd5b8151602061226a82612228565b60405161227782826121fb565b83815260059390931b850182019282810191508684111561229757600080fd5b8286015b848110156122b2578051835291830191830161229b565b509695505050505050565b6000806000606084860312156122d257600080fd5b835167ffffffffffffffff808211156122ea57600080fd5b818601915086601f8301126122fe57600080fd5b8151602061230b82612228565b60405161231882826121fb565b83815260059390931b850182019282810191508a84111561233857600080fd5b948201945b8386101561235f57855161235081611f7e565b8252948201949082019061233d565b9189015191975090935050508082111561237857600080fd5b6123848783880161224c565b9350604086015191508082111561239a57600080fd5b506123a78682870161224c565b9150509250925092565b600082198211156123c4576123c46121b8565b500190565b6000602082840312156123db57600080fd5b5051919050565b600060033d11156123fb5760046000803e5060005160e01c5b90565b600060443d101561240c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561243c57505050505090565b82850191508151818111156124545750505050505090565b843d870101602082850101111561246e5750505050505090565b61247d602082860101876121fb565b509095945050505050565b6000815180845260005b818110156124ae57602081850181015186830182015201612492565b818111156124c0576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061250990830184612488565b95945050505050565b600063ffffffff8083168181141561252c5761252c6121b8565b6001019392505050565b600060ff821660ff841680821015612550576125506121b8565b90039392505050565b600181815b8085111561259457816000190482111561257a5761257a6121b8565b8085161561258757918102915b93841c939080029061255e565b509250929050565b6000826125ab57506001612639565b816125b857506000612639565b81600181146125ce57600281146125d8576125f4565b6001915050612639565b60ff8411156125e9576125e96121b8565b50506001821b612639565b5060208310610133831016604e8410600b8410161715612617575081810a612639565b6126218383612559565b8060001904821115612635576126356121b8565b0290505b92915050565b6000611fb060ff84168361259c565b6000816000190483118215151615612668576126686121b8565b500290565b60006020828403121561267f57600080fd5b81518015158114611fb057600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126cc576126cc6121b8565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061250990830184612488565b6000600019821415612715576127156121b8565b506001019056fea26469706673582212205c98edbb1a60c16513755918de06fa0f5d2cb4e276ac68ec3d1004a7758334ff64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":6749,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_creatorAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6751,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_trusteeAddr","offset":0,"slot":"2","type":"t_address"},{"astId":3783,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenAddr","offset":0,"slot":"3","type":"t_address"},{"astId":3786,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"token","offset":0,"slot":"4","type":"t_contract(IERC20)820"},{"astId":3799,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalTokenBudget","offset":0,"slot":"5","type":"t_uint256"},{"astId":3801,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalEthBudget","offset":0,"slot":"6","type":"t_uint256"},{"astId":3804,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaigns","offset":0,"slot":"7","type":"t_array(t_address)dyn_storage"},{"astId":3809,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaignsMap","offset":0,"slot":"8","type":"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_struct(CampaignRecord)3797_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaMarketing.CampaignRecord)","numberOfBytes":"32","value":"t_struct(CampaignRecord)3797_storage"},"t_struct(CampaignRecord)3797_storage":{"encoding":"inplace","label":"struct LuminaMarketing.CampaignRecord","members":[{"astId":3788,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenBudget","offset":0,"slot":"0","type":"t_uint256"},{"astId":3790,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"ethBudget","offset":0,"slot":"1","type":"t_uint256"},{"astId":3792,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"campaignId","offset":0,"slot":"2","type":"t_uint8"},{"astId":3794,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"valid","offset":1,"slot":"2","type":"t_bool"},{"astId":3796,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"active","offset":2,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},453:function(e,n,t){e.exports={cat:"Category_cat__2ALJo",err:"Category_err__1S7hS"}},461:function(e,n,t){e.exports=t(858)},466:function(e,n,t){},468:function(e,n){},475:function(e,n){},515:function(e,n){},517:function(e,n){},539:function(e,n){},541:function(e,n){},553:function(e,n){},569:function(e,n){},572:function(e,n){},574:function(e,n){},704:function(e,n){},715:function(e,n){},736:function(e,n){},742:function(e,n){},747:function(e,n){},814:function(e,n){},816:function(e,n){},823:function(e,n){},824:function(e,n){},857:function(e,n,t){},858:function(e,n,t){"use strict";t.r(n);var a=t(0),i=t.n(a),r=t(155),b=t.n(r),s=(t(466),t(31)),d=t(868),c=t(865),f=t(263),o=t(428),u=t(429),l=t(6),p=t(7),m=t(24),y=t(23),h=t(13),g=t(12),v=t(49),_=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,w,T,e)}return Object(p.a)(t,[{key:"deploy",value:function(e,n,a,i,r){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e,n,a,i,r||{})}},{key:"getDeployTransaction",value:function(e,n,a,i,r){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a,i,r||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,w,n)}}]),t}(v.b),w=[{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint256",name:"initSupply",type:"uint256"},{internalType:"address",name:"recordsAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"registerBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],T="0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033",C=t(265),E=t(431),A=t(432),L=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,k,I,e)}return Object(p.a)(t,[{key:"deploy",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,k,n)}}]),t}(v.b),k=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"wallet",type:"address"},{indexed:!1,internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"Commision",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"wallet",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"uint256",name:"balance",type:"uint256"}],name:"RegisteredBalance",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC_INTERVAL",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_DAY",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_REGISTERED_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint32",name:"rewardUnits",type:"uint32"}],name:"_addClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"bool",name:"force",type:"bool"}],name:"_registerBalance",outputs:[{internalType:"bool",name:"registered",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"}],name:"_updateBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint64",name:"firstBlockNumber_",type:"uint64"}],name:"_updateFirstBlockNumber",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"adminAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"adminAddr_",type:"address"}],name:"attachAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"}],name:"attachToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"findBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBalances",outputs:[{internalType:"uint256[]",name:"balances",type:"uint256[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"address",name:"recipient",type:"address"}],name:"getClaims",outputs:[{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"getClaimsCnt",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"}],name:"getCommision",outputs:[{internalType:"uint8",name:"commisionPrc",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"recipient",type:"address"}],name:"hasClaimed",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"setCommision",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],I="",M=t(266),N=t(433),R=t(434),x=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,O,S,e)}return Object(p.a)(t,[{key:"deploy",value:function(e,n){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e,n||{})}},{key:"getDeployTransaction",value:function(e,n){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e,n||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,O,n)}}]),t}(v.b),O=[{inputs:[{internalType:"address",name:"recordsAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"uint256",name:"challenge",type:"uint256"},{indexed:!1,internalType:"bool",name:"premium",type:"bool"}],name:"AddChallenge",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC_INTERVAL",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_DAY",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_REGISTERED_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"bool",name:"premium",type:"bool"}],name:"_cleanupChallenge",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint8",name:"limit",type:"uint8"}],name:"addChallenges",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getChallengesAllowance",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint8",name:"limit",type:"uint8"}],name:"readChallenges",outputs:[{internalType:"uint8",name:"totalCnt",type:"uint8"},{internalType:"uint8[]",name:"indexes",type:"uint8[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"uint16[]",name:"rewardUnits",type:"uint16[]"},{internalType:"uint256[]",name:"challengeHashes",type:"uint256[]"},{internalType:"uint8[]",name:"nexts",type:"uint8[]"},{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"retrieveChallenge",outputs:[{components:[{internalType:"uint256",name:"challengeHash",type:"uint256"},{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"uint16",name:"rewardUnits",type:"uint16"},{internalType:"uint8",name:"index",type:"uint8"},{internalType:"bool",name:"valid",type:"bool"},{internalType:"uint8",name:"prev",type:"uint8"},{internalType:"uint8",name:"next",type:"uint8"}],internalType:"struct ChallengeRecords.Challenge",name:"ch",type:"tuple"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint8",name:"generalDifficulty",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],S="",D=t(267),B=t(435),U=t(436),P=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,H,F,e)}return Object(p.a)(t,[{key:"deploy",value:function(e,n,a,i){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e,n,a,i||{})}},{key:"getDeployTransaction",value:function(e,n,a,i){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a,i||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,H,n)}}]),t}(v.b),H=[{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"},{internalType:"address",name:"recordsAddr_",type:"address"},{internalType:"address",name:"adminAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!0,internalType:"address",name:"recipient",type:"address"},{indexed:!0,internalType:"address",name:"miner",type:"address"},{indexed:!1,internalType:"uint256",name:"solution",type:"uint256"},{indexed:!1,internalType:"uint8",name:"commisionPrc",type:"uint8"},{indexed:!1,internalType:"uint16",name:"claimNo",type:"uint16"}],name:"Claim",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"marketingAddr",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"MarketingCallFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC_INTERVAL",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_DAY",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_REGISTERED_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"adminAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"claimReward",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"claimsCnt",type:"uint16"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getClaimedTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getProgress",outputs:[{internalType:"uint256",name:"progress",type:"uint256"},{internalType:"uint256",name:"progressMax",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"marketingAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"marketingAddr_",type:"address"}],name:"setMarketingAddr",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifyClaim",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"rewardsCnt",type:"uint16"},{internalType:"uint16",name:"claimsCnt",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifySolution",outputs:[{internalType:"uint16",name:"solvedDifficulty",type:"uint16"}],stateMutability:"view",type:"function"}],F="0x60806040523480156200001157600080fd5b50604051620028e3380380620028e383398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b620016b71760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b61262c80620002b76000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638183059311610130578063b91268e8116100b8578063e81ec6121161007c578063e81ec61214610457578063ec2165d31461045f578063f2fde38b14610467578063f668bee51461047a578063f883fcaa146103ba57600080fd5b8063b91268e814610436578063b915dec21461043e578063c28bd11c146103ba578063c28cedf314610446578063c6088d971461044e57600080fd5b80639d941362116100ff5780639d941362146103b2578063a21577671461040b578063a5c9cd8214610413578063a7c1d5901461041b578063b313bd621461042e57600080fd5b806381830593146103c25780638456cb59146103d55780638da5cb5b146103dd578063939c4456146103ee57600080fd5b80633ff42b92116101be5780635fbe4d1d116101825780635fbe4d1d1461038e5780636bb987fe146103a1578063715018a6146103aa57806373d6aafa146103b25780637fb01232146103ba57600080fd5b80633ff42b9214610345578063479e92c814610358578063504b3662146103605780635b7f415c146103685780635c975abb1461037057600080fd5b80631e7bfd60116102055780631e7bfd60146102d257806330db4fa0146102fd5780633a3a7c531461031d5780633e6e387c146103335780633f4ba83a1461033b57600080fd5b806306e38632146102375780630bf43309146102575780630e7d8db9146102715780630ff8a7eb146102bf575b600080fd5b61023f600581565b60405161ffff90911681526020015b60405180910390f35b61025f60d081565b60405160ff909116815260200161024e565b61028461027f366004611ef3565b6104c0565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a00161024e565b61023f6102cd366004611ef3565b6108f1565b6002546102e5906001600160a01b031681565b6040516001600160a01b03909116815260200161024e565b61030560c881565b6040516001600160401b03909116815260200161024e565b610325610adf565b60405190815260200161024e565b61023f600281565b610343610af9565b005b6004546102e5906001600160a01b031681565b61025f600a81565b61025f606481565b61025f601281565b600054600160a01b900460ff165b604051901515815260200161024e565b6001546102e5906001600160a01b031681565b61030561996881565b610343610b2d565b61023f600a81565b61025f600281565b6003546102e5906001600160a01b031681565b610343610b89565b6000546001600160a01b03166102e5565b6103f6610bbb565b6040805192835260208301919091520161024e565b61025f60ff81565b610325610c3e565b610343610429366004611f44565b610c4a565b610305600281565b610325610daf565b600854610325565b61037e600181565b61023f6103e881565b610325610dd1565b610305610de9565b610343610475366004611f44565b610df6565b61048d610488366004611ef3565b610e91565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff16606082015260800161024e565b60008060008060006104dc60005460ff600160a01b9091041690565b156105025760405162461bcd60e51b81526004016104f990611f61565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190612030565b608083015191975091935090915061060c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104f9565b600061061e8c8b848660000151611739565b9050600061062e8d8d8d8d6108f1565b905060009850600097508160ff168161ffff16106107e2576005546040516370a0823160e01b81526001600160a01b038d8116600483015260009216906370a0823190602401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906120f4565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d7a8a2b78f8e6040518363ffffffff1660e01b81526004016107179291906001600160401b039290921682526001600160a01b0316602082015260400190565b602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061210d565b63ffffffff161561076c57600398506107dc565b8b6001600160a01b03168d6001600160a01b0316141580156107ae575061079560036012612149565b6107a090600a612250565b6107ab90600a61225f565b81105b156107bc57600598506107dc565b8b3b151580156107d257506107d08c611919565b155b156107dc57600698505b506107e7565b600297505b60ff88166108e25760006107fe856000015161198d565b9097509050600261ffff8816111561081557600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b815260040161086591906001600160401b0391909116815260200190565b602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061227e565b95508661ffff168661ffff1610156108db57846040015161ffff168161ffff166108d09190612299565b9950600098506108e0565b600498505b505b50505050945094509450945094565b60008054600160a01b900460ff161561091c5760405162461bcd60e51b81526004016104f990611f61565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190612030565b9250925092508060ff1660016109ae5760146109b1565b600a5b60ff16111580156109c6575060d060ff821611155b610a125760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104f9565b811580610a2157506001821515145b610a2a57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610ab55760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104f9565b80516020820120610ac581611a26565b610ad1906101006122c5565b9a9950505050505050505050565b610aeb60036012612149565b610af690600a612250565b81565b6000546001600160a01b03163314610b235760405162461bcd60e51b81526004016104f9906122e8565b610b2b611a99565b565b6000546001600160a01b03163314610b575760405162461bcd60e51b81526004016104f9906122e8565b600054600160a01b900460ff1615610b815760405162461bcd60e51b81526004016104f990611f61565b610b2b611b1d565b6000546001600160a01b03163314610bb35760405162461bcd60e51b81526004016104f9906122e8565b610b2b6116b7565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b91906120f4565b600854610c38919061231d565b90509091565b610af66012600a612250565b6000546001600160a01b03163314610c745760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b0381161580610d0757506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc9190612335565b6001600160a01b0316145b610d8d5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104f9565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610dbb60036012612149565b610dc690600a612250565b610af690600a61225f565b610ddd6012600a612250565b610af6906103e861225f565b610af66199686007612352565b6000546001600160a01b03163314610e205760405162461bcd60e51b81526004016104f9906122e8565b6001600160a01b038116610e855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f9565b610e8e81611b4d565b50565b600080600080610eab60005460ff600160a01b9091041690565b15610ec85760405162461bcd60e51b81526004016104f990611f61565b6000610ed6898989896104c0565b9398509196509450909250905060ff84166116ab5760008563ffffffff1611610f395760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104f9565b610f476107d06103e8611b9d565b8563ffffffff161115610f9c5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104f9565b6000610fc8610fad60036012612149565b610fb890600a612250565b63ffffffff8089169190611b9d16565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103c9190612378565b9050886001600160a01b03168a6001600160a01b0316146111e9576000611071606461106b8560ff8616611b9d565b90611bb2565b9050600061107f8483611bbe565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612393565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111709190612393565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111da9392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506112c1565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612393565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546112ce9083611bca565b600855600261ffff85161061131e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b8261ffff168461ffff161061136e5760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104f9565b83611378816123ae565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b505050508261ffff168461ffff16106114ab5760078054600160a01b90046001600160401b0316906014611424836123d0565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156116a857600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561153257600080fd5b505af1925050508015611543575060015b6116a65761154f6123ed565b806308c379a014156116035750611564612409565b8061156f5750611605565b600980546001600160401b0316906000611588836123d0565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e836040516115f593929190612492565b60405180910390a1506116a6565b505b600980546801000000000000000090046001600160401b031690600861162a836123d0565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff16156116e15760405162461bcd60e51b81526004016104f990611f61565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861171c3390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906120f4565b905060006117c9848784611bd6565b905060006117d683611ca3565b905060ff8616600a118015906117f0575060d060ff871611155b6118525760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104f9565b600061185e8284612507565b90508060ff168760ff16101561187557600061187f565b61187f8188612149565b9450600a60ff8616101561189257600a94505b60ff8516600a118015906118aa575060d060ff861611155b61190d5760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104f9565b50505050949350505050565b600080829050806001600160a01b031663df71f9906040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611979575060408051601f3d908101601f1916820190925261197691810190612393565b60015b6119865750600092915050565b9392505050565b600080826202222260ec82901c14156119af57506101f4936107d09350915050565b61222260f082901c14156119cb575060c8936101f49350915050565b61022260f482901c14156119e55750606493849350915050565b602260fe82901c14156119ff575060329360149350915050565b600260fc82901c1415611a19575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611a925760006001611a4b838561252c565b61ffff16901c905060006001611a62836002612552565b611a6c9190612562565b9050808611611a7d57819250611a8b565b611a8882600161252c565b93505b5050611a2d565b5092915050565b600054600160a01b900460ff16611ae95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104f9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361171c565b6000546001600160a01b03163314611b475760405162461bcd60e51b81526004016104f9906122e8565b610b2b60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611ba9828461225f565b90505b92915050565b6000611ba9828461258f565b6000611ba98284612562565b6000611ba9828461231d565b6000836001600160a01b03841680821883611bf082611e43565b905061ffff8116611c045750610100611c12565b80611c0e816125a3565b9150505b6000611c2a611c236012600a612250565b8890611bb2565b9050600060018210611c7e5760148361ffff1610611c4a5750601e611c96565b600a8361ffff1610611c7357611c61600a84612149565b611c6c906014612507565b9050611c96565b611c6c8360026125c1565b600a8361ffff161115611c935750600a611c96565b50815b9998505050505050505050565b600080611cbc611cb56012600a612250565b8490611bb2565b90506000611cf0611ccf60036012612149565b611cda90600a612250565b61106b611ce96012600a612250565b8790611ebd565b9050600060018310611da6576103e88310611d0d5750601e611e3b565b6101f48310611d1e5750601c611e3b565b60c88310611d2e5750601a611e3b565b60648310611d3e57506018611e3b565b60328310611d4e57506016611e3b565b60148310611d5e57506014611e3b565b600a8310611d6e57506012611e3b565b60058310611d7e57506010611e3b565b60038310611d8e5750600e611e3b565b60028310611d9e5750600c611e3b565b50600a611e3b565b6101f48210611db757506009611e3b565b60c88210611dc757506008611e3b565b60648210611dd757506007611e3b565b60328210611de757506006611e3b565b60148210611df757506005611e3b565b600a8210611e0757506004611e3b565b60058210611e1757506003611e3b565b60028210611e2757506002611e3b565b60018210611e3757506001611e3b565b5060005b949350505050565b600081611e5257506000919050565b60016101005b8061ffff168261ffff161015611a925760006001611e76838561252c565b61ffff16901c905060006001611e8d836002612552565b611e979190612562565b9050858116611eb257611eab82600161252c565b9350611eb6565b8192505b5050611e58565b6000611ba982846125e2565b6001600160401b0381168114610e8e57600080fd5b6001600160a01b0381168114610e8e57600080fd5b60008060008060808587031215611f0957600080fd5b8435611f1481611ec9565b93506020850135611f2481611ede565b92506040850135611f3481611ede565b9396929550929360600135925050565b600060208284031215611f5657600080fd5b813561198681611ede565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611fb857634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611ff157634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff8116811461200a57600080fd5b919050565b805160ff8116811461200a57600080fd5b8051801515811461200a57600080fd5b600080600083850361012081121561204757600080fd5b60e081121561205557600080fd5b5060405161206281611f8b565b84518152602085015161207481611ec9565b602082015261208560408601611ff8565b60408201526120966060860161200f565b60608201526120a760808601612020565b60808201526120b860a0860161200f565b60a08201526120c960c0860161200f565b60c082015292506120dc60e08501612020565b91506120eb610100850161200f565b90509250925092565b60006020828403121561210657600080fd5b5051919050565b60006020828403121561211f57600080fd5b815163ffffffff8116811461198657600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561216357612163612133565b90039392505050565b600181815b808511156121a757816000190482111561218d5761218d612133565b8085161561219a57918102915b93841c9390800290612171565b509250929050565b6000826121be57506001611bac565b816121cb57506000611bac565b81600181146121e157600281146121eb57612207565b6001915050611bac565b60ff8411156121fc576121fc612133565b50506001821b611bac565b5060208310610133831016604e8410600b841016171561222a575081810a611bac565b612234838361216c565b806000190482111561224857612248612133565b029392505050565b6000611ba960ff8416836121af565b600081600019048311821515161561227957612279612133565b500290565b60006020828403121561229057600080fd5b611ba982611ff8565b600063ffffffff808316818516818304811182151516156122bc576122bc612133565b02949350505050565b600061ffff838116908316818110156122e0576122e0612133565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561233057612330612133565b500190565b60006020828403121561234757600080fd5b815161198681611ede565b60006001600160401b03808316818516818304811182151516156122bc576122bc612133565b60006020828403121561238a57600080fd5b611ba98261200f565b6000602082840312156123a557600080fd5b611ba982612020565b600061ffff808316818114156123c6576123c6612133565b6001019392505050565b60006001600160401b03808316818114156123c6576123c6612133565b600060033d11156124065760046000803e5060005160e01c5b90565b600060443d10156124175790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561244657505050505090565b828501915081518181111561245e5750505050505090565b843d87010160208285010111156124785750505050505090565b61248760208286010187611fbe565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b818110156124dd578581018301518582016080015282016124c1565b818111156124ef576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561252457612524612133565b019392505050565b600061ffff80831681851680830382111561254957612549612133565b01949350505050565b6000611ba961ffff8416836121af565b60008282101561257457612574612133565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261259e5761259e612579565b500490565b600061ffff8216806125b7576125b7612133565b6000190192915050565b600060ff821660ff84168160ff048111821515161561224857612248612133565b6000826125f1576125f1612579565b50069056fea2646970667358221220fa5afe0195ca1f3a32a2019fffcf00c2e32332ee3e7e38f83041e121b4555dc964736f6c634300080b0033",G=t(268),q=t(437),z=t(438),X=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,W,j,e)}return Object(p.a)(t,[{key:"deploy",value:function(e,n,a){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e,n,a||{})}},{key:"getDeployTransaction",value:function(e,n,a){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,W,n)}}]),t}(v.b),W=[{inputs:[{internalType:"address",name:"erc20Addr_",type:"address"},{internalType:"address",name:"progressingAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"availableBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"erc20Addr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"notAvailableBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"progressingAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalLockedBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"withdrawnBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],j="0x60806040523480156200001157600080fd5b5060405162001e9338038062001e93833981016040819052620000349162000461565b620000d26040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004af565b6200022e60201b62000c361760201c565b6200012f604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014b9291906200039e565b508051620001619060049060208401906200039e565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f191906200058b565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200065292505050565b8051825160609184918491600091620002489190620005c6565b6001600160401b0381111562000262576200026262000499565b6040519080825280601f01601f1916602001820160405280156200028d576020820181803683370190505b509050806000805b85518110156200031157858181518110620002b457620002b4620005e1565b01602001516001600160f81b0319168383620002d081620005f7565b945081518110620002e557620002e5620005e1565b60200101906001600160f81b031916908160001a905350806200030881620005f7565b91505062000295565b5060005b84518110156200039157848181518110620003345762000334620005e1565b01602001516001600160f81b03191683836200035081620005f7565b945081518110620003655762000365620005e1565b60200101906001600160f81b031916908160001a905350806200038881620005f7565b91505062000315565b5090979650505050505050565b828054620003ac9062000615565b90600052602060002090601f016020900481019282620003d057600085556200041b565b82601f10620003eb57805160ff19168380011785556200041b565b828001600101855582156200041b579182015b828111156200041b578251825591602001919060010190620003fe565b50620004299291506200042d565b5090565b5b808211156200042957600081556001016200042e565b80516001600160a01b03811681146200045c57600080fd5b919050565b600080604083850312156200047557600080fd5b620004808362000444565b9150620004906020840162000444565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004c357600080fd5b82516001600160401b0380821115620004db57600080fd5b818501915085601f830112620004f057600080fd5b81518181111562000505576200050562000499565b604051601f8201601f19908116603f0116810190838211818310171562000530576200053062000499565b8160405282815288868487010111156200054957600080fd5b600093505b828410156200056d57848401860151818501870152928501926200054e565b828411156200057f5760008684830101525b98975050505050505050565b600080604083850312156200059f57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005dc57620005dc620005b0565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200060e576200060e620005b0565b5060010190565b600181811c908216806200062a57607f821691505b602082108114156200064c57634e487b7160e01b600052602260045260246000fd5b50919050565b61183180620006626000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b604051610146919061144d565b60405180910390f35b61016261015d3660046114be565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b6101626101923660046114e8565b6103b7565b6101766101a5366004611524565b610466565b6101766105bf565b6101c56101c036600461153f565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f3660046114be565b6107a8565b610176610222366004611524565b6107e4565b610176610235366004611524565b6001600160a01b031660009081526020819052604090205490565b61017661025e366004611524565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b6101626102973660046114be565b610936565b6101626102aa3660046114be565b6109cf565b6101c56102bd36600461153f565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611558565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d9061158b565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061158b565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610d89565b5060015b92915050565b60006103c4848484610eae565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610d89565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906115c6565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610f8390919063ffffffff16565b90610f96565b9190610fa2565b9050818111156105b2576105a78183610fdc565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b191906115ea565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610f83565b6001600160a01b0385166000908152600860205260409020556107298486610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611603565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df90869061163b565b610d89565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610fdc565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610f83565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610f83565b6001600160a01b0385166000908152600860205260409020556108a98484610fe8565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611603565b5050505050565b60606004805461031d9061158b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610d89565b5060019392505050565b60006103ad338484610eae565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611603565b50610a6a828461112e565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906115c6565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4891906115c6565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef868484601261120d565b6001600160a01b038616600090815260076020526040902054909150610c159082610f83565b6001600160a01b038616600090815260076020526040902055505050505050565b8051825160609184918491600091610c4e919061163b565b67ffffffffffffffff811115610c6657610c66611653565b6040519080825280601f01601f191660200182016040528015610c90576020820181803683370190505b509050806000805b8551811015610d0857858181518110610cb357610cb3611669565b01602001516001600160f81b0319168383610ccd8161167f565b945081518110610cdf57610cdf611669565b60200101906001600160f81b031916908160001a90535080610d008161167f565b915050610c98565b5060005b8451811015610d7c57848181518110610d2757610d27611669565b01602001516001600160f81b0319168383610d418161167f565b945081518110610d5357610d53611669565b60200101906001600160f81b031916908160001a90535080610d748161167f565b915050610d0c565b5090979650505050505050565b6001600160a01b038316610deb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610e4c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610ed2848484611273565b8115610f7d576001600160a01b03841660009081526007602052604081205490506000610f42836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610f9690919063ffffffff16565b9050610f4e8282610fdc565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610f83565b50505050565b6000610f8f828461163b565b9392505050565b6000610f8f828461169a565b60008183610fc35760405162461bcd60e51b8152600401610445919061144d565b50828481610fd357610fd36116b9565b04949350505050565b6000610f8f82846116cf565b6001600160a01b0382166110485760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b038216600090815260208190526040902054818110156110bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b03831660009081526020819052604081208383039055600280548492906110eb9084906116cf565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ea1565b6001600160a01b0382166111845760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b8060026000828254611196919061163b565b90915550506001600160a01b038216600090815260208190526040812080548392906111c390849061163b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806112248461121e8888610f96565b90611441565b9050600061123384600a6117ca565b905060006112458661121e848a610f96565b905060006112538383610fdc565b905060006112658261121e8787610f96565b9a9950505050505050505050565b6001600160a01b0383166112d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166113395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b038316600090815260208190526040902054818110156113b15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113e890849061163b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161143491815260200190565b60405180910390a3610f7d565b6000610f8f82846117d9565b600060208083528351808285015260005b8181101561147a5785810183015185820160400152820161145e565b8181111561148c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146114b957600080fd5b919050565b600080604083850312156114d157600080fd5b6114da836114a2565b946020939093013593505050565b6000806000606084860312156114fd57600080fd5b611506846114a2565b9250611514602085016114a2565b9150604084013590509250925092565b60006020828403121561153657600080fd5b610f8f826114a2565b60006020828403121561155157600080fd5b5035919050565b6000806040838503121561156b57600080fd5b611574836114a2565b9150611582602084016114a2565b90509250929050565b600181811c9082168061159f57607f821691505b602082108114156115c057634e487b7160e01b600052602260045260246000fd5b50919050565b600080604083850312156115d957600080fd5b505080516020909101519092909150565b6000602082840312156115fc57600080fd5b5051919050565b60006020828403121561161557600080fd5b81518015158114610f8f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561164e5761164e611625565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561169357611693611625565b5060010190565b60008160001904831182151516156116b4576116b4611625565b500290565b634e487b7160e01b600052601260045260246000fd5b6000828210156116e1576116e1611625565b500390565b600181815b8085111561172157816000190482111561170757611707611625565b8085161561171457918102915b93841c93908002906116eb565b509250929050565b600082611738575060016103b1565b81611745575060006103b1565b816001811461175b576002811461176557611781565b60019150506103b1565b60ff84111561177657611776611625565b50506001821b6103b1565b5060208310610133831016604e8410600b84101617156117a4575081810a6103b1565b6117ae83836116e6565b80600019048211156117c2576117c2611625565b029392505050565b6000610f8f60ff841683611729565b6000826117f657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b73d4d7bf08bbb87de03a90044f68daf352fc2733aa3026cb0d16719a86d2d1b64736f6c634300080b0033",K=t(269),Y=t(439),V=t(440),Z=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(e){return Object(l.a)(this,t),n.call(this,J,Q,e)}return Object(p.a)(t,[{key:"deploy",value:function(e,n){return Object(m.a)(Object(y.a)(t.prototype),"deploy",this).call(this,e,n||{})}},{key:"getDeployTransaction",value:function(e,n){return Object(m.a)(Object(y.a)(t.prototype),"getDeployTransaction",this).call(this,e,n||{})}},{key:"attach",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new v.a(e,J,n)}}]),t}(v.b),J=[{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"campaignAddr",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"CampaignClaimFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"campaignAddr",type:"address"},{indexed:!1,internalType:"address",name:"tokenAddr",type:"address"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"TokenCallFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC_INTERVAL",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_DAY",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_REGISTERED_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"_claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"},{internalType:"uint256",name:"tokenBudget",type:"uint256"},{internalType:"uint256",name:"ethBudget",type:"uint256"}],name:"addBudget",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"addCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"getCampaign",outputs:[{internalType:"uint256",name:"tokenBudget",type:"uint256"},{internalType:"uint256",name:"ethBudget",type:"uint256"},{internalType:"uint8",name:"campaignId",type:"uint8"},{internalType:"bool",name:"valid",type:"bool"},{internalType:"bool",name:"active",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCampaigns",outputs:[{internalType:"address[]",name:"campaigns",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"hasReferral",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"isLuminaFund",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"pure",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"},{internalType:"address",name:"referrer",type:"address"}],name:"referral",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"removeBudget",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"removeCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"startCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"stopCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],Q="0x60806040523480156200001157600080fd5b50604051620029d4380380620029d4833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001afe1760201c565b565b60006200017d6200023160201b62001ba31760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61275280620002826000396000f3fe6080604052600436106102605760003560e01c8063777b0c2111610144578063b91268e8116100b6578063e3eddde21161007a578063e3eddde2146106c4578063e4663a5b146106e4578063e81ec61214610704578063ec2165d314610719578063f2fde38b1461072e578063f883fcaa1461058757600080fd5b8063b91268e814610670578063c28bd11c14610587578063c28cedf314610685578063c6088d971461069a578063df71f990146106b057600080fd5b80639d941362116101085780639d94136214610552578063a2157767146105ef578063a5c9cd8214610604578063a6b0363314610619578063ac9c4fd31461063b578063b313bd621461065b57600080fd5b8063777b0c21146105675780637fb012321461058757806382e51bd01461059c5780638456cb59146105bc5780638da5cb5b146105d157600080fd5b80633e6e387c116101dd5780635c975abb116101a15780635c975abb1461044e5780635fbe4d1d146104795780636bb987fe14610499578063715018a6146104af578063731301cf146104c457806373d6aafa1461055257600080fd5b80633e6e387c146103e55780633f4ba83a146103fa578063479e92c81461040f578063504b3662146104245780635b7f415c1461043957600080fd5b80631df55679116102245780631df5567914610334578063270d8e0e146103545780632713b9601461037457806330db4fa0146103945780633a3a7c53146103c257600080fd5b806306e386321461026c5780630bf433091461029957806314270b65146102c057806318f053da146102f25780631c505d1d1461031457600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610281600581565b60405161ffff90911681526020015b60405180910390f35b3480156102a557600080fd5b506102ae60d081565b60405160ff9091168152602001610290565b3480156102cc57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610290565b3480156102fe57600080fd5b5061031261030d366004611f93565b61074e565b005b34801561032057600080fd5b5061031261032f366004611fb7565b6108fc565b34801561034057600080fd5b5061031261034f366004611f93565b610a72565b34801561036057600080fd5b5061031261036f366004611ff0565b610b9f565b34801561038057600080fd5b5061031261038f366004612025565b610df2565b3480156103a057600080fd5b506103a960c881565b60405167ffffffffffffffff9091168152602001610290565b3480156103ce57600080fd5b506103d7611118565b604051908152602001610290565b3480156103f157600080fd5b50610281600281565b34801561040657600080fd5b50610312611132565b34801561041b57600080fd5b506102ae600a81565b34801561043057600080fd5b506102ae606481565b34801561044557600080fd5b506102ae601281565b34801561045a57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610290565b34801561048557600080fd5b506003546102da906001600160a01b031681565b3480156104a557600080fd5b506103a961996881565b3480156104bb57600080fd5b50610312611166565b3480156104d057600080fd5b506105206104df366004611f93565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a001610290565b34801561055e57600080fd5b50610281600a81565b34801561057357600080fd5b50610312610582366004611f93565b6111e5565b34801561059357600080fd5b506102ae600281565b3480156105a857600080fd5b506103126105b7366004611f93565b6112b8565b3480156105c857600080fd5b50610312611390565b3480156105dd57600080fd5b506000546001600160a01b03166102da565b3480156105fb57600080fd5b506102ae60ff81565b34801561061057600080fd5b506103d76113c2565b34801561062557600080fd5b5061062e6113ce565b60405161029091906120b2565b34801561064757600080fd5b50610312610656366004611f93565b611430565b34801561066757600080fd5b506103a9600281565b34801561067c57600080fd5b506103d76115fe565b34801561069157600080fd5b50610469600181565b3480156106a657600080fd5b506102816103e881565b3480156106bc57600080fd5b506001610469565b3480156106d057600080fd5b506104696106df366004611f93565b611620565b3480156106f057600080fd5b506103126106ff366004611f93565b6117e0565b34801561071057600080fd5b506103d7611a3e565b34801561072557600080fd5b506103a9611a56565b34801561073a57600080fd5b50610312610749366004611f93565b611a63565b6000546001600160a01b031633146107815760405162461bcd60e51b8152600401610778906120ff565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166107c25760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106107e8576107e861216b565b6000918252602090912001546001600160a01b03161461081a5760405162461bcd60e51b815260040161077890612181565b805460055410156108685760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b806001015460065410156108b95760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610778565b8054600580546000906108cd9084906121ce565b90915550506001810154600680546000906108e99084906121ce565b9091555050600080825560019091015550565b600054600160a01b900460ff1615610912575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166109535760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106109795761097961216b565b6000918252602090912001546001600160a01b0316146109ab5760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1615610a6d57805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af1158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5591908101906122bd565b925092509250610a688786858585611bb2565b505050505b505050565b6001546001600160a01b03163314610af25760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610778565b6002546001600160a01b031615610b715760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610778565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bc95760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610c0a5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0387169260ff16908110610c3057610c3061216b565b6000918252602090912001546001600160a01b031614610c625760405162461bcd60e51b815260040161077890612181565b82600554610c7091906123b1565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906123c9565b1015610d2b5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610778565b81600654610d3991906123b1565b471015610d885760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610778565b8260056000828254610d9a91906123b1565b925050819055508160066000828254610db391906123b1565b9091555050805483908290600090610dcc9084906123b1565b9250508190555081816001016000828254610de791906123b1565b909155505050505050565b6002546001600160a01b03163314610e685760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610778565b600054600160a01b900460ff1615610e7f57611111565b60005b60075463ffffffff8216101561110f57600060078263ffffffff1681548110610ead57610ead61216b565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610eff5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff16908110610f2557610f2561216b565b6000918252602090912001546001600160a01b031614610f575760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff16156110fa57805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af192505050801561101957506040513d6000823e601f3d908101601f1916820160405261101691908101906122bd565b60015b6110e7576110256123e2565b806308c379a01415611086575061103a6123fe565b806110455750611088565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b83604051611078939291906124d5565b60405180910390a1506110f8565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a16110f8565b6110f48686858585611bb2565b5050505b505b5050808061110790612512565b915050610e82565b505b5050505050565b61112460036012612536565b61112f90600a61263f565b81565b6000546001600160a01b0316331461115c5760405162461bcd60e51b8152600401610778906120ff565b611164611e7a565b565b6000546001600160a01b031633146111905760405162461bcd60e51b8152600401610778906120ff565b600054600160a01b900460ff16156111dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b611164611efe565b6000546001600160a01b0316331461120f5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112505760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106112765761127661216b565b6000918252602090912001546001600160a01b0316146112a85760405162461bcd60e51b815260040161077890612181565b600201805462ff00001916905550565b6000546001600160a01b031633146112e25760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166113235760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106113495761134961216b565b6000918252602090912001546001600160a01b03161461137b5760405162461bcd60e51b815260040161077890612181565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113ba5760405162461bcd60e51b8152600401610778906120ff565b611164611afe565b61112f6012600a61263f565b6060600780548060200260200160405190810160405280929190818152602001828054801561142657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611408575b5050505050905090565b6000546001600160a01b0316331461145a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114eb5760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610778565b6007546101001161153e5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610778565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038716908117909155925481549192169081106115c8576115c861216b565b6000918252602090912001546001600160a01b0316146115fa5760405162461bcd60e51b815260040161077890612181565b5050565b61160a60036012612536565b61161590600a61263f565b61112f90600a61264e565b60008054600160a01b900460ff161561167b5760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610778565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116bc5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0386169260ff169081106116e2576116e261216b565b6000918252602090912001546001600160a01b0316146117145760405162461bcd60e51b815260040161077890612181565b600281015462010000900460ff1661176e5760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610778565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d8919061266d565b949350505050565b6000546001600160a01b0316331461180a5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661184b5760405162461bcd60e51b815260040161077890612134565b6002810154600780546001600160a01b0385169260ff169081106118715761187161216b565b6000918252602090912001546001600160a01b0316146118a35760405162461bcd60e51b815260040161077890612181565b6118ac8261074e565b60078054600091906118c0906001906121ce565b815481106118d0576118d061216b565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166119505760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610778565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff93841617905554600780548493919290911690811061199b5761199b61216b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060078054806119da576119da61268f565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b611a4a6012600a61263f565b61112f906103e861264e565b61112f61996860076126a5565b6000546001600160a01b03163314611a8d5760405162461bcd60e51b8152600401610778906120ff565b6001600160a01b038116611af25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b611afb81611f2e565b50565b600054600160a01b900460ff1615611b4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610778565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b863390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561110f576000848281518110611bd257611bd261216b565b6020026020010151905060006001600160a01b0316816001600160a01b031614611e67578351821015611daf576000848381518110611c1357611c1361216b565b60200260200101519050600081118015611c2e575086548111155b15611dad576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611ca4575060408051601f3d908101601f19168201909252611ca19181019061266d565b60015b611d7957611cb06123e2565b806308c379a01415611d1d5750611cc56123fe565b80611cd05750611d1f565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611d0f918c916001600160a01b03169085906126d5565b60405180910390a150611dad565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611dad565b5080876000016000828254611d8e91906121ce565b925050819055508060056000828254611da791906121ce565b90915550505b505b8251821015611e67576000838381518110611dcc57611dcc61216b565b60200260200101519050600081118015611dea575080876001015410155b8015611df65750804710155b15611e65576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611e31573d6000803e3d6000fd5b5080876001016000828254611e4691906121ce565b925050819055508060066000828254611e5f91906121ce565b90915550505b505b5080611e7281612701565b915050611bb5565b600054600160a01b900460ff16611eca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610778565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611b86565b6000546001600160a01b03163314611f285760405162461bcd60e51b8152600401610778906120ff565b61116460005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611afb57600080fd5b600060208284031215611fa557600080fd5b8135611fb081611f7e565b9392505050565b60008060408385031215611fca57600080fd5b8235611fd581611f7e565b91506020830135611fe581611f7e565b809150509250929050565b60008060006060848603121561200557600080fd5b833561201081611f7e565b95602085013595506040909401359392505050565b600080600080600060a0868803121561203d57600080fd5b853567ffffffffffffffff8116811461205557600080fd5b9450602086013561206581611f7e565b9350604086013561207581611f7e565b9250606086013563ffffffff8116811461208e57600080fd5b9150608086013560ff811681146120a457600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120f35783516001600160a01b0316835292840192918401916001016120ce565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121e0576121e06121b8565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612221576122216121e5565b6040525050565b600067ffffffffffffffff821115612242576122426121e5565b5060051b60200190565b600082601f83011261225d57600080fd5b8151602061226a82612228565b60405161227782826121fb565b83815260059390931b850182019282810191508684111561229757600080fd5b8286015b848110156122b2578051835291830191830161229b565b509695505050505050565b6000806000606084860312156122d257600080fd5b835167ffffffffffffffff808211156122ea57600080fd5b818601915086601f8301126122fe57600080fd5b8151602061230b82612228565b60405161231882826121fb565b83815260059390931b850182019282810191508a84111561233857600080fd5b948201945b8386101561235f57855161235081611f7e565b8252948201949082019061233d565b9189015191975090935050508082111561237857600080fd5b6123848783880161224c565b9350604086015191508082111561239a57600080fd5b506123a78682870161224c565b9150509250925092565b600082198211156123c4576123c46121b8565b500190565b6000602082840312156123db57600080fd5b5051919050565b600060033d11156123fb5760046000803e5060005160e01c5b90565b600060443d101561240c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561243c57505050505090565b82850191508151818111156124545750505050505090565b843d870101602082850101111561246e5750505050505090565b61247d602082860101876121fb565b509095945050505050565b6000815180845260005b818110156124ae57602081850181015186830182015201612492565b818111156124c0576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061250990830184612488565b95945050505050565b600063ffffffff8083168181141561252c5761252c6121b8565b6001019392505050565b600060ff821660ff841680821015612550576125506121b8565b90039392505050565b600181815b8085111561259457816000190482111561257a5761257a6121b8565b8085161561258757918102915b93841c939080029061255e565b509250929050565b6000826125ab57506001612639565b816125b857506000612639565b81600181146125ce57600281146125d8576125f4565b6001915050612639565b60ff8411156125e9576125e96121b8565b50506001821b612639565b5060208310610133831016604e8410600b8410161715612617575081810a612639565b6126218383612559565b8060001904821115612635576126356121b8565b0290505b92915050565b6000611fb060ff84168361259c565b6000816000190483118215151615612668576126686121b8565b500290565b60006020828403121561267f57600080fd5b81518015158114611fb057600080fd5b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156126cc576126cc6121b8565b02949350505050565b6001600160a01b0384811682528316602082015260606040820181905260009061250990830184612488565b6000600019821415612715576127156121b8565b506001019056fea26469706673582212205c98edbb1a60c16513755918de06fa0f5d2cb4e276ac68ec3d1004a7758334ff64736f6c634300080b0033",$=t(99);function ee(e,n){var t=e.div($.a.from(10).pow(n)),a=e.div($.a.from(10).pow(n-3)).mod(1e3);return t.toNumber().toLocaleString()+(a.isZero()?"":"."+a.toString().padStart(3,"0"))}var ne=$.a.from(0),te=$.a.from(1),ae=($.a.from(2),$.a.from(10));var ie="0x0000000000000000000000000000000000000000",re=function(e){return e?10:20},be=function(e){return e?2:500},se=ae.pow(15),de=t(98),ce={polygon:{token:f.address,records:C.address,admin:M.address,trustee:D.address,locker:G.address,marketing:K.address},mumbai:{token:o.address,records:E.address,admin:N.address,trustee:B.address,locker:q.address,marketing:Y.address},localhost:{token:u.address,records:A.address,admin:R.address,trustee:U.address,locker:z.address,marketing:V.address},unknown:{token:f.address,records:C.address,admin:M.address,trustee:D.address,locker:G.address,marketing:K.address}},fe={token:_.connect,records:L.connect,admin:x.connect,trustee:P.connect,locker:X.connect,marketing:Z.connect},oe=function(e,n,t){var a=ce[e][n];return(0,fe[n])(a,t)},ue=function(e,n,t){var a=ce[e][n];return(0,fe[n])(a,t)},le=function(e,n,t,a){var i,r=new URLSearchParams(window.location.search).get("ref")||"",b=de[e],s=b.chainId,f=b.name,o=b.url,u={name:f,chainId:s||137};if(Array.isArray(o)){if(0===o.length)throw new Error("Empty url array in json config");var l=o[n%o.length],p=l.startsWith("ws://")||l.startsWith("wss://");i=p?new d.a(l,u):new c.a(l,u),p||(i.pollingInterval=1e4)}else{var m=o.startsWith("ws://")||o.startsWith("wss://");i=m?new d.a(o,u):new c.a(o,u),m||(i.pollingInterval=1e4)}return{referrer:r,contextNetwork:e,chainId:s,rpcProvider:i,rpcToken:ue(e,"token",i),rpcRecords:ue(e,"records",i),rpcAdmin:ue(e,"admin",i),rpcTrustee:ue(e,"trustee",i),rpcLocker:ue(e,"locker",i),rpcMarketing:ue(e,"marketing",i),setContextNetwork:t,incContextUrlIndex:a}},pe=i.a.createContext({}),me=t(1),ye=t.n(me),he=t(10),ge=t(90),ve=t(18);function _e(e){return e.startsWith("0x22222")?[500,2e3]:e.startsWith("0x2222")?[200,500]:e.startsWith("0x222")?[100,100]:e.startsWith("0x22")?[50,20]:e.startsWith("0x2")?[20,5]:[10,1]}function we(e,n,t,a){var i=$.a.from(e),r=$.a.from(n),b=function(e){if(e.isZero())return 0;for(var n=1,t=256;n<t;){var a=n+t>>1,i=te.shl(a).sub(te);e.and(i).isZero()?n=a+1:t=a}return n}(i.xor(r));return 0===b&&(b=256),b--,t.div(ae.pow(a)).gte(te)?b>=20?b=30:b>=10?b=b-10+20:b*=2:b>10&&(b=10),b}function Te(e){return e<=20?"too easy":e<=30?"easy":e<=40?"medium":e<=50?"hard":e<=60?"very hard":e<=70?"extremely hard":e<=80?"almost impossible":e<=90?"impossible":"a miracle"}var Ce=t(866),Ee=t(271),Ae=t.n(Ee),Le=t(456),ke=t(449),Ie=t.n(ke),Me=t(450),Ne=t.n(Me),Re=t(451),xe=t.n(Re),Oe=t(273),Se=t.n(Oe),De=t(47),Be=t(196),Ue=t(197),Pe=t.n(Ue),He=function(e){var n=e.url,t=e.children,r=e.cn,b=Object(a.useState)(!1),d=Object(s.a)(b,2),c=d[0],f=d[1],o=Object(a.useState)(!1),u=Object(s.a)(o,2),l=u[0],p=u[1],m=Pe.a.button,y=Pe.a.buttonHover,h=Pe.a.buttonDown,g=l?h:c?y:r||m;return i.a.createElement("span",{onPointerOver:function(){return f(!0)},onPointerOut:function(){return f(!1)},onPointerDown:function(){return p(!0)},onPointerUp:function(){return p(!1)}},n?i.a.createElement("a",{title:n,href:n,target:"_blank",rel:"noopener noreferrer"},i.a.createElement("button",{className:g},t)):i.a.createElement("button",{className:g},t))},Fe=/0x[a-fA-F0-9]+/;function Ge(e){return 42===e.length&&(n=e,Fe.test(n));var n}var qe=t(92),ze=t.n(qe),Xe=function(e){var n=e.children,t=e.chainId,a=e.logo,r=e.logoName,b=e.changeFn,s=e.disconnectFn,d=80001===t?"http://mumbai.polygonscan.com/address":"http://polygonscan.com/address";if(!n)return null;if(!(n=n.trim()))return null;var c=Ge(n),f=n.substring(0,8)+"-"+n.substring(n.length-8);return i.a.createElement("span",{className:ze.a.connect+(c?"":" "+ze.a.invalid)},a&&i.a.createElement(i.a.Fragment,null,i.a.createElement("img",{style:{position:"relative",top:"2px"},title:r,width:"16px",src:a,alt:r}),"\xa0"),i.a.createElement("button",{className:ze.a.address,onClick:b},i.a.createElement("code",null,f)),i.a.createElement(He,{cn:ze.a.button},i.a.createElement(De.a,{title:"Disconnect",icon:"lock",onClick:s})),n&&i.a.createElement(Be.CopyToClipboard,{text:n},i.a.createElement("span",{title:"Copy: "+n},i.a.createElement(He,{cn:ze.a.button},i.a.createElement(De.a,{icon:["far","copy"]})))),i.a.createElement(He,{url:d+"/"+n,cn:ze.a.button},i.a.createElement(De.a,{title:d+"/"+n,icon:"external-link-alt"})))},We={white:{backgroundColor:"white"},red:{backgroundColor:"#FFCDD2"},pink:{backgroundColor:"#F8BBD0"},purple:{backgroundColor:"#E1BEE7"},deepPurple:{backgroundColor:"#D1C4E9"},indigo:{backgroundColor:"#C5CAE9"},blue:{backgroundColor:"#BBDEFB"},lightBlue:{backgroundColor:"#B3E5FC"},black:{backgroundColor:"#000000",color:"white"},cyan:{backgroundColor:"#B2EBF2"},teal:{backgroundColor:"#B2DFDB"},green:{backgroundColor:"#C8E6C9"},lightGreen:{backgroundColor:"#DCEDC8"},yellow:{backgroundColor:"#FFF9C4"},amber:{backgroundColor:"#FFECB3"},orange:{backgroundColor:"#FFE0B2"},brown:{backgroundColor:"#D7CCC8"},darkGrey:{backgroundColor:"#D8D8D8"},grey:{backgroundColor:"#E8E8E8"},lightgrey:{backgroundColor:"#F5F5F5"},blueGrey:{backgroundColor:"#CFD8DC"}},je=function(e){var n=e.err;return n?i.a.createElement("h2",{style:We.red},n.toString().split("\n").map((function(e,n){return i.a.createElement("div",{key:n},e)}))):null},Ke=function(){var e=Object(a.useContext)(pe).contextNetwork,n=de[e];return"polygon"!==e&&"unknown"!==e?i.a.createElement("h2",{style:{color:"red"}},i.a.createElement("span",{style:{fontWeight:"bold"}},"Network:")," ",n.display," (",n.chainId,")"):null},Ye={"header not found":!0,"Internal error":!0,"Internal JSON-RPC error.":!0,"project ID request rate exceeded":!0},Ve=function(e){var n=e.data&&e.data.message?e.data.message:e.message?e.message:e.toString();n.startsWith("Error: ")&&(n=n.substring(7)),e.data&&e.data.see&&(n+="\nSee: "+e.data.see);var t="VM Exception while processing transaction: revert ";return n&&n.startsWith(t)&&(n=n.substring(t.length)),Ye[n]&&(n=""),n},Ze={};Object.keys(de).forEach((function(e){var n=de[e];Ze[n.chainId.toString()]=e}));var Je={web3Modal:null,connected:!1,connection:null,provider:null,chainId:0,address:ie,cancel:null,err:""},Qe=function(e){var n=e.setProvider,t=e.setAddress,r=Object(a.useState)(0),b=Object(s.a)(r,2),d=b[0],c=b[1],f=Object(a.useState)(Je),o=Object(s.a)(f,2),u=o[0],l=o[1],p=Object(a.useContext)(pe),m=p.contextNetwork,y=p.chainId,h=p.setContextNetwork,g=de[m],v=function(){var e=Object(he.a)(ye.a.mark((function e(t,a){var i,r,b;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.connected){e.next=10;break}if(i=t.web3Modal,r=t.connection,(b=t.cancel)&&b(),!(a&&r&&r.close)){e.next=6;break}return e.next=6,r.close();case 6:i&&i.clearCachedProvider(),n(null),l(Je),a||c(d+1);case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();Object(a.useEffect)((function(){var e=function(e){var t=Ze[e.toString()];if(t)y!==e&&(n(null),h(t),l((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{err:""})})));else{var a="Network Not Supported (ChainId: "+e+")\nPlease Connect to Polygon Network";n(null),h("unknown"),l((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{err:a})}))}},a=function(n){if(!n.on)return null;var a=function(){},i=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.length>0&&(t(n[0]),l((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{address:n[0]})})));case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),r=function(){var n=Object(he.a)(ye.a.mark((function n(t){var a;return ye.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:a="number"===typeof t?t:parseInt(t,t.startsWith("0x")?16:10),e(a);case 2:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}();return n.on("disconnect",a),n.on("accountsChanged",i),n.on("chainChanged",r),n.removeListener?function(){n.removeListener("disconnect",a),n.removeListener("accountsChanged",i),n.removeListener("chainChanged",r)}:function(){}};function i(){return r.apply(this,arguments)}function r(){return(r=Object(he.a)(ye.a.mark((function i(){var r,b,s,d,c,f,o,u;return ye.a.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return r={walletconnect:{package:Le.a,options:{infuraId:"INFURA_ID"}},portis:{package:xe.a,options:{id:"PORTIS_ID"}},fortmatic:{package:Ne.a,options:{key:"FORTMATIC_KEY",network:{rpcUrl:g.url,chainId:g.chainId}}},authereum:{package:Ie.a},"custom-coinbase":{display:{logo:"images/coinbase_wallet_appicon.svg",name:"CoinbaseWallet",description:"Scan with WalletLink to connect"},options:{appName:"LuminaCash",networkUrl:g.url,chainId:g.chainId},package:Se.a,connector:function(){var e=Object(he.a)(ye.a.mark((function e(n,t){var a,i,r,b,s;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=t.appName,i=t.networkUrl,r=t.chainId,b=new Se.a({appName:a}),s=b.makeWeb3Provider(i,r),e.next=5,s.enable();case 5:return e.abrupt("return",s);case 6:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}()}},i.prev=1,i.prev=2,b=new Ae.a({cacheProvider:!0,disableInjectedProvider:!1,providerOptions:r}),i.next=6,b.connect();case 6:s=i.sent,i.next=18;break;case 9:if(i.prev=9,i.t0=i.catch(2),"Modal closed by user"!==i.t0){i.next=13;break}throw i.t0;case 13:return(b=new Ae.a({cacheProvider:!1,disableInjectedProvider:!0,providerOptions:r})).clearCachedProvider(),i.next=17,b.connect();case 17:s=i.sent;case 18:return d=new Ce.a(s),i.next=21,d.listAccounts();case 21:return c=i.sent,f=c[0],i.next=25,d.getNetwork();case 25:o=i.sent.chainId,l((function(e){e.cancel&&e.cancel();var n=a(s);return{web3Modal:b,connected:!0,connection:s,provider:d,chainId:o,address:f,cancel:n,err:""}})),t(f),o===g.chainId?n(d):e(o),i.next=35;break;case 31:i.prev=31,i.t1=i.catch(1),"Modal closed by user"!==(u=Ve(i.t1))&&(console.log("Web3Modal Error:",u),l((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{err:u})})));case 35:case"end":return i.stop()}}),i,null,[[1,31],[2,9]])})))).apply(this,arguments)}(function(){var e=Object(he.a)(ye.a.mark((function e(){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(d>0||null!==localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER"))&&i();case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[d,g,y,h,n,t]);var _=u.web3Modal,w=u.connection,T=u.connected,C=u.chainId,E=u.address,A=u.err,L=null,k="",I="";if(_&&w){var M=_.userOptions.filter((function(e){return w["is"+e.name]}));M.length>0&&(k=(L=M[0]).logo,I=L.name)}return i.a.createElement("div",null,i.a.createElement(je,{err:A}),i.a.createElement("span",{title:T?"The address of your wallet":"Connect to your wallet"},T?i.a.createElement(Xe,{chainId:C,logoName:I,logo:k,changeFn:function(){return v(u,!1)},disconnectFn:function(){return v(u,!0)}},E):i.a.createElement("button",{className:ze.a.connect,onClick:function(){return c(d+1)}},"Connect Wallet")),i.a.createElement(Ke,null))},$e=t(457),en=t(274);function nn(e,n,t,a,i){var r=$.a.from(1);if(!en.random.isReady())throw new Error("RNG is not ready");for(var b=en.random.randomWords(8),s="0x",d=0;d<8;d++){s+=(b[d]>>>0).toString(16)}var c=$.a.from(s),f=a+1,o=r.shl(256-f).sub(r),u=!1,l=0,p=0;return u||setTimeout((function e(){if(!u){for(var b=Date.now(),s=0;s<1e3;s++){l++;var d=Object($e.a)(["uint256","uint256","uint256","uint256"],[c,$.a.from(n),$.a.from(t),$.a.from(t)]),m=$.a.from(d);if(m.lte(o)){for(a=f;m.lte(o);)a=f,f++,o=r.shl(256-f).sub(r);if(i(l,p,c,a),u)return}c=c.add(r),l%1e3===0&&i(l,p)}u||setTimeout(e,0);var y=Date.now();p+=y-b}}),0),function(){return u=!0}}var tn=t(452),an=t.n(tn),rn=t(453),bn=t.n(rn),sn=function(e){var n=e.style,t=e.cat,a=function(e){var n;switch(e){case"too easy":n="white";break;case"easy":n="#ffff9c";break;case"medium":n="#ffcf9c";break;case"hard":n="pink";break;case"very hard":n="#ff9c9c";break;case"extremely hard":n="#E1BEE7";break;default:n="#D1C4E9"}return n}(t);return i.a.createElement("span",{title:t,style:Object(ve.a)(Object(ve.a)({},n),{},{backgroundColor:a}),className:bn.a.cat},"\xa0",e.children,"\xa0")},dn=t(275),cn=t.n(dn);function fn(e){e&&Object.keys(e).forEach((function(n){var t=e[n];void 0!==t.stopFn&&(t.stopFn(),t.stopFn=void 0)}))}var on={},un=function(e){var n=e.challenges,t=e.group,r=e.address,b=e.registeredBalances,d=e.demo,c=e.mobile,f=e.claimReward,o=on[r];o||(o={},on[r]=o);var u=function(e,n){var t={};return e.blockNumbers.forEach((function(a,i){var b=a.toHexString(),s=e.challengeHashes[i];if(t[b])throw new Error("Duplicate block number in challenges: "+b);var c=function(e,n){for(var t=e.blockNumbers.length,a=0;a<t;a++){var i=e.blockNumbers[a],r=e.balances[a];if(n.gte(i))return r}return ne}(n,a),f=function(e){return e?208:218}(d)-2*(e.totalCnt-i-1),o=we(s,r,c,18),u=function(e,n){var t=e.div(ae.pow(n)),a=e.mod(ae.pow(n)).div(ae.pow(n-3));return t.gte(te)?t.gte($.a.from(1e3))?30:t.gte($.a.from(500))?28:t.gte($.a.from(200))?26:t.gte($.a.from(100))?24:t.gte($.a.from(50))?22:t.gte($.a.from(20))?20:t.gte(ae)?18:t.gte($.a.from(5))?16:t.gte($.a.from(3))?14:t.gte($.a.from(2))?12:10:a.gte($.a.from(500))?9:a.gte($.a.from(200))?8:a.gte($.a.from(100))?7:a.gte($.a.from(50))?6:a.gte($.a.from(20))?5:a.gte(ae)?4:a.gte($.a.from(5))?3:a.gte($.a.from(2))?2:a.gte(te)?1:0}(c,18),l=f-o-u;l<re(d)&&(l=re(d));var p={blockNumberHex:b,challengeHash:s,generalDifficulty:f,addressDiscount:o,balance:c,balanceDiscount:u,adjustedDifficulty:l,claimsCnt:e.claimsCnt[i],claimed:e.claimed[i]};t[b]=p})),t}(n,b),l=Object(a.useState)(Object(ve.a)({},o)),p=Object(s.a)(l,2),m=p[0],y=p[1],h=Object(a.useState)(""),g=Object(s.a)(h,2),v=g[0],_=g[1],w=Object(a.useState)({totalCnt:0,indexes:[],blockNumbers:[],rewardUnits:[],challengeHashes:[],nexts:[],claimsCnt:[],claimed:[]}),T=Object(s.a)(w,2),C=T[0],E=T[1];Object(a.useEffect)((function(){(function(){var e=Object(he.a)(ye.a.mark((function e(){var a,i;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:v!==r?(fn(on[v]),_(r),a={},Object.keys(o).forEach((function(e){var n=o[e],t=Object(ve.a)({},n);a[e]=t})),y(a)):C!==n&&(Object.keys(o).forEach((function(e){var n=o[e];if(n.group===t){var a=u[e];a?n.targetDifficulty!==a.adjustedDifficulty&&(n.targetDifficulty=a.adjustedDifficulty,n.solvedDifficulty>=n.targetDifficulty&&(n.solved=!0,n.stopFn&&(n.stopFn(),n.stopFn=void 0))):(n.stopFn&&(n.stopFn(),n.stopFn=void 0),delete o[e])}})),E(n),i={},Object.keys(o).forEach((function(e){var n=o[e],t=Object(ve.a)({},n);i[e]=t})),y(i));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}));var A=function(){var e=Object(he.a)(ye.a.mark((function e(n,a,i,r,b){var s,d,c,f,u,l;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),s=a.toHexString(),(d=o[s])||(d={group:t,blockNumberHex:s,challengeHash:i,trials:0,targetDifficulty:b,solutionTrials:0,solvedDifficulty:0,claiming:!1,claimed:!1,solved:!1,timeMs:0,stopFn:void 0},o[s]=d),!d.stopFn){e.next=6;break}throw new Error("The solver is already running on block "+s);case 6:c=d.trials,f=d.timeMs,u=function(e,n,t,a){var i=o[s];i.trials=c+e,i.timeMs=f+n,t&&void 0!==a&&a>i.solvedDifficulty&&(i.solutionTrials=i.trials,i.solution=t,i.solvedDifficulty=a,i.solvedDifficulty>=i.targetDifficulty&&(i.solved=!0,i.stopFn&&(i.stopFn(),i.stopFn=void 0)));var r=Object(ve.a)({},o),b=Object(ve.a)({},i);r[s]=b,y(r)},d.stopFn=nn(0,i,r,d.solvedDifficulty,u),(l=Object(ve.a)({},o))[s]=Object(ve.a)({},d),y(l);case 13:case"end":return e.stop()}}),e)})));return function(n,t,a,i,r){return e.apply(this,arguments)}}(),L=function(){var e=Object(he.a)(ye.a.mark((function e(n,t){var a,i,r,b;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),i=o[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:i.stopFn&&(i.stopFn(),i.stopFn=void 0),r=Object(ve.a)({},o),b=Object(ve.a)({},i),r[a]=b,y(r);case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),k=function(){var e=Object(he.a)(ye.a.mark((function e(n,t){var a,i,b,s,d,c,u;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),i=o[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:if(!i.solution){e.next=16;break}return i.claiming=!0,b=Object(ve.a)({},o),s=Object(ve.a)({},i),b[a]=s,y(b),e.next=13,f(t,r,r,i.solution);case 13:d=e.sent,i.claiming=!1,d&&(i.claimed=!0);case 16:c=Object(ve.a)({},o),u=Object(ve.a)({},i),c[a]=u,y(c);case 20:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();return i.a.createElement("table",null,i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"N"),i.a.createElement("th",null,"Block"),i.a.createElement("th",null,"LUMI"),i.a.createElement("th",null,"Claims"),i.a.createElement("th",{style:{textAlign:"left"}},"YOUR",i.a.createElement("br",null),"Difficulty"),i.a.createElement("th",null,"Mining",i.a.createElement("br",null),"Progress"),i.a.createElement("th",null,"Mining",i.a.createElement("br",null),"Time"),i.a.createElement("th",null,"Mine"))),i.a.createElement("tbody",null,n.blockNumbers.map((function(e,t){var a=n.challengeHashes[t],b=e.toHexString(),f=u[b],o=f.adjustedDifficulty,l=f.claimsCnt,p=f.claimed,y=m[b],h=_e(a),g=Object(s.a)(h,2),v=g[0],_=g[1],w=n.rewardUnits[t],T=be(d);v>T&&(v=T);var C=y?y.solved?o+" / "+o:y.stopFn||y.trials>0?y.solvedDifficulty+" / "+o:"":"",E=y?y.solved?o.toString():y.stopFn||y.trials>0?y.solvedDifficulty.toString():"":"",I=!(p||y&&(y.solved||y.stopFn)),M=y&&y.stopFn,N=!p&&y&&!y.claimed&&y.solvedDifficulty>=o,R=I?"Start Mining":M?"Stop Mining":N?y&&y.claiming?"Claiming your reward ...":"Claim your reward":p?"Claim confirmed":"Claim submitted",x=!I&&!M&&!N,O=I?function(n){return A(n,e,a,r,o)}:M?function(n){return L(n,e)}:N?function(n){return k(n,e)}:null,S=I?"play":M?"sync-alt":N?y&&y.claiming?"sync-alt":"trophy":"check",D=I?{}:M?{color:"red"}:N?(y&&y.claiming,{color:"green"}):p?{color:"green",fontWeight:"bold"}:{color:"green"};return i.a.createElement("tr",{key:t},i.a.createElement("td",null,t+1),i.a.createElement("th",null,e.toString()),i.a.createElement("td",null,_*w/1e3),i.a.createElement("td",null,l,"/",v),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(sn,{cat:Te(o)},o,c?"":" - "+Te(o))),i.a.createElement("td",null,""===E?"":i.a.createElement("span",{title:C},i.a.createElement(an.a,{width:"60px",height:"18px",labelSize:"10px",labelColor:"black",bgColor:"#BBDEFB",labelAlignment:"center",animateOnRender:!1,transitionTimingFunction:"linear",transitionDuration:"200ms",completed:E,maxCompleted:o}))),i.a.createElement("td",null,y&&(y.timeMs>0?Math.floor(y.timeMs/1e3).toLocaleString()+"s":"")),i.a.createElement("td",null,i.a.createElement("button",{title:R,style:D,disabled:x,onClick:O},i.a.createElement(De.a,{className:"trophy"===S?cn.a.vspinner:"sync-alt"===S?cn.a.spinner:"",icon:S}))))}))))},ln=t(198),pn=t.n(ln),mn=(pn.a.svg,i.a.createElement("span",{className:pn.a.svg},i.a.createElement("svg",{version:"1.1",id:"L2",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 100 100",enableBackground:"new 0 0 100 100",xmlSpace:"preserve"},i.a.createElement("circle",{fill:"none",stroke:"#3CCCFC",strokeWidth:"4",strokeMiterlimit:"10",cx:"50",cy:"50",r:"48"}),i.a.createElement("line",{fill:"none",strokeLinecap:"round",stroke:"#3CCCFC",strokeWidth:"4",strokeMiterlimit:"10",x1:"50",y1:"50",x2:"85",y2:"50.5"},i.a.createElement("animateTransform",{attributeName:"transform",dur:"2s",type:"rotate",from:"0 50 50",to:"360 50 50",repeatCount:"indefinite"})),i.a.createElement("line",{fill:"none",strokeLinecap:"round",stroke:"#3CCCFC",strokeWidth:"4",strokeMiterlimit:"10",x1:"50",y1:"50",x2:"49.5",y2:"74"},i.a.createElement("animateTransform",{attributeName:"transform",dur:"15s",type:"rotate",from:"0 50 50",to:"360 50 50",repeatCount:"indefinite"}))))),yn=(pn.a.svg,function(){return mn}),hn=t(454),gn=new Date(Date.UTC(2022,1,22,18,22,22)),vn=gn.toString(),_n=vn.indexOf(":22 "),wn=vn.substring(0,_n+3),Tn=vn.substring(_n+4),Cn=function(e){var n=e.days,t=e.hours,a=e.minutes,r=e.seconds;return e.completed?i.a.createElement("span",null,"NOW!"):i.a.createElement("span",null,n,"d ",t.toString().padStart(2,"0"),":",a.toString().padStart(2,"0"),":",r.toString().padStart(2,"0"))},En=function(){return(new Date).getTime()<gn.getTime()?i.a.createElement("div",{style:Object(ve.a)(Object(ve.a)({},We.red),{},{margin:"3px"})},i.a.createElement("br",null),i.a.createElement("h2",null,"LUMINA MINING LAUNCH"),i.a.createElement("h1",null,i.a.createElement(hn.a,{date:gn,renderer:Cn})),i.a.createElement("h2",null,"GST: 22/02/2022 22:22:22",i.a.createElement("br",null),i.a.createElement("br",null),"LOCAL: ",wn,i.a.createElement("br",null),Tn,i.a.createElement("br",null),i.a.createElement("br",null))):null},An=t(276),Ln=t.n(An),kn=function(e){var n=e.children,t=80001===e.chainId?"http://mumbai.polygonscan.com/address":"http://polygonscan.com/address";if(!n)return null;if(!(n=n.trim()))return null;var a=Ge(n),r=n.substring(0,8)+"-"+n.substring(n.length-8);return i.a.createElement("span",null,i.a.createElement("span",{className:Ln.a.address+(a?"":" "+Ln.a.invalid)},i.a.createElement("code",null,r)),"\xa0",a?i.a.createElement(i.a.Fragment,null,i.a.createElement(De.a,{icon:"info"}),"\xa0",n&&i.a.createElement(Be.CopyToClipboard,{text:n},i.a.createElement("span",{title:"Copy: "+n},i.a.createElement(He,null,i.a.createElement(De.a,{icon:["far","copy"]})))),i.a.createElement(He,{url:t+"/"+n},i.a.createElement(De.a,{title:t+"/"+n,icon:"external-link-alt"}))):i.a.createElement(De.a,{style:{color:"red"},title:"Invalid Address: "+n,icon:"exclamation-triangle"}))},In=t(455),Mn=[{value:0,label:"0%"},{value:10,label:"10%"},{value:20,label:"20%"},{value:30,label:"30%"},{value:40,label:"40%"},{value:50,label:"50%"},{value:60,label:"60%"},{value:70,label:"70%"},{value:80,label:"80%"},{value:90,label:"90%"}],Nn={};Mn.forEach((function(e){return Nn[e.value.toString()]=e}));var Rn={control:function(e,n){return Object(ve.a)(Object(ve.a)({},e),{},{background:"#fff",borderColor:"#9e9e9e",minHeight:"20px",height:"20px",boxShadow:(n.isFocused,null)})},valueContainer:function(e,n){return Object(ve.a)(Object(ve.a)({},e),{},{height:"20px",padding:"0 6px"})},input:function(e,n){return Object(ve.a)(Object(ve.a)({},e),{},{margin:"0px"})},indicatorSeparator:function(e){return{display:"none"}},indicatorsContainer:function(e,n){return Object(ve.a)(Object(ve.a)({},e),{},{height:"20px"})}},xn=function(e){Object(h.a)(t,e);var n=Object(g.a)(t);function t(){var e;Object(l.a)(this,t);for(var a=arguments.length,i=new Array(a),r=0;r<a;r++)i[r]=arguments[r];return(e=n.call.apply(n,[this].concat(i))).handleChange=function(n){e.props.setCommision(n.value)},e}return Object(p.a)(t,[{key:"render",value:function(){var e=this.props.commision,n=Nn[e.toString()]||null;return i.a.createElement(In.a,{styles:Rn,placeholder:e+"%",width:25,value:n,onChange:this.handleChange,options:Mn})}}]),t}(a.Component),On=function(e){var n=Object(a.useContext)(pe),t=n.chainId,r=n.rpcToken,b=e.address,s=e.registeredBalances,d=e.provider,c=e.contracts,f=e.balances,o=e.commision,u=e.paused,l=e.runTx,p=e.setCommision,m=f.balance,y=f.balanceMatic,h=f.lockedBalance,g=f.lockedAvailableBalance,v=31337===t?"https://matic.supply/":80001===t?"https://faucet.polygon.technology/":"https://matic.supply/",_="https://quickswap.exchange/#/swap?outputCurrency="+r.address,w=function(){var e=Object(he.a)(ye.a.mark((function e(n){var t,a,i;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),c){e.next=3;break}return e.abrupt("return");case 3:return t=c.token,a=c.locker,i=a&&a.address,e.next=7,l(t,(function(e){return e.approve(i,m)}));case 7:return e.next=9,l(a,(function(e){return e.deposit(m)}));case 9:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),T=function(){var e=Object(he.a)(ye.a.mark((function e(n){var t;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),c){e.next=3;break}return e.abrupt("return");case 3:return t=c.locker,e.next=6,l(t,(function(e){return e.withdraw(g)}));case 6:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),C=function(){var e=Object(he.a)(ye.a.mark((function e(n){var t;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),c){e.next=3;break}return e.abrupt("return");case 3:return t=c.token,e.next=6,l(t,(function(e){return e.registerBalance()}));case 6:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();function E(){return(E=Object(he.a)(ye.a.mark((function e(n){var t;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(c){e.next=2;break}return e.abrupt("return");case 2:return t=c.records,p(n),e.next=6,l(t,(function(e){return e.setCommision(n)}));case 6:e.sent?p(n):window.alert("Could not change commision");case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return i.a.createElement("div",null,i.a.createElement("h2",null,"YOUR Wallet"),i.a.createElement("p",{title:"The adddress of your wallet, currently connected to Metamask"},b?i.a.createElement("span",{style:{fontWeight:"bold"}},"Wallet: \xa0",i.a.createElement(kn,{chainId:t},b)):null),d?i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"LUMI:"),i.a.createElement("td",{style:{textAlign:"left",fontWeight:"bold"}},ee(m,18)," ","LUMI","\xa0",i.a.createElement(He,{url:_},i.a.createElement(De.a,{icon:"shopping-cart"}))),i.a.createElement("td",null,m.gte($.a.from(10).pow(23))?i.a.createElement("button",{onClick:function(e){return w(e)}},"Lock Balance"):null,"\xa0",m.gt(ne)?i.a.createElement("button",{title:"Register Balance",disabled:u,onClick:function(e){return C(e)}},i.a.createElement(De.a,{icon:"share-square"})):null)),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"MATIC:"),i.a.createElement("td",{style:{textAlign:"left"}},ee(y,18),"\xa0MATIC",y.eq(0)?i.a.createElement("span",{title:"You need MATIC to claim LUMI rewards...\nClick the link icon to open MATIC faucet at "+v},"\xa0",i.a.createElement(De.a,{color:"red",icon:"exclamation-triangle"}),i.a.createElement(He,{url:v},i.a.createElement(De.a,{color:"red",icon:"external-link-alt"}))):null),i.a.createElement("td",null)),s.blockNumbers.length>0?i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Registered:"),i.a.createElement("td",{style:{textAlign:"left"}},ee(s.balances[0],18)," ","LUMI"),i.a.createElement("td",null)):null,h.gt(0)?i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Locked:"),i.a.createElement("td",{style:{textAlign:"left"}},ee(h,18)," ","LUMI")):null,g.gt(0)?i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Withdrawable:"),i.a.createElement("td",{style:{textAlign:"left"}},ee(g,18)," ","LUMI","\xa0",i.a.createElement("button",{disabled:u,onClick:function(e){return T(e)}},"Withdraw"))):null,b?i.a.createElement("tr",{title:"Portion of reward you are willing to share with any miner,\nwho would claim mine a reward for the benefit of your wallet.\n\nAllowed values: 0% or within range [10%-90%].\n\nThe default value is 22% but you can change it at any time."},i.a.createElement("th",{style:{textAlign:"right"}},"Commision:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(xn,{commision:o,setCommision:function(e){return E.apply(this,arguments)}})),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(De.a,{icon:"info"}))):null)):null)},Sn=function(e){var n=Object(a.useContext)(pe),t=n.chainId,r=n.rpcToken,b=e.address,s=e.balances,d=s.totalSupply,c=s.claimedTokens,f=s.availableTokens,o=s.totalLockedBalance;return i.a.createElement("div",null,i.a.createElement("h2",null,"LUMINA Coins"),i.a.createElement("p",{title:"The address of the Lumina ERC20 coin contract"},i.a.createElement("span",{style:{fontWeight:"bold"}},"Contract:"),"\xa0",i.a.createElement(kn,{chainId:t},r.address)),b?i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Total Supply:"),i.a.createElement("td",{style:{textAlign:"right"}},ee(d,18)," ","LUMI")),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Locked:"),i.a.createElement("td",{style:{textAlign:"right"}},ee(o,18)," ","LUMI")),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Mined:"),i.a.createElement("td",{style:{textAlign:"right"}},ee(c,18)," ","LUMI")),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Available:"),i.a.createElement("td",{style:{textAlign:"right"}},ee(f,18)," ","LUMI")))):null)},Dn=Array.from(Array(5).keys()).map((function(e){return 2*e+20})).concat(Array.from(Array(8).keys()).map((function(e){return 10*e+30}))),Bn=["quad years","trillion years","billion years","million years","millenium","century","year","week","day","hour","minute","second"],Un=["quad years","trillion years","billion years","million years","millenia","centuries","years","weeks","days","hours","minutes","seconds"],Pn={quadYears:31556736e15,trillionYears:31556736e12,billionYears:31556736e9,millionYears:31556736e6,millenium:31556736e3,century:3155673600,year:31557600,week:604800,day:86400,hour:3600,minute:60,second:1},Hn=Object.keys(Pn).map((function(e,n){return{time:Pn[e],label:Un[n],label1:Bn[n]}})),Fn=function(e){var n=Hn.filter((function(n){return e>=n.time})),t="0 seconds";if(n.length>0){var a=n[0],i=Math.floor(e/a.time*10)/10;t=i>1?i.toString()+" "+a.label:"1 "+a.label}return t},Gn=function(e){return i.a.createElement("div",null,i.a.createElement("h2",null,"Difficulties"),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null),i.a.createElement("th",{colSpan:2},"Average Mining Time")),i.a.createElement("tr",null,i.a.createElement("th",{title:"Difficulty Level",style:{textAlign:"left"}},"Level"),i.a.createElement("th",{style:{textAlign:"right"},title:"Average mining time at hash rate 10KH/s"},"Web Browser"),i.a.createElement("th",{style:{textAlign:"right"},title:"Average mining time at hash rate 1GH/s"},"GPU"))),i.a.createElement("tbody",null,Dn.map((function(e,n){var t=Te(e);return i.a.createElement("tr",{key:n},i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(sn,{cat:t},e," - ",t)),i.a.createElement("td",{style:{textAlign:"right"}},Fn(Math.floor(Math.pow(2,e)/Math.pow(10,4)))),i.a.createElement("td",{style:{textAlign:"right"}},Fn(Math.floor(Math.pow(2,e)/Math.pow(10,9)))))})))))},qn=function(e){var n=e.registeredBalances,t=e.balances.balance;return i.a.createElement("div",null,n.blockNumbers.length>0?i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Registered Balances"),i.a.createElement("p",null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Balance"),i.a.createElement("th",null,"Since Block"))),i.a.createElement("tbody",null,n.balances.slice(0,n.blockNumbers.length).map((function(e,t){var a=n.blockNumbers[t];return i.a.createElement("tr",{key:t},i.a.createElement("td",null,ee(e,18)," ","LUMI"),i.a.createElement("td",null,a.toString()))}))))):t.gte($.a.from(10).pow(15))?i.a.createElement("p",null,"Please register your current balance to be eligible for additional benefits"):null)},zn=function(e){var n=Object(a.useContext)(pe),t=n.chainId,r=n.rpcToken,b=n.rpcRecords,s=n.rpcTrustee,d=n.rpcAdmin,c=n.rpcMarketing,f=n.rpcLocker;return i.a.createElement("div",null,i.a.createElement("h2",null,"Contracts"),i.a.createElement(Ke,null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Token:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},r.address))),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Records:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},b.address))),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Trustee:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},s.address))),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Admin:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},d.address))),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Marketing:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},c.address))),i.a.createElement("tr",null,i.a.createElement("th",{style:{textAlign:"right"}},"Locker:"),i.a.createElement("td",{style:{textAlign:"left"}},i.a.createElement(kn,{chainId:t},f.address))))))},Xn=function(e){var n=e.address,t=e.contracts,a=e.ownerAddress,r=e.paused,b=e.runTx,s=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),t){e.next=3;break}return e.abrupt("return");case 3:b(t.trustee,(function(e){return e.pause()}));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),d=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),t){e.next=3;break}return e.abrupt("return");case 3:b(t.trustee,(function(e){return e.unpause()}));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();return i.a.createElement("div",null,a===n?i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Management"),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Paused: ",r?"YES":"NO"))),i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement("button",{disabled:r,onClick:function(e){return s(e)}},"Pause"),i.a.createElement("button",{disabled:!r,onClick:function(e){return d(e)}},"Unpause")))))):null)},Wn=function(e){var n=Object(a.useState)([]),t=Object(s.a)(n,2),r=t[0],b=t[1],d=Object(a.useState)({}),c=Object(s.a)(d,2),f=c[0],o=c[1],u=Object(a.useContext)(pe),l=u.chainId,p=u.rpcMarketing,m=e.address,y=e.contracts,h=e.ownerAddress,g=e.marketingPaused,v=e.runTx,_=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),y){e.next=3;break}return e.abrupt("return");case 3:v(y.marketing,(function(e){return e.pause()}));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),w=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),y){e.next=3;break}return e.abrupt("return");case 3:v(y.marketing,(function(e){return e.unpause()}));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();return Object(a.useEffect)((function(){(function(){var e=Object(he.a)(ye.a.mark((function e(){var n,t;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(h===m){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,p.getCampaigns();case 4:n=e.sent,b(n),t={},n.forEach(function(){var e=Object(he.a)(ye.a.mark((function e(n){var a;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,p.getCampaign(n);case 2:a=e.sent,t[n]=a;case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()),o(t);case 9:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[h,m,p]),i.a.createElement("div",null,h===m?i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Marketing"),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Paused: ",g?"YES":"NO"))),i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement("button",{disabled:g,onClick:function(e){return _(e)}},"Pause"),i.a.createElement("button",{disabled:!g,onClick:function(e){return w(e)}},"Unpause"))))),i.a.createElement("h2",null,"Campaigns"),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Campaign Addr"),i.a.createElement("th",null,"ID"),i.a.createElement("th",null,"Budget (LUMI)"),i.a.createElement("th",null,"Active"))),i.a.createElement("tbody",null,r.map((function(e,n){var t=f[e];return t&&!t.valid?null:i.a.createElement("tr",{key:n},i.a.createElement("td",null,i.a.createElement(kn,{chainId:l},e)),i.a.createElement("td",null,t&&t.campaignId),i.a.createElement("td",null,t&&ee(t.tokenBudget,18)),i.a.createElement("td",null,t&&t.active?"Yes":"No"))}))))):null)},jn=t(277),Kn=function(e){var n=e.loading,t=e.sleeping,a=e.refresh;return jn.isMobile?t?i.a.createElement("button",{style:We.red,onClick:a},"Click to Refresh..."):n?i.a.createElement(yn,null):i.a.createElement("img",{width:24,alt:"",src:"logo256.png"}):null},Yn=jn.isMobile?{}:{float:"left",padding:"10px"},Vn=function(e){return e.demo?i.a.createElement("h2",{style:{color:"red"}},"DEMO MODE"):null},Zn=function(e){var n=e.basicChallenges,t=e.premiumChallenges,a=e.address,r=e.registeredBalances,b=e.demo,s=e.mobile,d=e.sleeping,c=e.contracts,f=e.loading,o=e.ownerAddress,u=e.paused,l=e.challengesAllowance,p=e.runTx,m=e.verifyClaim,y=e.claimReward,h=e.refresh,g=function(){var e=Object(he.a)(ye.a.mark((function e(n){return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),c){e.next=3;break}return e.abrupt("return");case 3:return e.next=5,p(c.admin,(function(e){return e.addChallenges(l)}));case 5:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();return i.a.createElement("div",null,i.a.createElement(En,null),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h}),i.a.createElement("div",{style:Yn},i.a.createElement(Vn,{demo:b}),i.a.createElement("h2",null,"Premium Challenges (",t.blockNumbers.length,")",!u&&l>0&&c?i.a.createElement(i.a.Fragment,null,"\xa0",i.a.createElement("button",{title:"Add More Challenges",disabled:u||l<=0,onClick:function(e){return g(e)}},i.a.createElement(De.a,{icon:"plus"}),l)):null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement(un,{challenges:t,group:"premium",address:a,registeredBalances:r,demo:b,mobile:s,verifyClaim:m,claimReward:y}))))),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})),i.a.createElement("div",{style:Yn},i.a.createElement(Vn,{demo:b}),i.a.createElement("h2",null,"Regular Challenges (",n.blockNumbers.length,")",!u&&l>0&&c?i.a.createElement(i.a.Fragment,null,"\xa0",i.a.createElement("button",{title:"Add More Challenges",disabled:u||l<=0,onClick:function(e){return g(e)}},i.a.createElement(De.a,{icon:"plus"}),l)):null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement(un,{challenges:n,group:"basic",address:a,registeredBalances:r,demo:b,mobile:s,verifyClaim:m,claimReward:y}))))),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})),i.a.createElement("div",{style:Yn},i.a.createElement(Gn,null),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})),i.a.createElement("div",{style:Yn},i.a.createElement(On,e),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h}),i.a.createElement(Sn,e),r.blockNumbers.length>0?i.a.createElement(i.a.Fragment,null,i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})):null,i.a.createElement(qn,e),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h}),i.a.createElement(zn,e),o===a?i.a.createElement(i.a.Fragment,null,i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})):null),i.a.createElement("div",{style:Yn},i.a.createElement(Xn,e),o===a?i.a.createElement(i.a.Fragment,null,i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})):null,i.a.createElement(Wn,e),i.a.createElement("p",null),i.a.createElement(Kn,{loading:f,sleeping:d,refresh:h})),i.a.createElement("p",null))},Jn=function(){var e=Object(a.useContext)(pe).referrer;if(!e)return null;var n=e,t=n.substring(0,8)+"-"+n.substring(n.length-8);return i.a.createElement("div",{style:Object(ve.a)(Object(ve.a)({},We.green),{},{margin:"3px"})},i.a.createElement("div",null,"\xa0"),i.a.createElement("h2",null,"You have been referred by ",t,"."),i.a.createElement("h2",null,"If you accept this referral, you will receive"),i.a.createElement("h2",null,"extra 0.1 LUMI with your first token mined."),i.a.createElement("h1",null,i.a.createElement("button",{style:{fontSize:"16px",fontWeight:"bold"}},"Accept Referral")),i.a.createElement("div",null,"\xa0"))},Qn=function(){return i.a.createElement("img",{style:{margin:"5px"},width:360,alt:"",src:"lumina-logo.png"})},$n=function(e){var n=e.err,t=e.setProvider,a=e.setAddress;return i.a.createElement("div",null,i.a.createElement(Qn,null),i.a.createElement(je,{err:n}),i.a.createElement(Qe,{setProvider:t,setAddress:a}),i.a.createElement("p",null),i.a.createElement(Jn,null),i.a.createElement(Zn,e))},et=function(){var e={totalCnt:0,indexes:[],blockNumbers:[],rewardUnits:[],challengeHashes:[],nexts:[],claimsCnt:[],claimed:[]},n={challengesAllowance:0,basicChallenges:e,premiumChallenges:e,registeredBalances:{balances:[],blockNumbers:[]},balances:{balance:ne,balanceMatic:ne,totalSupply:ne,claimedTokens:ne,availableTokens:ne,lockedBalance:ne,lockedAvailableBalance:ne,totalLockedBalance:ne},commision:0},t=Object(a.useState)(0),r=Object(s.a)(t,2),b=r[0],d=r[1],c=Object(a.useState)(0),f=Object(s.a)(c,2),o=f[0],u=f[1],l=Object(a.useState)("dark"),p=Object(s.a)(l,1)[0],m=Object(a.useState)(!1),y=Object(s.a)(m,2),h=y[0],g=y[1],v=Object(a.useState)(!0),_=Object(s.a)(v,1)[0],w=Object(a.useState)(!1),T=Object(s.a)(w,2),C=T[0],E=T[1],A=Object(a.useState)(null),L=Object(s.a)(A,2),k=L[0],I=L[1],M=Object(a.useState)(null),N=Object(s.a)(M,2),R=N[0],x=N[1],O=Object(a.useState)(null),S=Object(s.a)(O,2),D=S[0],B=S[1],U=Object(a.useState)(ie),P=Object(s.a)(U,2),H=P[0],F=P[1],G=Object(a.useState)(n),q=Object(s.a)(G,2),z=q[0],X=q[1],W=Object(a.useState)(""),j=Object(s.a)(W,2),K=j[0],Y=j[1],V=Object(a.useState)(!1),Z=Object(s.a)(V,2),J=Z[0],Q=Z[1],$=Object(a.useState)(""),ee=Object(s.a)($,2),te=ee[0],ae=ee[1],re=Object(a.useState)(!1),de=Object(s.a)(re,2),ce=de[0],fe=de[1],ue=Object(a.useState)(!1),le=Object(s.a)(ue,2),me=le[0],we=le[1],Te=Object(a.useContext)(pe),Ce=Te.contextNetwork,Ee=Te.rpcToken,Ae=Te.rpcRecords,Le=Te.rpcAdmin,ke=Te.rpcTrustee,Ie=Te.rpcLocker,Me=Te.rpcMarketing,Ne=Te.incContextUrlIndex;function Re(e,n,t){return xe.apply(this,arguments)}function xe(){return(xe=Object(he.a)(ye.a.mark((function e(n,t,a){var i,r,b;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Y(""),e.prev=1,i=n){e.next=5;break}throw Error("Contract instance not ready");case 5:return e.next=7,t(i);case 7:return r=e.sent,a&&a(i),e.next=11,r.wait();case 11:if(!(e.sent.confirmations<=0)){e.next=14;break}throw new Error("No confirmations in contract receipt");case 14:u(o+1),e.next=22;break;case 17:return e.prev=17,e.t0=e.catch(1),b=Ve(e.t0),window.alert(b),e.abrupt("return",!1);case 22:return e.abrupt("return",!0);case 23:case"end":return e.stop()}}),e,null,[[1,17]])})))).apply(this,arguments)}Object(a.useEffect)((function(){if(H===ie||null!==k){var e=function(e,n){if(e.length<=n)return e;var t=[];return e.forEach((function(e,a){return n!==a&&t.push(e)})),t},n=function(n,t,a,i,r,b){var s=function(a){for(var i=a.blockNumbers.length,r=0;r<i;r++)if(n.eq(a.blockNumbers[r])){var s=_e(a.challengeHashes[r])[0],d=be(h),c=s;if(c>d&&(c=d),b+1===c)return{totalCnt:a.totalCnt-1,indexes:e(a.indexes,r),blockNumbers:e(a.blockNumbers,r),rewardUnits:e(a.rewardUnits,r),challengeHashes:e(a.challengeHashes,r),nexts:e(a.nexts,r),claimsCnt:e(a.claimsCnt,r),claimed:e(a.claimed,r)};if(b+1>a.claimsCnt[r]){var f=Object(ve.a)(Object(ve.a)({},a),{},{claimsCnt:Object(ge.a)(a.claimsCnt)});return f.claimsCnt[r]=b+1,t===H&&(f.claimed=Object(ge.a)(a.claimed),f.claimed[r]=!0),f}}return a},d=function(e,t){var a=e.blockNumbers.findIndex((function(e){return n.eq(e)}));if(a<0)return t;var i=_e(e.challengeHashes[a])[1],r=se.mul(i).mul(e.rewardUnits[a]);return r&&t&&r?Object(ve.a)(Object(ve.a)({},t),{},{claimedTokens:t.claimedTokens.add(r),availableTokens:t.availableTokens.sub(r)}):t};X((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{balances:d(e.premiumChallenges,d(e.basicChallenges,e.balances)),basicChallenges:s(e.basicChallenges),premiumChallenges:s(e.premiumChallenges)})}))},t=function(e,n){Be(n)},a=function(e,n,t){X((function(e){var a=e.registeredBalances,i=a.balances,r=a.blockNumbers,b={balances:[t].concat(i.slice(0,4)),blockNumbers:[n].concat(r.slice(0,4))};return Object(ve.a)(Object(ve.a)({},e),{},{registeredBalances:b})}))},i=function(){var e=Object(he.a)(ye.a.mark((function e(n,t,a){var i,r;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!a){e.next=7;break}return e.next=3,b(D,!0);case 3:i=e.sent,X((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{premiumChallenges:i})})),e.next=11;break;case 7:return e.next=9,b(D,!1);case 9:r=e.sent,X((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{basicChallenges:r})}));case 11:case"end":return e.stop()}}),e)})));return function(n,t,a){return e.apply(this,arguments)}}(),r=function(e,n,t){X((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{balances:Object(ve.a)(Object(ve.a)({},e.balances),{},{balance:n===H?e.balances.balance.add(t):e.balances.balance.sub(t)})})}))},b=function(){var e=Object(he.a)(ye.a.mark((function e(n,t){var a,i,r,b,s,d,c,f,o,u;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n){e.next=6;break}return e.next=3,n.admin.readChallenges(t,25);case 3:e.t0=e.sent,e.next=9;break;case 6:return e.next=8,Le.readChallenges(t,25);case 8:e.t0=e.sent;case 9:return a=e.t0,i=a.totalCnt,r=a.indexes,b=a.blockNumbers,s=a.rewardUnits,d=a.challengeHashes,c=a.nexts,f=a.claimsCnt,o=a.claimed,u=d.map((function(e){return e.toHexString()})),e.abrupt("return",{totalCnt:i,indexes:r,blockNumbers:b,rewardUnits:s,challengeHashes:u,nexts:c,claimsCnt:f,claimed:o});case 13:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();(function(){var e=Object(he.a)(ye.a.mark((function e(){var n,t,a,i,r,d,c,f,o,u,l,p,m,y,h,v,_,w,T,C,E,A,L,I,M,N,O,S,U,P,F;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Y(""),Q(!0),e.prev=2,!k||R&&D&&D.provider===k&&D.signer===R){e.next=15;break}return n=k.getSigner(),t=oe(Ce,"token",n),a=oe(Ce,"records",n),i=oe(Ce,"admin",n),r=oe(Ce,"trustee",n),d=oe(Ce,"locker",n),c=oe(Ce,"marketing",n),f={provider:k,signer:n,token:t,records:a,admin:i,trustee:r,locker:d,marketing:c},x(n),B(f),e.abrupt("return");case 15:return e.next=17,Promise.all([b(D,!0),b(D,!1),ke.DEMO(),ke.owner(),ke.paused(),Me.paused(),Le.getChallengesAllowance(),Ee.totalSupply(),Ie.totalLockedBalance(),ke.getClaimedTokens()]);case 17:if(o=e.sent,u=Object(s.a)(o,10),l=u[0],p=u[1],m=u[2],y=u[3],h=u[4],v=u[5],_=u[6],w=u[7],T=u[8],C=u[9],E={balances:[],blockNumbers:[]},!k||!D){e.next=36;break}return e.next=33,Promise.all([Ee.balanceOf(H),k.getBalance(H),Ie.balanceOf(H),Ie.availableBalanceOf(H),Ee.balanceOf(ke.address),Ae.getCommision(H),D.records.getBalances()]);case 33:e.t0=e.sent,e.next=37;break;case 36:e.t0=[ne,ne,ne,ne,ne,0,E];case 37:A=e.t0,L=Object(s.a)(A,7),I=L[0],M=L[1],N=L[2],O=L[3],S=L[4],U=L[5],P=L[6],F={balance:I,balanceMatic:M,totalSupply:w,claimedTokens:C,availableTokens:S,lockedBalance:N,lockedAvailableBalance:O,totalLockedBalance:T},g(m),ae(y),fe(h),we(v),X({challengesAllowance:_,basicChallenges:p,premiumChallenges:l,registeredBalances:P,balances:F,commision:U}),e.next=59;break;case 55:e.prev=55,e.t1=e.catch(2),console.log(e.t1),Ne();case 59:return e.prev=59,Q(!1),e.finish(59);case 62:case"end":return e.stop()}}),e,null,[[2,55,59,62]])})));return function(){return e.apply(this,arguments)}})()();var d=ne,c=(new Date).getTime(),f=!1,o=function(){},u=function(){var e=Object(he.a)(ye.a.mark((function e(){var n;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(k){e.next=2;break}return e.abrupt("return");case 2:if(e.prev=2,Y(""),!((new Date).getTime()-c>=18e5)){e.next=9;break}return o(),E(!0),e.abrupt("return");case 9:return e.next=11,k.getBalance(H);case 11:n=e.sent,d.eq(n)||X((function(e){return Object(ve.a)(Object(ve.a)({},e),{},{balances:Object(ve.a)(Object(ve.a)({},e.balances),{},{balanceMatic:n})})})),d=n,e.next=20;break;case 16:e.prev=16,e.t0=e.catch(2),console.log(e.t0),Ne();case 20:case"end":return e.stop()}}),e,null,[[2,16]])})));return function(){return e.apply(this,arguments)}}();return o=function(){var e=setInterval(u,1e4);ke.on("Claim",n),Le.on("AddChallenge",i);var b=Ee.filters.Transfer(H,null,null);Ee.on(b,r);var s=Ee.filters.Transfer(null,H,null);Ee.on(s,r);var d=Ae.filters.Commision(H,null);Ae.on(d,t);var c=Ae.filters.RegisteredBalance(H,null,null);return Ae.on(c,a),f=!0,function(){f&&(clearTimeout(e),ke.off("Claim",n),Le.off("AddChallenge",i),Ee.off(b,r),Ee.off(s,r),Ae.off(d,t),Ae.off(c,a),f=!1)}}()}}),[b,Ce,k,R,D,Ee,Ae,Le,ke,Ie,Me,H,h,Ne]);var Oe=function(){var e=Object(he.a)(ye.a.mark((function e(n,t,a,i){var r,b,s,d,c;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!ce){e.next=2;break}return e.abrupt("return",{rewardUnits:0,reason:101,premium:!1,rewardsCnt:0});case 2:return e.prev=2,e.next=5,ke.verifyClaim(n,t,a,i);case 5:return r=e.sent,b=r.rewardUnits,s=r.reason,d=r.premium,c=r.rewardsCnt,e.abrupt("return",{rewardUnits:b,reason:s,premium:d,rewardsCnt:c});case 13:return e.prev=13,e.t0=e.catch(2),e.abrupt("return",{rewardUnits:0,reason:100,premium:!1,rewardsCnt:0});case 16:case"end":return e.stop()}}),e,null,[[2,13]])})));return function(n,t,a,i){return e.apply(this,arguments)}}(),Se=function(e,n,t){0===n||window.alert("Claim on block #"+e.toString()+"\nStatus: FAILED\nReason: "+function(e){var n="";if("string"===typeof e)return e;switch(e){case 0:n="Request satisfies all criteria to claim the tokens (at this moment)";break;case 1:n="blockNumber does not exist or has no live challenge assigned right now";break;case 2:n="Invalid or weak solution";break;case 3:n="This challenge has already been claimed by this address";break;case 4:n="All available rewards have been claimed already";break;case 5:n="Recipient's address is not eligible for rewards, external miners can only make claims on addresses with at least 0.001 LUMI";break;case 6:n="recipient's address is not eligible for rewards, it is a contract that is not a Lumina Fund";break;case 100:n="Invalid claim string";break;case 101:n="The contract is paused";break;default:n="Unknown Reason #"+e}return n}(n))},De=function(){var e=Object(he.a)(ye.a.mark((function e(n,t,a,i){var r,b,s,d;return ye.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(k&&D){e.next=3;break}return window.alert("Please connect to your wallet to claim your reward"),e.abrupt("return",!1);case 3:return e.next=5,Oe(n,t,a,i);case 5:if(r=e.sent,r.rewardUnits,0!==(b=r.reason)){e.next=16;break}return e.next=11,k.getGasPrice();case 11:return s=e.sent,d={gasLimit:1e6,gasPrice:s},e.next=15,Re(D.trustee,(function(e){return e.claimReward(n,t,a,i,d)}));case 15:return e.abrupt("return",e.sent);case 16:return Se(n,b),e.abrupt("return",!1);case 18:case"end":return e.stop()}}),e)})));return function(n,t,a,i){return e.apply(this,arguments)}}(),Be=function(e){return X((function(n){return Object(ve.a)(Object(ve.a)({},n),{},{commision:e})}))},Ue=z.challengesAllowance,Pe=z.basicChallenges,He=z.premiumChallenges,Fe=z.registeredBalances,Ge=z.balances,qe=z.commision,ze={theme:p,demo:h,mobile:_,sleeping:C,contracts:D,provider:k,signer:R,address:H,challengesAllowance:Ue,basicChallenges:Pe,premiumChallenges:He,registeredBalances:Fe,balances:Ge,commision:qe,err:K,loading:J,ownerAddress:te,paused:ce,marketingPaused:me,runTx:Re,setErr:Y,setProvider:I,setAddress:F,setCommision:Be,verifyClaim:Oe,claimReward:De,refresh:function(){E(!1),d((function(e){return e+1}))}};return i.a.createElement($n,ze)},nt=t(16),tt=t(8),at=t(138);nt.b.add(tt.hb),nt.b.add(tt.v),nt.b.add(at.b),nt.b.add(tt.w),nt.b.add(tt.n),nt.b.add(tt.Y),nt.b.add(tt.y),nt.b.add(tt.W),nt.b.add(tt.g),nt.b.add(tt.V),nt.b.add(tt.z),nt.b.add(tt.C),nt.b.add(tt.db),nt.b.add(tt.I),nt.b.add(tt.D),nt.b.add(tt.u),nt.b.add(tt.h),nt.b.add(tt.b),nt.b.add(tt.f),nt.b.add(tt.G),nt.b.add(tt.R),nt.b.add(tt.eb),nt.b.add(tt.fb),nt.b.add(tt.gb),nt.b.add(tt.J),nt.b.add(tt.l),nt.b.add(tt.T),nt.b.add(tt.ab),nt.b.add(tt.Z),nt.b.add(tt.bb),nt.b.add(tt.p),nt.b.add(tt.M),nt.b.add(tt.N),nt.b.add(tt.O),nt.b.add(tt.a),nt.b.add(tt.H),nt.b.add(tt.F),nt.b.add(tt.S),nt.b.add(tt.P),nt.b.add(tt.m),nt.b.add(tt.L),nt.b.add(tt.X),nt.b.add(tt.t),nt.b.add(tt.s),nt.b.add(tt.e),nt.b.add(tt.x),nt.b.add(tt.i),nt.b.add(tt.q),nt.b.add(tt.U),nt.b.add(tt.A),nt.b.add(tt.c),nt.b.add(tt.E),nt.b.add(tt.j),nt.b.add(tt.r),nt.b.add(tt.d),nt.b.add(tt.cb),nt.b.add(tt.k),nt.b.add(at.a),nt.b.add(tt.B),nt.b.add(tt.K),nt.b.add(tt.o),nt.b.add(at.c),nt.b.add(tt.Q);t(857);var it=function(){var e=Object(a.useState)("polygon"),n=Object(s.a)(e,2),t=n[0],r=n[1],b=Object(a.useState)(0),d=Object(s.a)(b,2),c=d[0],f=d[1];return i.a.createElement("div",{className:"App"},i.a.createElement("header",{className:"App-header"},i.a.createElement(pe.Provider,{value:le(t,c,(function(e){return r(e)}),(function(){return f(c+1)}))},i.a.createElement(et,null))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));b.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(it,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))},92:function(e,n,t){e.exports={connect:"ConnectedAddress_connect__2EEUV",address:"ConnectedAddress_address__3JFGQ",button:"ConnectedAddress_button__3ReGc",invalid:"ConnectedAddress_invalid__ytcGc"}},98:function(e){e.exports=JSON.parse('{"polygon":{"chainId":137,"display":"Polygon","name":"matic-mainnet","url":["https://speedy-nodes-nyc.moralis.io/035b3de1d2df1522e3ccf5d6/polygon/mainnet","https://polygon-rpc.com/","https://matic-mainnet.chainstacklabs.com","https://rpc-mainnet.matic.quiknode.pro","https://rpc-mainnet.maticvigil.com","https://rpc-mainnet.matic.network","https://matic-mainnet-full-rpc.bwarelabs.com"]},"mumbai":{"chainId":80001,"display":"Mumbai","name":"matic-testnet","url":"https://rpc-mumbai.maticvigil.com/"},"localhost":{"chainId":31337,"display":"Hardhat","name":"hardhat","url":"http://localhost:8545"},"unknown":{"chainId":0,"display":"Polygon","name":"matic-mainnet","url":"https://rpc-mainnet.maticvigil.com/"}}')}},[[461,1,2]]]);
//# sourceMappingURL=main.ebce7eb7.chunk.js.map